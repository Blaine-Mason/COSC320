Lab 3:
#ifndef TREENODE
#define TREENODE


#include <cstddef>

// represents a node in a binary tree
template <typename T>
class tnode
{
   public:
		// tnode is a class implementation structure. making the
		// data public simplifies building class functions
		T nodeValue;
		tnode<T> *left, *right;

		// default constructor. data not initialized
		tnode()
		{}

      // initialize the data members
		tnode (const T& item, tnode<T> *lptr = NULL,
				 tnode<T> *rptr = NULL):
					nodeValue(item), left(lptr), right(rptr)
		{}
};

#endif	// TREENODE
================================================================================
#ifndef TREE_LIBRARY_FUNCTIONS
#define TREE_LIBRARY_FUNCTIONS

#include <iostream>
#include <sstream>
#include <iomanip>
#include <string>
#include <queue>

#ifndef NULL
#include <cstddef>
#endif  // NULL

#include "d_tnode.h"		// use tnode class

using namespace std;

// objects hold a formatted label string and the level,column
// coordinates for a shadow tree node
class tnodeShadow
{
	public:
		string nodeValueStr;	// formatted node value
		int level,column;
		tnodeShadow *left, *right;

		tnodeShadow ()
		{}
};

// create one of three binary trees with character data.
// the argument n selects from tree 0 - tree 2
tnode<char> *buildTree(int n);

// inorder recursive output of the nodes in a binary tree.
// output separator after each node value. default value
// of separator is "  "
template <typename T>
void inorderOutput(tnode<T> *t, const string& separator = "  ");

// postorder recursive output of the nodes in a binary tree.
// output separator after each node value. default value
// of separator is "  "
template <typename T>
void postorderOutput(tnode<T> *t, const string& separator = "  ");

// traverse the tree level by level and output each node in a
// binary tree. output separator after each node value. default value
// of separator is "  "
template <typename T>
void levelorderOutput(tnode<T> *t, const string& separator = "  ");

// accumulate the number of leaf nodes in count
template <typename T>
void countLeaf(tnode<T> *t, int& count);

// return the depth of the binary tree
template <typename T>
int depth (tnode<T> *t);

// create copy of tree t and return a pointer to the new root
template <typename T>
tnode<T> *copyTree(tnode<T> *t);

// traverse the nodes in the binary tree and delete each node
template <typename T>
void deleteTree(tnode<T> *t);

// delete all tree nodes using deleteTree() and then assign
// t to be NULL
template <typename T>
void clearTree(tnode<T> * & t);

// recursive inorder scan used to build the shadow tree
template <typename T>
tnodeShadow *buildShadowTree(tnode<T> *t, int level, int& column);

// display a binary tree. output of a node value requires
// no more than maxCharacters
template <typename T>
void displayTree(tnode<T> *t, int maxCharacters);

// delete the nodes in the shadow tree
void deleteShadowTree(tnodeShadow *t);

tnode<char> *buildTree(int n)
{
	// 9 tnode pointers; points to the 9 items in the tree
	tnode<char> *root, *b, *c, *d, *e, *f, *g, *h, *i;

	// parameter n specifies a tree in the range 0 - 2
	switch(n)
	{
		// nodes d and e are leaf nodes
		case 0:
			d = new tnode<char> ('D');
			e = new tnode<char> ('E');
			b = new tnode<char> ('B',(tnode<char> *)NULL, d);
			c = new tnode<char> ('C',e, (tnode<char> *)NULL);
			root = new tnode<char> ('A',b, c);
			break;

		// nodes g, h, i, and d are leaf nodes
		case 1:
			g = new tnode<char> ('G');
			h = new tnode<char> ('H');
			i = new tnode<char> ('I');
			d = new tnode<char> ('D');
			e = new tnode<char> ('E',g, (tnode<char> *)NULL);
			f = new tnode<char> ('F',h, i);
			b = new tnode<char> ('B',d, e);
			c = new tnode<char> ('C',(tnode<char> *)NULL, f);
			root = new tnode<char> ('A',b, c);
			break;

		// nodes g, h, i and f are leaf nodes
		case 2:
			g = new tnode<char> ('G');
			h = new tnode<char> ('H');
			i = new tnode<char> ('I');
			d = new tnode<char> ('D',(tnode<char> *)NULL, g);
			e = new tnode<char> ('E',h, i);
			f = new tnode<char> ('F');
			b = new tnode<char> ('B',d, (tnode<char> *)NULL);
			c = new tnode<char> ('C',e, f);
			root = new tnode<char> ('A',b, c);
			break;
	}

	return root;
}

template <typename T>
void inorderOutput(tnode<T> *t, const string& separator)
{
   // the recursive scan terminates on a empty subtree
   if (t != NULL)
   {
      inorderOutput(t->left, separator);	// descend left
      cout << t->nodeValue << separator;	// output the node
      inorderOutput(t->right, separator);	// descend right
   }
}

template <typename T>
void postorderOutput(tnode<T> *t, const string& separator)
{
   // the recursive scan terminates on a empty subtree
   if (t != NULL)
   {
      postorderOutput(t->left, separator);	// descend left
      postorderOutput(t->right, separator);	// descend right
      cout << t->nodeValue << separator;			// output the node
   }
}

template <typename T>
void levelorderOutput(tnode<T> *t, const string& separator)
{
   // store siblings of each node in a queue so that they are
   // visited in order at the next level of the tree
   queue<tnode<T> *> q;
   tnode<T> *p;

   // initialize the queue by inserting the root in the queue
   q.push(t);

   // continue the iterative process until the queue is empty
   while(!q.empty())
   {
      // delete front node from queue and output the node value
      p = q.front();
		q.pop();
      cout << p->nodeValue << separator;

		// if a left child exists, insert it in the queue
      if(p->left != NULL)
			q.push(p->left);
      // if a right child exists, insert next to its sibling
      if(p->right != NULL)
			q.push(p->right);
   }
}

// assume that count initialized to 0
template <typename T>
void countLeaf (tnode<T> *t, int& count)
{
   if (t != NULL)
   {
      // check if t is a leaf node (no children).
      // if so, increment count
      if (t->left == NULL && t->right == NULL)
         count++;

		countLeaf(t->left, count);		// descend left
		countLeaf(t->right, count);	// descend right
   }
}

// determine the depth of the tree using a postorder scan
template <typename T>
int depth (tnode<T> *t)
{
   int depthLeft, depthRight, depthval;

   if (t == NULL)
		// depth of an empty tree is -1
	  depthval = -1;
   else
	{
		// find the depth of the left subtree of t
		depthLeft= depth(t->left);
		// find the depth of the right subtree of t
		depthRight= depth(t->right);
		// depth of the tree with root t is 1 + maximum
		// of the depths of the two subtrees
		depthval = 1 +
			(depthLeft > depthRight ? depthLeft : depthRight);
   }

	return depthval;
}

template <typename T>
tnode<T> *copyTree(tnode<T> *t)
{
   // newNode points at a new node that the algorithm
	// creates. newLptr. and newRptr point to the subtrees
	// of newNode
   tnode<T> *newLeft, *newRight, *newNode;

   // stop the recursive scan when we arrive at empty tree
   if (t == NULL)
      return NULL;

   // build the new tree from the bottom up by building the two
   // subtrees and then building the parent. at node t, make
	// a copy of the left subtree and assign its root node pointer
	// to newLeft. make a copy of the right subtree and assign its
	// root node pointer to newRight
	newLeft = copyTree(t->left);
	newRight = copyTree(t->right);

   // create a new node whose value is the same as the value in t
	// and whose children are the copied subtrees
   newNode = new tnode<T> (t->nodeValue, newLeft, newRight);

   // return a pointer to the root of the newly copied tree
   return newNode;
}

template <typename T>
void deleteTree(tnode<T> *t)
{
	// postorder scan. delete left and right
	// subtrees of t and then node t
   if (t != NULL)
   {
      deleteTree(t->left);
      deleteTree(t->right);
      delete t;
   }
}

template <typename T>
void clearTree(tnode<T> * & t)
{
	deleteTree(t);
	t = NULL;
}

template <typename T>
tnodeShadow *buildShadowTree(tnode<T> *t, int level, int& column)
{
	// pointer to new shadow tree node
	tnodeShadow *newNode = NULL;
	// ostr used to perform format conversion
	ostringstream ostr;

	if (t != NULL)
	{
		// create the new shadow tree node
		newNode = new tnodeShadow;

		// allocate node for left child at next level in tree; attach node
		tnodeShadow *newLeft = buildShadowTree(t->left, level+1, column);
		newNode->left = newLeft;

		// initialize data members of the new node
		ostr << t->nodeValue << ends;	// format conversion
		newNode->nodeValueStr = ostr.str();
		newNode->level = level;
		newNode->column = column;

		// update column to next cell in the table
		column++;

		// allocate node for right child at next level in tree; attach node
		tnodeShadow *newRight = buildShadowTree(t->right, level+1, column);
		newNode->right = newRight;
	}

	return newNode;
}

template <typename T>
void displayTree(tnode<T> *t, int maxCharacters)
{
	string label;
	int level = 0, column = 0;
	int colWidth = maxCharacters + 1;
	//
	int currLevel = 0, currCol = 0;

	if (t == NULL)
		return;

	// build the shadow tree
	tnodeShadow *shadowRoot = buildShadowTree(t, level, column);

	// use during the level order scan of the shadow tree
	tnodeShadow *currNode;

   // store siblings of each tnodeShadow object in a queue so that
	// they are visited in order at the next level of the tree
   queue<tnodeShadow *> q;

   // insert the root in the queue and set current level to 0
   q.push(shadowRoot);

   // continue the iterative process until the queue is empty
   while(!q.empty())
   {
      // delete front node from queue and make it the current node
      currNode = q.front();
		q.pop();

		// if level changes, output a newline
		if (currNode->level > currLevel)
		{
			currLevel = currNode->level;
			currCol = 0;
			cout << endl;
		}

		// if a left child exists, insert the child in the queue
      if(currNode->left != NULL)
			q.push(currNode->left);

		// if a right child exists, insert the child in the queue
      if(currNode->right != NULL)
			q.push(currNode->right);

		// output formatted node label
		if (currNode->column > currCol)
		{
			cout << setw((currNode->column-currCol)*colWidth) << " ";
			currCol = currNode->column;
		}
		cout << setw(colWidth) << currNode->nodeValueStr;
		currCol++;
   }
	cout << endl;

	// delete the shadow tree
	deleteShadowTree(shadowRoot);
}

void deleteShadowTree(tnodeShadow *t)
{
	// if current root node is not NULL, delete its left subtree,
	// its right subtree and then the node itself
	if (t != NULL)
	{
		deleteShadowTree(t->left);
		deleteShadowTree(t->right);
		delete t;
	}
}

#endif   // TREE_LIBRARY_FUNCTIONS
================================================================================
Lab-04:
#ifdef __BORLANDC__
// suppress the warning message about comparing signed and unsigned values
#pragma warn -8012
#endif	// __BORLANDC__

#ifndef INFIX_TO_POSTFIX
#define INFIX_TO_POSTFIX

#include <iostream>
#include <string>
#include <stack>
#include <ctype.h>

#include "d_expsym.h"	// expressionSymbol class
#include "d_except.h"	// for expressionError exception

using namespace std;

// labels designating the parentheses characters
const char lParen  = '(', rParen = ')';

class infix2Postfix
{
	public:
		infix2Postfix();
			// default constructor. infix expression is NULL string
		infix2Postfix(const string& infixExp);
			// initialize the infix expression

		void setInfixExp(const string& infixExp);
			// change the infix expression

		string postfix();
			// return a string that contains the equivalent postfix
			// expression. the function throws expressionError if an
			// error occurs during conversion

	private:

		string infixExpression;
			// the infix expression to convert
		string postfixExpression;
			// built to contain the postfix equivalent of infixExpression
		stack<expressionSymbol> operatorStack;
			// stack of expressionSymbol objects

		void outputHigherOrEqual(const expressionSymbol& op);
			// the expressionSymbol object op holds the current
			// symbol. pop the stack and output as long as the symbol
			// on the top of the stack has a precedence >= that of
			// the current operator

		bool isOperator(char ch) const;
			// is ch one of '+','-','*','/','%','^'
};


void infix2Postfix::outputHigherOrEqual(const expressionSymbol& op)
{
	expressionSymbol op2;

	while(!operatorStack.empty() &&
			(op2 = operatorStack.top()) >= op)
	{
		operatorStack.pop();
		postfixExpression += op2.getOp();
		postfixExpression += ' ';
	}
}

bool infix2Postfix::isOperator(char ch) const
{
	return ch == '+' || ch == '-' || ch == '*' ||
			 ch == '%' || ch == '/' || ch == '^';
}

infix2Postfix::infix2Postfix()
{}

infix2Postfix::infix2Postfix(const string& infixExp):
		infixExpression(infixExp)
{}

void infix2Postfix::setInfixExp(const string& infixExp)
{
	// assign a new infix expression
	infixExpression = infixExp;
	// make postfixExpression the NULL string
	postfixExpression = "";
}

string infix2Postfix::postfix()
{
	expressionSymbol op;
	// maintain rank for error checking
	int rank = 0, i;
	char ch;

	// process until end of the expression
	for (i=0; i < infixExpression.length(); i++)
	{
		ch = infixExpression[i];

		//  ********  process an operand  ********
		// an operand is a single digit non-negative integer
		if (islower(ch))
		{
			// just add operand to output expression, followed by
			// a blank
			postfixExpression += ch;
			postfixExpression += ' ';
			// rank of an operand is 1, accumulated rank
			// must be 1
			rank++;
			if (rank > 1)
				throw expressionError("infix2Postfix: Operator expected");
		}
		//  *********  process an operator or '('  **********
		else if (isOperator(ch) || ch == '(')
		{
			// rank of an operator is -1. rank of '(' is 0.
			// accumulated rank should be 0
			if (ch != '(')
					rank--;

			if (rank < 0)
				throw expressionError("infix2Postfix: Operand expected");	else
			{
				// output the operators on the stack with higher
				// or equal precedence. push the current operator
				// on the stack
				op = expressionSymbol(ch);
				outputHigherOrEqual(op);
				operatorStack.push(op);
			}
		}
		//  *********  process a right parenthesis  **********
		else if (ch == rParen)
		{
			// build an expressionSymbol object holding ')', which
			// has precedence lower than the stack precedence
			// of any operator except '('. pop the operator stack
			// and output operators from the subexpression until
			// '(' surfaces or the stack is empty. if the stack is
			// empty, a '(' is missing; otherwise, pop off '('.
			op = expressionSymbol(ch);
			outputHigherOrEqual(op);
			if(operatorStack.empty())
				throw expressionError("infix2Postfix: Missing '('");
			else
				operatorStack.pop(); // get rid of '('
		}
		//  *********  make sure ch is whitespace  **********
		else if (!isspace(ch))
			throw expressionError("infix2Postfix: Invalid input");
	}

	// finish processing
	if (rank != 1)
		throw expressionError("infix2Postfix: Operand expected");
	else
	{
		// flush operator stack and complete expression evaluation.
		// if find left parenthesis, a right parenthesis is
		// missing.
 		while (!operatorStack.empty())
		{
			op = operatorStack.top();
			operatorStack.pop();
			if (op.getOp() == lParen)
				throw expressionError("infix2Postfix: Missing ')'");
			else
			{
				postfixExpression += op.getOp();
				postfixExpression += ' ';
			}
		}
	}

	return postfixExpression;
}

#endif	// INFIX_TO_POSTFIX
================================================================================
tnode<char> *buildExpTree(const string& exp)
{
	// newnode is the address of the root of subtrees we build
	tnode<char> *newnode, *lptr, *rptr;
	char token;
	// subtrees go into and off the stack
	stack<tnode<char> *> s;
	int i = 0;


	// loop until i reaches the end of the string
	while(i != exp.length())
	{
		// skip blanks and tabs in the expression
		while (exp[i] == ' ' || exp[i] == '\t')
			i++;

		// if the expression has trailing whitespace, we could
		// be at the end of the string
		if (i == exp.length())
			break;

		// extract the current token and increment i
		token = exp[i];
		i++;

		// see if the token is an operator or an operand
		if (token == '+' || token == '-' || token == '*' || token == '/')
		{
			// current token is an operator. pop two subtrees off
			// the stack.
			rptr = s.top();
			s.pop();
			lptr = s.top();
			s.pop();

			// create a new subtree with token as root and subtees
			// lptr and rptr and push it onto the stack
			newnode = new tnode<char>(token,lptr,rptr);
			s.push(newnode);
		}
		else // must be an operand
		{
			// create a leaf node and push it onto the stack
			newnode = new tnode<char>(token);
			s.push(newnode);
		}
	}

	// if the expression was not empty, the root of the expression
	// tree is on the top of the stack
	if (!s.empty())
		return s.top();
	else
		return NULL;
}
================================================================================
#ifndef EXCEPTION_CLASSES
#define EXCEPTION_CLASSES

#include <sstream>
#include <string>

using namespace std;

class baseException
{
	public:
		baseException(const string& str = ""):
			msgString(str)
		{
			if (msgString == "")
				msgString = "Unspecified exception";
		}

		string what() const
		{
			return msgString;
		}

	// protected allows a derived class to access msgString.
	// chapter 13 discusses protected in detail
	protected:
		string msgString;
};

// failure to allocate memory (new() returns NULL)
class memoryAllocationError: public baseException
{
	public:
		memoryAllocationError(const string& msg = ""):
			baseException(msg)
		{}
};

// function argument out of proper range
class rangeError: public baseException
{
	public:
		rangeError(const string& msg = ""):
			baseException(msg)
		{}
};

// index out of range
class indexRangeError: public baseException
{
	public:
		indexRangeError(const string& msg, int i, int size):
			baseException()
		{
			ostringstream indexErr;

			indexErr << msg << "  index " << i << "  size = " << size << ends;
			// indexRangeError can modify msgString, since it is in
			// the protected section of baseException
			msgString = indexErr.str();
		}
};

// attempt to erase from an empty container
class underflowError: public baseException
{
	public:
		underflowError(const string& msg = ""):
			baseException(msg)
		{}
};

// attempt to insert into a full container
class overflowError: public baseException
{
	public:
		overflowError(const string& msg = ""):
			baseException(msg)
		{}
};

// error in expression evaluation
class expressionError: public baseException
{
	public:
		expressionError(const string& msg = ""):
			baseException(msg)
		{}
};

// bad object reference
class referenceError: public baseException
{
	public:
		referenceError(const string& msg = ""):
			baseException(msg)
		{}
};

// feature not implemented
class notImplementedError: public baseException
{
	public:
		notImplementedError(const string& msg = ""):
			baseException(msg)
		{}
};

// date errors
class dateError: public baseException
{
	public:
		dateError(const string& first, int v, const string& last):
			baseException()
		{
			ostringstream dateErr;

			dateErr << first << ' ' << v << ' ' << last << ends;
			// dateError can modify msgString, since it is in
			// the protected section of baseException
			msgString = dateErr.str();
		}
};

// error in graph class
class graphError: public baseException
{
	public:
		graphError(const string& msg = ""):
			baseException(msg)
		{}
};

// file open error
class fileOpenError: public baseException
{
	public:
		fileOpenError(const string& fname):
			baseException()
		{
			ostringstream fileErr;

			fileErr << "Cannot open \"" << fname << "\"" << ends;
			// fileOpenError can modify msgString, since it is in
			// the protected section of baseException
			msgString = fileErr.str();
		}
};

// error in graph class
class fileError: public baseException
{
	public:
		fileError(const string& msg = ""):
			baseException(msg)
		{}
};

#endif	// EXCEPTION_CLASSES
================================================================================
#ifndef INFIX_SYMBOLS
#define INFIX_SYMBOLS

// a class that maintains the precedence of symbols
class expressionSymbol
{
	public:
		expressionSymbol();
			// default constructor
		expressionSymbol(char ch);
			// initializes the object for operator ch

		friend bool operator>= (const expressionSymbol& left,
										const expressionSymbol& right);
			// return true if stackPrecedence of left is
			// >= inputPrecedence of right. determines whether
			// operator left on the stack should be output before
			// pushing operator right on the stack

		char getOp() const;
			// return operator

	private:
		char op;
			// operator
		int inputPrecedence;
			// input precedence of op
		int stackPrecedence;
			// stack precedence of op
};

// default constructor
expressionSymbol::expressionSymbol()
{}

// constructor that assigns operator and precedence values
expressionSymbol::expressionSymbol(char ch)
{
	op = ch;    // assign operator

	switch(op)
	{
		// '+' and '-' have input/stack precedence 1
		case '+':
		case '-':  inputPrecedence = 1;
					  stackPrecedence = 1;
					  break;

		// '*', '%', and '/' have input/stack precedence 2
		case '*':
		case '%':
		case '/':  inputPrecedence = 2;
					  stackPrecedence = 2;
					  break;

		// '^' is right associative. input precedence 4
		// and stack precedence 3
		case '^':  inputPrecedence = 4;
					  stackPrecedence = 3;
					  break;

		// '(' has input precendence 5, stack precedence -1
		case '(':  inputPrecedence = 5;
					  stackPrecedence = -1;
					  break;

		// ')' has input/stack precedence 0
		case ')':  inputPrecedence = 0;
					  stackPrecedence = 0;
					  break;
	}
}

char expressionSymbol::getOp() const
{
	return op;
}

bool operator>= (const expressionSymbol& left, const expressionSymbol& right )
{
	return left.stackPrecedence >= right.inputPrecedence;
}

#endif // INFIX_SYMBOLS
================================================================================
#ifndef TREE_LIBRARY_FUNCTIONS
#define TREE_LIBRARY_FUNCTIONS

#include <iostream>
#include <sstream>
#include <iomanip>
#include <string>
#include <queue>

#ifndef NULL
#include <cstddef>
#endif  // NULL

#include "d_tnode.h"		// use tnode class

using namespace std;

// objects hold a formatted label string and the level,column
// coordinates for a shadow tree node
class tnodeShadow
{
	public:
		string nodeValueStr;	// formatted node value
		int level,column;
		tnodeShadow *left, *right;

		tnodeShadow ()
		{}
};

// create one of three binary trees with character data.
// the argument n selects from tree 0 - tree 2
tnode<char> *buildTree(int n);

// inorder recursive output of the nodes in a binary tree.
// output separator after each node value. default value
// of separator is "  "
template <typename T>
void inorderOutput(tnode<T> *t, const string& separator = "  ");

// postorder recursive output of the nodes in a binary tree.
// output separator after each node value. default value
// of separator is "  "
template <typename T>
void postorderOutput(tnode<T> *t, const string& separator = "  ");

// traverse the tree level by level and output each node in a
// binary tree. output separator after each node value. default value
// of separator is "  "
template <typename T>
void levelorderOutput(tnode<T> *t, const string& separator = "  ");

// accumulate the number of leaf nodes in count
template <typename T>
void countLeaf(tnode<T> *t, int& count);

// return the depth of the binary tree
template <typename T>
int depth (tnode<T> *t);

// create copy of tree t and return a pointer to the new root
template <typename T>
tnode<T> *copyTree(tnode<T> *t);

// traverse the nodes in the binary tree and delete each node
template <typename T>
void deleteTree(tnode<T> *t);

// delete all tree nodes using deleteTree() and then assign
// t to be NULL
template <typename T>
void clearTree(tnode<T> * & t);

// recursive inorder scan used to build the shadow tree
template <typename T>
tnodeShadow *buildShadowTree(tnode<T> *t, int level, int& column);

// display a binary tree. output of a node value requires
// no more than maxCharacters
template <typename T>
void displayTree(tnode<T> *t, int maxCharacters);

// delete the nodes in the shadow tree
void deleteShadowTree(tnodeShadow *t);

tnode<char> *buildTree(int n)
{
	// 9 tnode pointers; points to the 9 items in the tree
	tnode<char> *root, *b, *c, *d, *e, *f, *g, *h, *i;

	// parameter n specifies a tree in the range 0 - 2
	switch(n)
	{
		// nodes d and e are leaf nodes
		case 0:
			d = new tnode<char> ('D');
			e = new tnode<char> ('E');
			b = new tnode<char> ('B',(tnode<char> *)NULL, d);
			c = new tnode<char> ('C',e, (tnode<char> *)NULL);
			root = new tnode<char> ('A',b, c);
			break;

		// nodes g, h, i, and d are leaf nodes
		case 1:
			g = new tnode<char> ('G');
			h = new tnode<char> ('H');
			i = new tnode<char> ('I');
			d = new tnode<char> ('D');
			e = new tnode<char> ('E',g, (tnode<char> *)NULL);
			f = new tnode<char> ('F',h, i);
			b = new tnode<char> ('B',d, e);
			c = new tnode<char> ('C',(tnode<char> *)NULL, f);
			root = new tnode<char> ('A',b, c);
			break;

		// nodes g, h, i and f are leaf nodes
		case 2:
			g = new tnode<char> ('G');
			h = new tnode<char> ('H');
			i = new tnode<char> ('I');
			d = new tnode<char> ('D',(tnode<char> *)NULL, g);
			e = new tnode<char> ('E',h, i);
			f = new tnode<char> ('F');
			b = new tnode<char> ('B',d, (tnode<char> *)NULL);
			c = new tnode<char> ('C',e, f);
			root = new tnode<char> ('A',b, c);
			break;
	}

	return root;
}

template <typename T>
void inorderOutput(tnode<T> *t, const string& separator)
{
   // the recursive scan terminates on a empty subtree
   if (t != NULL)
   {
      inorderOutput(t->left, separator);	// descend left
      cout << t->nodeValue << separator;	// output the node
      inorderOutput(t->right, separator);	// descend right
   }
}

template <typename T>
void postorderOutput(tnode<T> *t, const string& separator)
{
   // the recursive scan terminates on a empty subtree
   if (t != NULL)
   {
      postorderOutput(t->left, separator);	// descend left
      postorderOutput(t->right, separator);	// descend right
      cout << t->nodeValue << separator;			// output the node
   }
}

template <typename T>
void levelorderOutput(tnode<T> *t, const string& separator)
{
   // store siblings of each node in a queue so that they are
   // visited in order at the next level of the tree
   queue<tnode<T> *> q;
   tnode<T> *p;

   // initialize the queue by inserting the root in the queue
   q.push(t);

   // continue the iterative process until the queue is empty
   while(!q.empty())
   {
      // delete front node from queue and output the node value
      p = q.front();
		q.pop();
      cout << p->nodeValue << separator;

		// if a left child exists, insert it in the queue
      if(p->left != NULL)
			q.push(p->left);
      // if a right child exists, insert next to its sibling
      if(p->right != NULL)
			q.push(p->right);
   }
}

// assume that count initialized to 0
template <typename T>
void countLeaf (tnode<T> *t, int& count)
{
   if (t != NULL)
   {
      // check if t is a leaf node (no children).
      // if so, increment count
      if (t->left == NULL && t->right == NULL)
         count++;

		countLeaf(t->left, count);		// descend left
		countLeaf(t->right, count);	// descend right
   }
}

// determine the depth of the tree using a postorder scan
template <typename T>
int depth (tnode<T> *t)
{
   int depthLeft, depthRight, depthval;

   if (t == NULL)
		// depth of an empty tree is -1
	  depthval = -1;
   else
	{
		// find the depth of the left subtree of t
		depthLeft= depth(t->left);
		// find the depth of the right subtree of t
		depthRight= depth(t->right);
		// depth of the tree with root t is 1 + maximum
		// of the depths of the two subtrees
		depthval = 1 +
			(depthLeft > depthRight ? depthLeft : depthRight);
   }

	return depthval;
}

template <typename T>
tnode<T> *copyTree(tnode<T> *t)
{
   // newNode points at a new node that the algorithm
	// creates. newLptr. and newRptr point to the subtrees
	// of newNode
   tnode<T> *newLeft, *newRight, *newNode;

   // stop the recursive scan when we arrive at empty tree
   if (t == NULL)
      return NULL;

   // build the new tree from the bottom up by building the two
   // subtrees and then building the parent. at node t, make
	// a copy of the left subtree and assign its root node pointer
	// to newLeft. make a copy of the right subtree and assign its
	// root node pointer to newRight
	newLeft = copyTree(t->left);
	newRight = copyTree(t->right);

   // create a new node whose value is the same as the value in t
	// and whose children are the copied subtrees
   newNode = new tnode<T> (t->nodeValue, newLeft, newRight);

   // return a pointer to the root of the newly copied tree
   return newNode;
}

template <typename T>
void deleteTree(tnode<T> *t)
{
	// postorder scan. delete left and right
	// subtrees of t and then node t
   if (t != NULL)
   {
      deleteTree(t->left);
      deleteTree(t->right);
      delete t;
   }
}

template <typename T>
void clearTree(tnode<T> * & t)
{
	deleteTree(t);
	t = NULL;
}

template <typename T>
tnodeShadow *buildShadowTree(tnode<T> *t, int level, int& column)
{
	// pointer to new shadow tree node
	tnodeShadow *newNode = NULL;
	// ostr used to perform format conversion
	ostringstream ostr;

	if (t != NULL)
	{
		// create the new shadow tree node
		newNode = new tnodeShadow;

		// allocate node for left child at next level in tree; attach node
		tnodeShadow *newLeft = buildShadowTree(t->left, level+1, column);
		newNode->left = newLeft;

		// initialize data members of the new node
		ostr << t->nodeValue << ends;	// format conversion
		newNode->nodeValueStr = ostr.str();
		newNode->level = level;
		newNode->column = column;

		// update column to next cell in the table
		column++;

		// allocate node for right child at next level in tree; attach node
		tnodeShadow *newRight = buildShadowTree(t->right, level+1, column);
		newNode->right = newRight;
	}

	return newNode;
}

template <typename T>
void displayTree(tnode<T> *t, int maxCharacters)
{
	string label;
	int level = 0, column = 0;
	int colWidth = maxCharacters + 1;
	//
	int currLevel = 0, currCol = 0;

	if (t == NULL)
		return;

	// build the shadow tree
	tnodeShadow *shadowRoot = buildShadowTree(t, level, column);

	// use during the level order scan of the shadow tree
	tnodeShadow *currNode;

   // store siblings of each tnodeShadow object in a queue so that
	// they are visited in order at the next level of the tree
   queue<tnodeShadow *> q;

   // insert the root in the queue and set current level to 0
   q.push(shadowRoot);

   // continue the iterative process until the queue is empty
   while(!q.empty())
   {
      // delete front node from queue and make it the current node
      currNode = q.front();
		q.pop();

		// if level changes, output a newline
		if (currNode->level > currLevel)
		{
			currLevel = currNode->level;
			currCol = 0;
			cout << endl;
		}

		// if a left child exists, insert the child in the queue
      if(currNode->left != NULL)
			q.push(currNode->left);

		// if a right child exists, insert the child in the queue
      if(currNode->right != NULL)
			q.push(currNode->right);

		// output formatted node label
		if (currNode->column > currCol)
		{
			cout << setw((currNode->column-currCol)*colWidth) << " ";
			currCol = currNode->column;
		}
		cout << setw(colWidth) << currNode->nodeValueStr;
		currCol++;
   }
	cout << endl;

	// delete the shadow tree
	deleteShadowTree(shadowRoot);
}

void deleteShadowTree(tnodeShadow *t)
{
	// if current root node is not NULL, delete its left subtree,
	// its right subtree and then the node itself
	if (t != NULL)
	{
		deleteShadowTree(t->left);
		deleteShadowTree(t->right);
		delete t;
	}
}

#endif   // TREE_LIBRARY_FUNCTIONS
================================================================================
Enter the expression: (a+b)/c

Prefix form: /  +  a  b  c
Postfix form: a  b  +  c  /

Expression tree:

       /
   +     c
 a   b
================================================================================
Lab-05:
#ifndef Integer_H
#define Integer_H

class integer
{
	public:
		// constructor. initialize intValue and set count = 1
		integer(int n);

		// return intValue
		int getInt();


		// return count
		int getCount();


		// increment count
		void incCount();


		// compare integer objects by intValue
		friend bool operator< (const integer& lhs, const integer& rhs);

		friend bool operator== (const integer& lhs, const integer& rhs);

		// output object in format intValue (count)
		friend ostream& operator<< (ostream& ostr, const integer& obj);

	private:
		// the integer and its count
		int intValue;
		int count;
};


#endif
================================================================================
#ifndef BINARY_SEARCH_TREE_CLASS
#define BINARY_SEARCH_TREE_CLASS

#ifndef NULL
#include <cstddef>
#endif  // NULL

#include <iomanip>		// for setw()
#include <strstream>		// for format conversion
#include <string>			// node data formatted as a string
#include <queue>
#include <utility>		// pair class

#include "d_except.h"	// exception classes
//#include "d_circsh.h"	// for drawing a node
//#include "d_linesh.h"	// for drawing an edge
//#include "d_textsh.h"	// for drawing the node value

using namespace std;

// declares a binary search tree node object
template <typename T>
class stnode
{
   public:
		// stnode is used to implement the binary search tree class
		// making the data public simplifies building the class functions

		T nodeValue;
			// node data
		stnode<T> *left, *right, *parent;
		// child pointers and pointer to the node's parent

      // constructor
		stnode (const T& item, stnode<T> *lptr = NULL,
              stnode<T> *rptr = NULL, stnode<T> *pptr = NULL):
				nodeValue(item), left(lptr), right(rptr), parent(pptr)
		{}
};

// objects hold a formatted label string and the level,column
// coordinates for a shadow tree node
class stnodeShadow
{
	public:
		string nodeValueStr;	// formatted node value
		int level,column;
		stnodeShadow *left, *right;

		stnodeShadow ()
		{}
};

template <typename T>
class stree
{
	public:

// include the iterator nested classes
#include "d_stiter.h"
static bool graphWinOpen;
		stree();
			// constructor. initialize root to NULL and size to 0
		stree(T *first, T *last);
			// constructor. insert the elements from the pointer
			// range [first, last) into the tree
		stree(const stree<T>& tree);
			// copy constructor
		~stree();
			// destructor
		stree<T>& operator= (const stree<T>& rhs);
			// assignment operator

		// search for item. if found, return an iterator pointing
		// at it in the tree; otherwise, return end()
		iterator find(const T& item)
		{
			stnode<T> *curr;

			// search tree for item
			curr = findNode (item);

			// if item found, return const_iterator with value current;
			// otherwise, return end()
			if (curr != NULL)
				return iterator(curr, this);
			else
				return end();
		}

		// constant version
		const_iterator find(const T& item) const
		{
			stnode<T> *curr;

			// search tree for item
			curr = findNode (item);

			// if item found, return const_iterator with value current;
			// otherwise, return end()
			if (curr != NULL)
				return const_iterator(curr, this);
			else
				return end();
		}

		int empty() const;
			// indicate whether the tree is empty
		int size() const;
			// return the number of data items in the tree

		// if item is not in the tree, insert it and
		// return a pair whose iterator component points
		// at item and whose bool component is true. if item
		// is in the tree, return a pair whose iterator
		// component points at the existing item and whose
		// bool component is false
		// Postcondition: the tree size increases by 1 if item
		// is not in the tree
		pair<iterator, bool> insert(const T& item)
		{
			// t is current node in traversal, parent the previous node
			stnode<T> *t = root, *parent = NULL, *newNode;

			// terminate on on empty subtree
			while(t != NULL)
			{
				// update the parent pointer. then go left or right
				parent = t;
				// if a match occurs, return a pair whose iterator
				// component points at item in the tree and whose
				// bool component is false
				if (item == t->nodeValue)
					return pair<iterator, bool> (iterator(t, this), false);
				else if (item < t->nodeValue)
					t = t->left;
				else
					t = t->right;
			}

			// create the new leaf node
			newNode = getSTNode(item,NULL,NULL,parent);

			// if parent is NULL, insert as root node
			if (parent == NULL)
				root = newNode;
			else if (item < parent->nodeValue)
				// insert as left child
				parent->left = newNode;
			else
				// insert as right child
				parent->right = newNode;

			// increment size
			treeSize++;

			// return an pair whose iterator component points at
			// the new node and whose bool component is true
			return pair<iterator, bool> (iterator(newNode, this), true);
		}

		int erase(const T& item);
			// if item is in the tree, erase it and return 1;
			// otherwise, return 0
			// Postcondition: the tree size decreases by 1 if
			// item is in the tree

		void erase(iterator pos);
			// erase the item pointed to by pos.
			// Preconditions: the tree is not empty and pos points
			// to an item in the tree. if the tree is empty, the
			// function throws the underflowError exception. if the
			// iterator is invalid, the function throws the referenceError
			// exception.
			// Postcondition: the tree size decreases by 1

		void erase(iterator first, iterator last);
			// erase all items in the range [first, last).
			// Precondition: the tree is not empty. if the tree
			// is empty, the function throws the underflowError
			// exception.
			// Postcondition: the size of the tree decreases by
			// the number of elements in the range [first, last)

		// return an iterator pointing to the first item
		// inorder
		iterator begin()
		{
			stnode<T> *curr = root;

			// if the tree is not empty, the first node
			// inorder is the farthest node left from root
			if (curr != NULL)
				while (curr->left != NULL)
					curr = curr->left;

			// build return value using private constructor
			return iterator(curr, this);
		}

		// constant version
		const_iterator begin() const
		{
			const stnode<T> *curr = root;

			// if the tree is not empty, the first node
			// inorder is the farthest node left from root
			if (curr != NULL)
				while (curr->left != NULL)
					curr = curr->left;

			// build return value using private constructor
			return const_iterator(curr, this);
		}

		// return an iterator pointing just past the end of
		// the tree data
		iterator end()
		{
			// end indicated by an iterator with NULL stnode pointer
			return iterator(NULL, this);
		}

		// constant version
		const_iterator end() const
		{
			// end indicated by an iterator with NULL stnode pointer
			return const_iterator(NULL, this);
		}

		void displayTree(int maxCharacters);
			// tree display function. maxCharacters is the
			// largest number of characters required to draw
			// the value of a node

		void drawTree(int maxCharacters);
			// tree draw function. maxCharacters is the
			// largest number of characters required to draw
			// the value of a node

		void drawTrees(int maxCharacters);
			// repeated tree draw function. maxCharacters is the
			// largest number of characters required to draw
			// the value of a node

	private:
		stnode<T> *root;
			// pointer to tree root
		int treeSize;
			// number of elements in the tree

		stnode<T> *getSTNode(const T& item,
									stnode<T> *lptr,stnode<T> *rptr, stnode<T> *pptr);
			// allocate a new tree node and return a pointer to it.
			// if memory allocation fails, the function throws the
			// memoryAllocationError exception

		stnode<T> *copyTree(stnode<T> *t);
			// recursive function used by copy constructor and assignment
			// operator to assign the current tree as a copy of another tree

		void deleteTree(stnode<T> *t);
			// recursive function used by destructor and assignment
			// operator to delete all the nodes in the tree

		stnode<T> *findNode(const T& item) const;
			// search for item in the tree. if it is in the tree,
			// return a pointer to its node; otherwise, return NULL.
			// used by find() and erase()

		stnodeShadow *buildShadowTree(stnode<T> *t, int level, int& column);
			// recursive function that builds a subtree of the shadow tree
			// corresponding to node t of the tree we are drawing. level is the
			// level-coordinate for the root of the subtree, and column is the
			// changing column-coordinate of the tree nodes

		void deleteShadowTree(stnodeShadow *t);
			// remove the shadow tree from memory after displayTree()
			// displays the binary search tree

		void drawTreeFrame(int maxCharacters, bool simpleDraw);
			// called by drawTree() and drawTrees() to display tree
};

template <typename T>
bool stree<T>::graphWinOpen = false;

template <typename T>
stnode<T> *stree<T>::getSTNode(const T& item,
			stnode<T> *lptr,stnode<T> *rptr, stnode<T> *pptr)
{
	stnode<T> *newNode;

	// initialize the data and all pointers
	newNode = new stnode<T> (item, lptr, rptr, pptr);
	if (newNode == NULL)
		throw memoryAllocationError("stree: memory allocation failure");

	return newNode;
}

template <typename T>
stnode<T> *stree<T>::copyTree(stnode<T> *t)
{
	stnode<T> *newlptr, *newrptr, *newNode;

	// if tree branch NULL, return NULL
	if (t == NULL)
		return NULL;

	// copy the left branch of root t and assign its root to newlptr
	newlptr = copyTree(t->left);

	// copy the right branch of tree t and assign its root to newrptr
	newrptr = copyTree(t->right);

	// allocate storage for the current root node, assign
	// its value and pointers to its left and right subtrees.
	// the parent pointer of newNode is assigned when
	// newNode's parent is created. if newNode is root,
	// NULL is the correct value for its parent pointer
	newNode = getSTNode(t->nodeValue, newlptr, newrptr, NULL);

	// the current node is the parent of any subtree that
	// is not empty
	if (newlptr != NULL)
		newlptr->parent = newNode;
	if (newrptr != NULL)
		newrptr->parent = newNode;

	return newNode;
}

// delete the tree stored by the current object
template <typename T>
void stree<T>::deleteTree(stnode<T> *t)
{
	// if current root node is not NULL, delete its left subtree,
	// its right subtree and then the node itself
	if (t != NULL)
	{
		deleteTree(t->left);
		deleteTree(t->right);
		delete t;
	}
}

// search for data item in the tree. if found, return its node
// address; otherwise, return NULL
template <typename T>
stnode<T> *stree<T>::findNode(const T& item) const
{
	// cycle t through the tree starting with root
	stnode<T> *t = root;

	// terminate on on empty subtree
	while(t != NULL && !(item == t->nodeValue))
		if (item < t->nodeValue)
			t = t->left;
		else
			t = t->right;

	// return pointer to node; NULL if not found
	return t;
}

template <typename T>
stree<T>::stree(): root(NULL),treeSize(0)
{}

template <typename T>
stree<T>::stree(T *first, T *last): root(NULL),treeSize(0)
{
	T *p = first;

	// insert each item in [first, last) into the tree
	while (p != last)
	{
		insert(*p);
		p++;
	}
}

template <typename T>
stree<T>::stree(const stree<T>& tree): treeSize(tree.treeSize)
{
	// copy tree to the current object
	root = copyTree(tree.root);
}

template <typename T>
stree<T>::~stree()
{
	// erase the tree nodes from memory
	deleteTree(root);

	// tree is emtpy
	root = NULL;
	treeSize = 0;
}

template <typename T>
stree<T>& stree<T>::operator= (const stree<T>& rhs)
{
	// can't copy a tree to itself
	if (this == &rhs)
		return *this;

	// erase the existing tree nodes from memory
	deleteTree(root);

	// copy tree rhs into current object
	root = copyTree(rhs.root);

	// set the tree size
	treeSize = rhs.treeSize;

	// return reference to current object
	return *this;
}

template <typename T>
int stree<T>::empty() const
{
	return root == NULL;
}

template <typename T>
int stree<T>::size() const
{
	return treeSize;
}

template <typename T>
void stree<T>::erase(iterator pos)
{
	// dNodePtr = pointer to node D that is deleted
	// pNodePtr = pointer to parent P of node D
	// rNodePtr = pointer to node R that replaces D
	stnode<T> *dNodePtr = pos.nodePtr, *pNodePtr, *rNodePtr;

	if (treeSize == 0)
 		throw
			underflowError("stree erase(): tree is empty");

	if (dNodePtr == NULL)
 		throw
			referenceError("stree erase(): invalid iterator");

	// assign pNodePtr the address of P
	pNodePtr = dNodePtr->parent;

	// If D has a NULL pointer, the
	// replacement node is the other child
	if (dNodePtr->left == NULL || dNodePtr->right == NULL)
	{
		if (dNodePtr->right == NULL)
			rNodePtr = dNodePtr->left;
		else
			rNodePtr = dNodePtr->right;

		if (rNodePtr != NULL)
			// the parent of R is now the parent of D
			rNodePtr->parent = pNodePtr;
	}
	// both pointers of dNodePtr are non-NULL.
	else
	{
		// find and unlink replacement node for D.
		// starting at the right child of node D,
		// find the node whose value is the smallest of all
		// nodes whose values are greater than the value in D.
		// unlink the node from the tree.

		// pOfRNodePtr = pointer to parent of replacement node
		stnode<T> *pOfRNodePtr = dNodePtr;

		// first possible replacement is right child of D
		rNodePtr = dNodePtr->right;

		// descend down left subtree of the right child of D,
		// keeping a record of current node and its parent.
		// when we stop, we have found the replacement
		while(rNodePtr->left != NULL)
		{
			pOfRNodePtr = rNodePtr;
			rNodePtr = rNodePtr->left;
		}

		if (pOfRNodePtr == dNodePtr)
		{
			// right child of deleted node is the replacement.
			// assign left subtree of D to left subtree of R
			rNodePtr->left = dNodePtr->left;
			// assign the parent of D as the parent of R
			rNodePtr->parent = pNodePtr;
			// assign the left child of D to have parent R
			dNodePtr->left->parent = rNodePtr;
		}
		else
		{
			// we moved at least one node down a left branch
			// of the right child of D. unlink R from tree by
			// assigning its right subtree as the left child of
			// the parent of R
			pOfRNodePtr->left = rNodePtr->right;

			// the parent of the right child of R is the
			// parent of R
			if (rNodePtr->right != NULL)
				rNodePtr->right->parent = pOfRNodePtr;

			// put replacement node in place of dNodePtr
			// assign children of R to be those of D
			rNodePtr->left = dNodePtr->left;
			rNodePtr->right = dNodePtr->right;
			// assign the parent of R to be the parent of D
			rNodePtr->parent = pNodePtr;
			// assign the parent pointer in the children
			// of R to point at R
			rNodePtr->left->parent = rNodePtr;
			rNodePtr->right->parent = rNodePtr;
		}
	}

	// complete the link to the parent node.

	// deleting the root node. assign new root
	if (pNodePtr == NULL)
		root = rNodePtr;
	// attach R to the correct branch of P
	else if (dNodePtr->nodeValue < pNodePtr->nodeValue)
		pNodePtr->left = rNodePtr;
	else
		pNodePtr->right = rNodePtr;

	// delete the node from memory and decrement tree size
	delete dNodePtr;
	treeSize--;
}

template <typename T>
int stree<T>::erase(const T& item)
{
	int numberErased = 1;
	// search tree for item
	stnode<T> *p  = findNode(item);

	// if item found, delete the node
	if (p != NULL)
		erase(iterator(p,this));
	else
		numberErased = 0;

	return numberErased;
}

template <typename T>
void stree<T>::erase(iterator first, iterator last)
{
	if (treeSize == 0)
 		throw
			underflowError("stree erase(): tree is empty");

	iterator p = first;

	if (first == begin() && last == end())
	{
		// we are asked to erase the entire tree.
		// erase the tree nodes from memory
		deleteTree(root);

		// tree is emtpy
		root = NULL;
		treeSize = 0;
	}
	else
		// erase each item in a subrange of the tree
		while (p != last)
			erase(p++);
}


// recursive inorder scan used to build the shadow tree
template <typename T>
stnodeShadow *stree<T>::buildShadowTree(stnode<T> *t, int level, int& column)
{
	// pointer to new shadow tree node
	stnodeShadow *newNode = NULL;
	// text and ostr used to perform format conversion
	char text[80];
	ostrstream ostr(text,80);

	if (t != NULL)
	{
		// create the new shadow tree node
		newNode = new stnodeShadow;

		// allocate node for left child at next level in tree; attach node
		stnodeShadow *newLeft = buildShadowTree(t->left, level+1, column);
		newNode->left = newLeft;

		// initialize data members of the new node
		ostr << t->nodeValue << ends;	// format conversion
		newNode->nodeValueStr = text;
		newNode->level = level;
		newNode->column = column;

		// update column to next cell in the table
		column++;

		// allocate node for right child at next level in tree; attach node
		stnodeShadow *newRight = buildShadowTree(t->right, level+1, column);
		newNode->right = newRight;
	}

	return newNode;
}

template <typename T>
void stree<T>::displayTree(int maxCharacters)
{
	string label;
	int level = 0, column = 0;
	int colWidth = maxCharacters + 1;
	//
	int currLevel = 0, currCol = 0;

	if (treeSize == 0)
		return;

	// build the shadow tree
	stnodeShadow *shadowRoot = buildShadowTree(root, level, column);

	// use during the level order scan of the shadow tree
	stnodeShadow *currNode;

   // store siblings of each stnodeShadow object in a queue so that
	// they are visited in order at the next level of the tree
   queue<stnodeShadow *> q;

   // insert the root in the queue and set current level to 0
   q.push(shadowRoot);

   // continue the iterative process until the queue is empty
   while(!q.empty())
   {
      // delete front node from queue and make it the current node
      currNode = q.front();
		q.pop();

		// if level changes, output a newline
		if (currNode->level > currLevel)
		{
			currLevel = currNode->level;
			currCol = 0;
			cout << endl;
		}

		// if a left child exists, insert the child in the queue
      if(currNode->left != NULL)
			q.push(currNode->left);

		// if a right child exists, insert the child in the queue
      if(currNode->right != NULL)
			q.push(currNode->right);

		// output formatted node label
		if (currNode->column > currCol)
		{
			cout << setw((currNode->column-currCol)*colWidth) << " ";
			currCol = currNode->column;
		}
		cout << setw(colWidth) << currNode->nodeValueStr;
		currCol++;
   }
	cout << endl;

	// delete the shadow tree
	deleteShadowTree(shadowRoot);
}

template <typename T>
void stree<T>::deleteShadowTree(stnodeShadow *t)
{
	// if current root node is not NULL, delete its left subtree,
	// its right subtree and then the node itself
	if (t != NULL)
	{
		deleteShadowTree(t->left);
		deleteShadowTree(t->right);
		delete t;
	}
}

template <typename T>
void stree<T>::drawTree(int maxCharacters)
{
	drawTreeFrame(maxCharacters, true);
}

template <typename T>
void stree<T>::drawTrees(int maxCharacters)
{
	drawTreeFrame(maxCharacters, false);
}

/*
template <typename T>
void stree<T>::drawTreeFrame(int maxCharacters, bool simpleDraw)
{
	// approximate width of a character drawn by textShape
	const double UNITS_PER_CHAR = .15;

	// estimated width of a formatted node value.
	// add .2 to allow space outside the label
	double cellSide = maxCharacters*UNITS_PER_CHAR + 0.2;

	string label;

	int level = 0, column = 0;

	// build the shadow tree
	stnodeShadow *shadowRoot = buildShadowTree(root, level, column);

	// use during the level order scan of the shadow tree
	stnodeShadow *currNode;

	// node draws the circle shape that represents a node.
	// the radius is (cellSide + .20)/2.0
	circleShape node(0,0,cellSide/2.0, lightblue);

	// text draws the formatted value in a node
	textShape text(0,0,"",darkgray);

	// edge draws edges in the tree
	lineShape edge(0,0,0,0,black);

	// x, y coordinates of a circle center on the screen
	double x, childx, y, childy;

	// open the drawing window if not yet opened
	if (stree::graphWinOpen == false)
	{
		openWindow();
		stree::graphWinOpen = true;
	}

   // store siblings of each stnodeShadow object in a queue so that
	// they are visited in order at the next level of the tree
   queue<stnodeShadow *> q;

   // insert the root in the queue
   q.push(shadowRoot);

   // continue the iterative process until the queue is empty
   while(!q.empty())
   {
		// delete front node from queue and make it the current node
		currNode = q.front();
		q.pop();

		// assign formatted node label to string label
		label = currNode->nodeValueStr;

		// convert each (level, column) coordinate into screen
		// coordinates for the center of the node. add .1 so
		// we stay away from the edges of the screen
		x = currNode->column * cellSide + cellSide/2.0 + 0.1;
		y = currNode->level * cellSide + cellSide/2.0 + 0.1;

		// if a left child exists, draw an edge from the current
		// node center to the child node center. insert the child
		// in the queue
		if(currNode->left != NULL)
		{
			edge.move(x, y);
			// compute the center of the left child node
			childx = currNode->left->column * cellSide + cellSide/2.0 + 0.1;
			childy = currNode->left->level * cellSide + cellSide/2.0 + 0.1;
			edge.setEndPoint(childx, childy);
			edge.draw();
			q.push(currNode->left);
		}

		// if a right child exists, draw an edge from the current
		// node center to the child node center. insert the child
		// in the queue
      if(currNode->right != NULL)
		{
			edge.move(x, y);
			// compute the center of the right child node
			childx = currNode->right->column * cellSide + cellSide/2.0 + 0.1;
			childy = currNode->right->level * cellSide + cellSide/2.0 + 0.1;
			edge.setEndPoint(childx, childy);
			edge.draw();
			q.push(currNode->right);
		}

		// draw the current node
		node.move(x,y);
		node.draw();
		// draw the node data. use an appropriate offset from the node
		// center so the text is approximately aligned in the node
		text.move(x - label.length() * UNITS_PER_CHAR /2.0,
					 y - UNITS_PER_CHAR);
		text.setText(label);
		text.draw();
   }

	// pause to view the tree
	viewWindow();

	// erase or close the window
	if (simpleDraw)
	{
		closeWindow();
		stree::graphWinOpen = false;
	}
	else
		eraseWindow();
}

*/

#endif  // BINARY_SEARCH_TREE_CLASS
================================================================================
#include <iostream>
#include <time.h>

using namespace std;

// generate random numbers
class randomNumber
{
	public:
		// initialize the random number generator
		randomNumber(long s = 0);

		// return a 32-bit random integer m, 1 <= m <= 2^31-2
		long random();

		// return a 32-bit random integer m, 0 <= m <= n-1,
		// where n <= 2^31-1
		long random(long n);

		// return a real number x, 0 <= x < 1
		double frandom();

	private:
		static const long A;
		static const long M;
		static const long Q;
		static const long R;

		long seed;
};

const long randomNumber::A = 48271;
const long randomNumber::M = 2147483647;
const long randomNumber::Q = M / A;
const long randomNumber::R = M % A;

randomNumber::randomNumber(long s)
{
	if (s < 0)
		s = 0;

	if (s == 0)
	{
		// get time of day in seconds since 12:00 AM,
		// January 1, 1970
		long t_time = time(NULL);

		// mix-up bits by squaring
		t_time *= t_time;
		// result can overflow. handle cases
		// > 0, < 0, = 0
		if (t_time > 0)
			s = t_time ^ 0x5EECE66DL;
		else if (t_time < 0)
			s = (t_time & 0x7fffffff) ^ 0x5EECE66DL;
		else
			s = 0x5EECE66DL;
	}

	seed = s;
}

long randomNumber::random()
{
	long tmpSeed = A * ( seed % Q ) - R * ( seed / Q );

	if( tmpSeed >= 0 )
		 seed = tmpSeed;
	else
		 seed = tmpSeed + M;

	return seed;
}

long randomNumber::random(long n)
{
	double fraction = double(random())/double(M);

	return int(fraction * n);
}

double randomNumber::frandom()
{
	return double(random())/double(M);
}
================================================================================
#ifdef __BORLANDC__
// suppress the warning message that functions containing for are not
// expanded inline
#pragma warn -8027
#endif	// __BORLANDC__

class iterator;
class const_iterator;
	// declare the iterator classes so the names are available

friend class iterator;
friend class const_iterator;
	// allow the iterator classes to access the private section
	// of stree

class iterator
{
	friend class stree<T>;
	friend class const_iterator;

	public:

		// constructor
		iterator ()
		{}

		// comparison operators. just compare node pointers
		bool operator== (const iterator& rhs) const
		{
			return nodePtr == rhs.nodePtr;
		}

		bool operator!= (const iterator& rhs) const
		{
			return nodePtr != rhs.nodePtr;
		}

		// dereference operator. return a reference to
		// the value pointed to by nodePtr
		T& operator* () const
		{
			if (nodePtr == NULL)
 				throw
					referenceError("stree iterator operator* (): NULL reference");

			return nodePtr->nodeValue;
		}

		// preincrement. move forward to next larger value
		iterator& operator++ ()
		{
			stnode<T> *p;

			if (nodePtr == NULL)
			{
				// ++ from end(). get the root of the tree
				nodePtr = tree->root;

				// error! ++ requested for an empty tree
				if (nodePtr == NULL)
					throw
						underflowError("stree iterator operator++ (): tree empty");

				// move to the smallest value in the tree,
				// which is the first node inorder
				while (nodePtr->left != NULL)
					nodePtr = nodePtr->left;
			}
			else
			if (nodePtr->right != NULL)
			{
				// successor is the furthest left node of
				// right subtree
				nodePtr = nodePtr->right;

				while (nodePtr->left != NULL)
					nodePtr = nodePtr->left;
			}
			else
			{
				// have already processed the left subtree, and
				// there is no right subtree. move up the tree,
				// looking for a parent for which nodePtr is a left child,
				// stopping if the parent becomes NULL. a non-NULL parent
				// is the successor. if parent is NULL, the original node
				// was the last node inorder, and its successor
				// is the end of the list
				p = nodePtr->parent;

				while (p != NULL && nodePtr == p->right)
				{
					nodePtr = p;
					p = p->parent;
				}

				// if we were previously at the right-most node in
				// the tree, nodePtr = NULL, and the iterator specifies
				// the end of the list
				nodePtr = p;
			}

			return *this;
		}

		// postincrement
		iterator operator++ (int)
		{
			// save current iterator
			iterator tmp = *this;

			// move myself forward to the next tree node
			++*this;

			// return the previous value
			return tmp;
		}

		// predecrement. move backward to largest value < current value
		iterator& operator-- ()
		{
			stnode<T> *p;

			if (nodePtr == NULL)
			{
				// -- from end(). get the root of the tree
				nodePtr = tree->root;

				// error! -- requested for an empty tree
				if (nodePtr == NULL)
					throw
						underflowError("stree iterator operator--: tree empty");

				// move to the largest value in the tree,
				// which is the last node inorder
				while (nodePtr->right != NULL)
					nodePtr = nodePtr->right;
			} else if (nodePtr->left != NULL)
			{
				// must have gotten here by processing all the nodes
				// on the left branch. predecessor is the farthest
				// right node of the left subtree
				nodePtr = nodePtr->left;

				while (nodePtr->right != NULL)
					nodePtr = nodePtr->right;
			}
			else
			{
				// must have gotten here by going right and then
				// far left. move up the tree, looking for a parent
				// for which nodePtr is a right child, stopping if the
				// parent becomes NULL. a non-NULL parent is the
				// predecessor. if parent is NULL, the original node
				// was the first node inorder, and its predecessor
				// is the end of the list
				p = nodePtr->parent;
				while (p != NULL && nodePtr == p->left)
				{
					nodePtr = p;
					p = p->parent;
				}

				// if we were previously at the left-most node in
				// the tree, nodePtr = NULL, and the iterator specifies
				// the end of the list
				nodePtr = p;
			}

			return *this;
		}

		// postdecrement
		iterator operator-- (int)
		{
			// save current iterator
			iterator tmp = *this;

			// move myself backward to the previous tree node
			--*this;

			// return the previous value
			return tmp;
		}

	private:

		// nodePtr is the current location in the tree. we can move
		// freely about the tree using left, right, and parent.
		// tree is the address of the stree object associated
		// with this iterator. it is used only to access the
		// root pointer, which is needed for ++ and --
		// when the iterator value is end()
		stnode<T> *nodePtr;
		stree<T> *tree;

		// used to construct an iterator return value from
		// an stnode pointer
		iterator (stnode<T> *p, stree<T> *t) : nodePtr(p), tree(t)
		{}

};

class const_iterator
{
	friend class stree<T>;

	public:

		// constructor
		const_iterator ()
		{}

		// used to convert a const iterator to a const_iterator
		const_iterator (const iterator& pos): nodePtr(pos.nodePtr)
		{}

		// comparison operators. just compare node pointers
		bool operator== (const const_iterator& rhs) const
		{
			return nodePtr == rhs.nodePtr;
		}

		bool operator!= (const const_iterator& rhs) const
		{
			return nodePtr != rhs.nodePtr;
		}

		// dereference operator. return a reference to
		// the value pointed to by nodePtr
		const T& operator* () const
		{
			if (nodePtr == NULL)
 				throw
					referenceError("stree const_iterator operator* (): NULL reference");

			return nodePtr->nodeValue;
		}

		// preincrement. move forward to next larger value
		const_iterator& operator++ ()
		{
			stnode<T> *p;

			if (nodePtr == NULL)
			{
				// ++ from end(). get the root of the tree
				nodePtr = tree->root;

				// error! ++ requested for an empty tree
				if (nodePtr == NULL)
					throw underflowError("stree const_iterator operator++ (): tree empty");

				// move to the smallest value in the tree,
				// which is the first node inorder
				while (nodePtr->left != NULL)
					nodePtr = nodePtr->left;
			}
			else
			if (nodePtr->right != NULL)
			{
				// successor is the furthest left node of
				// right subtree
				nodePtr = nodePtr->right;

				while (nodePtr->left != NULL)
					nodePtr = nodePtr->left;
			}
			else
			{
				// have already processed the left subtree, and
				// there is no right subtree. move up the tree,
				// looking for a parent for which nodePtr is a left child,
				// stopping if the parent becomes NULL. a non-NULL parent
				// is the successor. if parent is NULL, the original node
				// was the last node inorder, and its successor
				// is the end of the list
				p = nodePtr->parent;

				while (p != NULL && nodePtr == p->right)
				{
					nodePtr = p;
					p = p->parent;
				}

				// if we were previously at the right-most node in
				// the tree, nodePtr = NULL, and the iterator specifies
				// the end of the list
				nodePtr = p;
			}

			return *this;
		}

		// postincrement
		const_iterator operator++ (int)
		{
			// save current const_iterator
			const_iterator tmp = *this;

			// move myself forward to the next tree node
			++*this;

			// return the previous value
			return tmp;
		}

		// predecrement. move backward to largest value < current value
		const_iterator& operator-- ()
		{
			stnode<T> *p;

			if (nodePtr == NULL)
			{
				// -- from end(). get the root of the tree
				nodePtr = tree->root;

				// error! -- requested for an empty tree
				if (nodePtr == NULL)
					throw
						underflowError("stree iterator operator--: tree empty");

				// move to the largest value in the tree,
				// which is the last node inorder
				while (nodePtr->right != NULL)
					nodePtr = nodePtr->right;
			} else if (nodePtr->left != NULL)
			{
				// must have gotten here by processing all the nodes
				// on the left branch. predecessor is the farthest
				// right node of the left subtree
				nodePtr = nodePtr->left;

				while (nodePtr->right != NULL)
					nodePtr = nodePtr->right;
			}
			else
			{
				// must have gotten here by going right and then
				// far left. move up the tree, looking for a parent
				// for which nodePtr is a right child, stopping if the
				// parent becomes NULL. a non-NULL parent is the
				// predecessor. if parent is NULL, the original node
				// was the first node inorder, and its predecessor
				// is the end of the list
				p = nodePtr->parent;
				while (p != NULL && nodePtr == p->left)
				{
					nodePtr = p;
					p = p->parent;
				}

				// if we were previously at the left-most node in
				// the tree, nodePtr = NULL, and the iterator specifies
				// the end of the list
				nodePtr = p;
			}

			return *this;
		}

		// postdecrement
		const_iterator operator-- (int)
		{
			// save current const_iterator
			const_iterator tmp = *this;

			// move myself backward to the previous tree node
			--*this;

			// return the previous value
			return tmp;
		}

	private:

		// nodePtr is the current location in the tree. we can move
		// freely about the tree using left, right, and parent.
		// tree is the address of the stree object associated
		// with this iterator. it is used only to access the
		// root pointer, which is needed for ++ and --
		// when the iterator value is end()
		const stnode<T> *nodePtr;
		const stree<T> *tree;

		// used to construct a const_iterator return value from
		// an stnode pointer
		const_iterator (const stnode<T> *p, const stree<T> *t) : nodePtr(p), tree(t)
		{}

};
================================================================================
Run:

Values in the tree:
0 (1441)
1 (1399)
2 (1487)
3 (1471)
4 (1432)
5 (1345)
6 (1425)

The tree is

                            3 (1471)
 0 (1441)                                     5 (1345)
          1 (1399)                   4 (1432)          6 (1425)
                   2 (1487)
================================================================================
Lab-06:
#ifndef MINISET_CLASS
#define MINISET_CLASS

#include <utility>

#include "d_stree.h"	// stree class

using namespace std;

// implements a set which does not contain duplicate data values
template <typename T>
class miniSet
{
	public:

		typedef typename stree<T>::iterator iterator;
		typedef typename stree<T>::const_iterator const_iterator;
			// miniSet iterators are simply stree iterators

		miniSet();
			// default constructor

		miniSet(T *first, T *last);
			// build a set whose data are determined by pointer range
			// [first, last)

		bool empty() const;
			// is the set empty?

		int size() const;
			// return the number of elements in the set

		iterator find (const T& item);
			// search for item in the set and return an iterator
			// pointing at it, or end() if it is not found

		const_iterator find (const T& item) const;
			// constant version

		pair<iterator,bool> insert(const T& item);
			// if item is not in the set, insert it and return a pair
			// whose first element is an iterator pointing to the
			// new element and whose second element is true.
			// otherwise, return a pair whose first element is an
			// iterator pointing at the existing element and whose
			// second element is false
			// Postcondition: the set size increases by 1 if item is
			// not in the set

		int erase(const T& item);
			// if item is in the set, erase it and return 1;
			// otherwise, return 0
			// Postcondition: the set size decreases by 1 if item is
			// in the set

		void erase(iterator pos);
			// erase the item pointed to by pos.
			// Preconditions: the set is not empty and pos points
			// to an item in the set. if the set is empty, the
			// function throws the underflowError exception. if the
			// iterator is invalid, the function throws the referenceError
			// exception.
			// Postcondition: the set size decreases by 1

		void erase(iterator first, iterator last);
			// erase the elements in the range [first, last)
			// Precondition: the set is not empty. if the set is empty,
			// the function throws the underflowError exception.
			// Postcondition: the set size decreases by the number
			// elements in the range

		iterator begin();
			// return an iterator pointing at the first member
			// in the set

		const_iterator begin() const;
			// constant version of begin()

		iterator end();
			// return an iterator pointing just past the last
			// member in the set

		const_iterator end() const;
			// constant version of end()

	private:
		// set implemented using a binary search tree
		stree<T> t;
};

// CONSTRUCTORS

template <typename T>
miniSet<T>::miniSet()
{}

template <typename T>
miniSet<T>::miniSet(T *first, T *last): t(first, last)
{}

template <typename T>
bool miniSet<T>::empty() const
{
	return t.empty();
}

template <typename T>
int miniSet<T>::size() const
{
	return t.size();
}

template <typename T>
miniSet<T>::iterator miniSet<T>::find (const T& item)
{
	// return stree iterator which is a miniSet iterator
	return t.find(item);
}

template <typename T>
miniSet<T>::const_iterator miniSet<T>::find (const T& item) const
{
	// return stree iterator which is a miniSet iterator
	return t.find(item);
}

template <typename T>
pair<miniSet<T>::iterator,bool> miniSet<T>::insert(const T& item)
{
	// insert item into the binary search tree and return
	// the iterator-bool pair
	return t.insert(item);
}

template <typename T>
int miniSet<T>::erase(const T& item)
{
	// erase item from the tree
	return t.erase(item);
}

template <typename T>
void miniSet<T>::erase(iterator pos)
{
	if (t.size() == 0)
 		throw
			underflowError("miniSet erase(): set is empty");

	if (pos == end())
 		throw
			referenceError("miniSet erase(): invalid iterator");

	// erase the item in the tree pointed to by pos
	t.erase(pos);
}

template <typename T>
void miniSet<T>::erase(iterator first, iterator last)
{
	if (t.size() == 0)
 		throw
			underflowError("miniSet erase(): set is empty");

	// erase range [first, last) in the tree
	t.erase(first, last);
}

template <typename T>
miniSet<T>::iterator miniSet<T>::begin()
{
	// a miniSet iterator is an stree iterator
	return t.begin();
}

template <typename T>
miniSet<T>::const_iterator miniSet<T>::begin() const
{
	return t.begin();
}

template <typename T>
miniSet<T>::iterator miniSet<T>::end()
{
	return t.end();
}

template <typename T>
miniSet<T>::const_iterator miniSet<T>::end() const
{
	return t.end();
}

// determine if sets lhs and rhs have the same size and
// are equal element by element
template <typename T>
bool operator== (const miniSet<T>& lhs, const miniSet<T>& rhs);

// return a miniSet object containing all elements that
// are in lhs or rhs
template <typename T>
miniSet<T> operator+ (const miniSet<T>& lhs, const miniSet<T>& rhs);

// return a miniSet object containing all elements that
// are in goth lhs and rhs
template <typename T>
miniSet<T> operator* (const miniSet<T>& lhs, const miniSet<T>& rhs);

// return a miniSet object containing all elements that
// are in lhs but not in rhs
template <typename T>
miniSet<T> operator- (const miniSet<T>& lhs, const miniSet<T>& rhs);


// SET FUNCTION IMPLEMENTATIONS

template <typename T>
bool operator== (const miniSet<T>& lhs, const miniSet<T>& rhs)
{
	miniSet<T>::const_iterator myself = lhs.begin(), other = rhs.begin();

	// return false if the sets do not have the same size
	if (lhs.size() == rhs.size())
	{
		// compare until encounter end of the sets or
		// find two elements that are not equal
		while (myself != lhs.end() && *myself++ == *other++);

		// if we left the loop before reaching the end
		// of the sets, they are not equal
		if (myself != lhs.end())
			return false;
		else
			return true;
	}
	else
		return false;
}

template <typename T>
miniSet<T> operator+ (const miniSet<T>& lhs, const miniSet<T>& rhs)
{
	// constuct union
	miniSet<T> setUnion;
	// iterators that traverse the sets
	miniSet<T>::const_iterator lhsIter = lhs.begin(), rhsIter = rhs.begin();

	// move forward as long as we have not reached the end of
	// either set
	while (lhsIter != lhs.end() && rhsIter != rhs.end())
		if (*lhsIter < *rhsIter)
			// *lhsIter belongs to the union. insert and
			// move iterator forward
			setUnion.insert(*lhsIter++);
		else if (*rhsIter < *lhsIter)
			// *rhsIter belongs to the union. insert and
			// move iterator forward
			setUnion.insert(*rhsIter++);
		else
		{
			// the two values are equal. insert just one and
			// move both itertors forward
			setUnion.insert(*lhsIter++);
			rhsIter++;
		}

		// flush any remaining items
		if (lhsIter != lhs.end())
			while (lhsIter != lhs.end())
				setUnion.insert(*lhsIter++);
		else if (rhsIter != rhs.end())
			while (rhsIter != rhs.end())
				setUnion.insert(*rhsIter++);

	return setUnion;
}

template <typename T>
miniSet<T> operator* (const miniSet<T>& lhs, const miniSet<T>& rhs)
{
	// constuct intersection
	miniSet<T> setIntersection;
	// iterators that traverse the sets
	miniSet<T>::const_iterator lhsIter = lhs.begin(), rhsIter = rhs.begin();

	// move forward as long as we have not reached the end of
	// either set
	while (lhsIter != lhs.end() && rhsIter != rhs.end())
		if (*lhsIter < *rhsIter)
			// *lhsIter is in lhs and not in rhs. move iterator
			// forward
			lhsIter++;
		else if (*rhsIter < *lhsIter)
			// *rhsIter is in rhs and not in lhs. move iterator
			// forward
			rhsIter++;
		else
		{
			// the same value is in both sets. insert one value
			// and move the iterators forward
			setIntersection.insert(*lhsIter);
			lhsIter++;
			rhsIter++;
		}

		return setIntersection;
}

template <typename T>
miniSet<T> operator- (const miniSet<T>& lhs, const miniSet<T>& rhs)
{
	// construct difference
	miniSet<T> setDifference;
	// iterators that traverse the sets
	miniSet<T>::const_iterator lhsIter = lhs.begin(), rhsIter = rhs.begin();

	// move forward as long as we have not reached the end of
	// either set
	while (lhsIter != lhs.end() && rhsIter != rhs.end())
		if (*lhsIter < *rhsIter)
			// *lhsIter belongs to lhs but not to rhs. put it in
			// the difference
			setDifference.insert(*lhsIter++);
		else if (*rhsIter < *lhsIter)
			// *rhsIter is in the rhs but not in the lhs. pass
			// over it
			rhsIter++;
		else
		{
			// the same value is in both sets. move the
			// iterators forward
			lhsIter++;
			rhsIter++;
		}

		// flush any remaining items from lhs
		if (lhsIter != lhs.end())
			while (lhsIter != lhs.end())
				setDifference.insert(*lhsIter++);

	return setDifference;
}

#endif	// MINISET_CLASS
================================================================================
#ifndef MINIMAP_CLASS
#define MINIMAP_CLASS

#include "d_pair.h"		// miniPair class
#include "d_stree.h"		// stree class

// implements a map containing key/value pairs.
// a map does not contain multiple copies of the same item.
// types T and Key must have a default constructor
template <typename Key, typename T>
class miniMap
{
	public:

		typedef stree<miniPair<const Key,T> >::iterator iterator;
		typedef stree<miniPair<const Key,T> >::const_iterator const_iterator;
			// miniMap iterators are simply stree iterators. an iterator cannot
			// change the key in a tree node, since the key attribute
			// of a miniPair object in the tree is const

		typedef miniPair<const Key, T> value_type;
			// for programmer convenience

		miniMap();
			// default constructor. create an empty map

		miniMap(value_type *first, value_type *last);
			// build a map whose key/value pairs are determined by pointer
			// values [first, last)

		bool empty() const;
			// is the map empty?

		int size() const;
			// return the number of elements in the map

		iterator find (const Key& key);
			// search for item in the map with the given key
			// and return an iterator pointing at it, or end()
			// if it is not found

		const_iterator find (const Key& key) const;
			// constant version of find()

		T& operator[] (const Key& key);
			// if no value is associated with key, create a new
			// map entry with the default value T() and return a
			// reference to the default value; otherwise,
			// return a reference to the value already associated
			// with the key

		int count(const Key& key) const;
			// returns 1 if an element with the key is in the map
			// and 0 otherwise

		miniPair<iterator,bool> insert(const value_type& kvpair);
			// if the map does not contain a key/value pair whose
			// key matches that of kvpair, insert a coy of kvpair
			// and return a miniPair object whose first element is an
			// iterator positioned at the new key/value pair and whose second
			// element is true. if the map already contains a key/value
			// pair whose key matches that of kvpair, return a miniPair
			// object whose first element is an iterator positioned at the
			// existing key/value pair and whose second element is false

		int erase(const Key& key);
			// erase the key/value pair with the specified key
			// from the map and return the number
			// of items erased (1 or 0)

		void erase(iterator pos);
			// erase the map key/value pair pointed by to pos

		void erase(iterator first, iterator last);
			// erase the key/value pairs in the range [first, last)

		iterator begin();
			// return an iterator pointing at the first member
			// in the map
		const_iterator begin() const;
			// constant version of begin()

		iterator end();
			// return an iterator pointing just past the last
			// member in the map
		const_iterator end() const;
			// constant version of end()

	private:
		// miniMap implemented using an stree of key-value pairs
		stree<miniPair<const Key,T> > t;
};

template <typename Key, typename T>
miniMap<Key,T>::miniMap()
{}

template <typename Key, typename T>
miniMap<Key,T>::miniMap(value_type *first, value_type *last):
		t(first, last)
{}

template <typename Key, typename T>
bool miniMap<Key,T>::empty() const
{
	return t.empty();
}

template <typename Key, typename T>
int miniMap<Key,T>::size() const
{
	return t.size();
}

template <typename Key, typename T>
miniMap<Key,T>::iterator miniMap<Key,T>::find (const Key& key)
{
	// pass a miniPair to stree find() that contains key as its
	// first member and T() as its second
	return t.find(value_type(key, T()));
}

template <typename Key, typename T>
miniMap<Key,T>::const_iterator miniMap<Key,T>::find (const Key& key) const
{
	// pass a miniPair to stree find() that contains key as its
	// first member and T() as its second
	return t.find(value_type(key, T()));
}

template <typename Key, typename T>
T& miniMap<Key,T>::operator[] (const Key& key)
{
	// build a miniPair object consisting of key
	// and the default value T()
	value_type tmp(key, T());
	// will point to a pair in the map
	iterator iter;

	// try to insert tmp into the map. the iterator
	// component of the pair returned by t.insert()
	// points at either the newly created key/value
	// pair or a pair already in the map. return a
	// reference to the value in the pair
	iter = t.insert(tmp).first;

	return (*iter).second;
}

template <typename Key, typename T>
int miniMap<Key,T>::count(const Key& key) const
{
	// pass a miniPair to stree count() that contains key as its
	// first member and T() as its second
	return t.count(value_type(key, T()));
}

template <typename Key, typename T>
miniPair<miniMap<Key,T>::iterator,bool>
miniMap<Key,T>::insert(const miniMap<Key,T>::value_type& kvpair)
{
	// t.insert() returns a pair<iterator,bool> object, not a
	// miniPair<iterator,bool> object
	pair<iterator, bool> p = t.insert(kvpair);

	// build and return a miniPair<iterator,bool> object
	return miniPair<iterator, bool>(p.first, p.second);
}

template <typename Key, typename T>
int miniMap<Key,T>::erase(const Key& key)
{
	// pass a miniPair to stree erase() that contains key as its
	// first member and T() as its second
	return t.erase(value_type(key, T()));
}

template <typename Key, typename T>
void miniMap<Key,T>::erase(iterator pos)
{
	t.erase(pos);
}

template <typename Key, typename T>
void miniMap<Key,T>::erase(iterator first, iterator last)
{
	t.erase(first,last);
}

template <typename Key, typename T>
miniMap<Key,T>::iterator miniMap<Key,T>::begin()
{
	return t.begin();
}

template <typename Key, typename T>
miniMap<Key,T>::iterator miniMap<Key,T>::end()
{
	return t.end();
}

template <typename Key, typename T>
miniMap<Key,T>::const_iterator miniMap<Key,T>::begin() const
{
	return t.begin();
}

template <typename Key, typename T>
miniMap<Key,T>::const_iterator miniMap<Key,T>::end() const
{
	return t.end();
}

#endif	// MINIMAP_CLASS
================================================================================
#ifndef STATECITY_CLASS
#define STATECITY_CLASS

#include <iostream>
#include <string>

using namespace std;

// object stores the state name and city in the state
class stateCity
{
	public:
		stateCity (const string& name = "", const string& city = "");

		// output the state and city name in the format
		//    cityName, stateName
		friend ostream& operator<< (ostream& ostr, const stateCity& state;

		// operators < and == must be defined to use with set object.
		// operators use only the stateName as the key
		friend bool operator< (const stateCity& a, const stateCity& b);

		friend bool operator== (const stateCity& a, const stateCity& b);

	private:
		string stateName, cityName;
};

#endif	// STATECITY_CLASS
================================================================================
Run 1:

Enter a state: Arizona
Phoenix, Arizona

Run 2:

Enter a state: New York
New York is not in the set
================================================================================
Lab-07:
#ifndef HASH_CLASS
#define HASH_CLASS

#include <iostream>
#include <vector>
#include <list>
#include <utility>

#include "d_except.h"

using namespace std;

template <typename T, typename HashFunc>
class hash
{
	public:

#include "d_hiter.h"
			// hash table iterator nested classes

      hash(int nbuckets, const HashFunc& hfunc = HashFunc());
			// constructor specifying the number of buckets in the hash table
			// and the hash function

      hash(T *first, T *last, int nbuckets, const HashFunc& hfunc = HashFunc());
			// constructor with arguments including a pointer range
			// [first, last) of values to insert, the number of
			// buckets in the hash table, and the hash function

      bool empty() const;
			// is the hash table empty?
      int size() const;
			// return number of elements in the hash table

		iterator find(const T& item);
		const_iterator find(const T& item) const;
			// return an iterator pointing at item if it is in the
			// table; otherwise, return end()

      pair<iterator,bool> insert(const T& item);
			// if item is not in the table, insert it and
			// return a pair whose iterator component points
			// at item and whose bool component is true. if item
			// is in the table, return a pair whose iterator
			// component points at the existing item and whose
			// bool component is false
			// Postcondition: the table size increases by 1 if item
			// is not in the table

		int erase(const T& item);
			// if item is in the table, erase it and return 1;
			// otherwise, return 0
			// Postcondition: the table size decreases by 1 if
			// item is in the table
		void erase(iterator pos);
			// erase the item pointed to by pos.
			// Precondition: the table is not empty and pos points
			// to an item in the table. if the table is empty, the
			// function throws the underflowError exception. if the
			// iterator is invalid, the function throws the
			// referenceError exception.
			// Postcondition: the tree size decreases by 1
		void erase(iterator first, iterator last);
			// erase all items in the range [first, last).
			// Precondition: the table is not empty. if the table
			// is empty, the function throws the underflowError
			// exception.
			// Postcondition: the size of the table decreases by
			// the number of elements in the range [first, last)

      iterator begin();
			// return an iterator positioned at the start of the
			// hash table
      const_iterator begin() const;
			// constant version
      iterator end();
			// return an iterator positioned past the last element of the
			// hash table
      const_iterator end() const;
			// constant version

	private:
		int numBuckets;
			// number of buckets in the table
		vector<list<T> > bucket;
			// the hash table is a vector of lists
		HashFunc hf;
			// hash function
		int hashtableSize;
			// number of elements in the hash table
};

// constructor. create an empty hash table
template <typename T, typename HashFunc>
hash<T, HashFunc>::hash(int nbuckets, const HashFunc& hfunc):
			numBuckets(nbuckets), bucket(nbuckets), hf(hfunc),
			hashtableSize(0)
{}

// constructor. initialize table from pointer range [first, last)
			template <typename T, typename HashFunc>
hash<T, HashFunc>::hash(T *first, T *last, int nbuckets, const HashFunc& hfunc):
			numBuckets(nbuckets), bucket(nbuckets), hf(hfunc),
			hashtableSize(0)
{
	T *p = first;

	while (p != last)
	{
		insert(*p);
		p++;
	}
}

template <typename T, typename HashFunc>
bool hash<T, HashFunc>::empty() const
{
	return hashtableSize == 0;
}

template <typename T, typename HashFunc>
int hash<T, HashFunc>::size() const
{
	return hashtableSize;
}

template <typename T, typename HashFunc>
typename hash<T, HashFunc>::iterator hash<T, HashFunc>::find(const T& item)
{
   // hashIndex is the bucket number (index of the linked list)
   int hashIndex = int(hf(item) % numBuckets);
   // use alias for bucket[hashIndex] to avoid indexing
   list<T>& myBucket = bucket[hashIndex];
   // use to traverse the list bucket[hashIndex]
   typename list<T>::iterator bucketIter;
   // returned if we find item

	// traverse list and look for a match with item
	bucketIter = myBucket.begin();
   while(bucketIter != myBucket.end())
	{
      // if locate item, return an iterator positioned in
      // bucket hashIndex at location bucketIter
      if (*bucketIter == item)
         return iterator(this, hashIndex, bucketIter);

		bucketIter++;
	}

   // return iterator positioned at the end of the hash table
   return end();
}

template <typename T, typename HashFunc>
typename hash<T, HashFunc>::const_iterator
hash<T, HashFunc>::find(const T& item) const
{
   // hashIndex is the bucket number (index of the linked list)
   int hashIndex = int(hf(item) % numBuckets);
   // use alias for bucket[hashIndex] to avoid indexing
   const list<T>& myBucket = bucket[hashIndex];
   // use to traverse the list bucket[hashIndex]
   typename list<T>::const_iterator bucketIter;
   // returned if we find item

	// traverse list and look for a match with item
	bucketIter = myBucket.begin();
   while(bucketIter != myBucket.end())
	{
      // if locate item, return an iterator positioned in
      // bucket hashIndex at location bucketIter
      if (*bucketIter == item)
         return const_iterator(this, hashIndex, bucketIter);

		bucketIter++;
	}

   // return iterator positioned at the end of the hash table
   return end();
}

template <typename T, typename HashFunc>
pair<typename hash<T, HashFunc>::iterator,bool>
hash<T, HashFunc>::insert(const T& item)
{
   // hashIndex is the bucket number
   int hashIndex = int(hf(item) % numBuckets);
	// for convenience, make myBucket an alias for bucket[hashIndex]
   list<T>& myBucket = bucket[hashIndex];
   // use iterator to traverse the list myBucket
   typename list<T>::iterator bucketIter;
	// specifies whether or not we do an insert
	bool success;

	// traverse list until we arrive at the end of
	// the bucket or find a match with item
	bucketIter = myBucket.begin();
	while (bucketIter != myBucket.end())
		if (*bucketIter == item)
			break;
		else
			bucketIter++;

	if (bucketIter == myBucket.end())
	{
		// at the end of the list, so item is not
		// in the hash table. call list class insert()
		// and assign its return value to bucketIter
		bucketIter = myBucket.insert(bucketIter, item);
		success = true;
		// increment the hash table size
		hashtableSize++;
	}
	else
		// item is in the hash table. duplicates not allowed.
		// no insertion
		success = false;

   // return a pair with iterator pointing at the new or
	// pre-existing item and success reflecting whether
	// an insert took place
   return pair<iterator,bool>
				(iterator(this, hashIndex, bucketIter), success);
}

template <typename T, typename HashFunc>
void hash<T, HashFunc>::erase(iterator pos)
{
	if (hashtableSize == 0)
		throw underflowError("hash erase(pos): hash table empty");

	if (pos.currentBucket == -1)
		throw referenceError("hash erase(pos): invalid iterator");


	// go to the bucket (list object) and erase the list item
	// at pos.currentLoc
   bucket[pos.currentBucket].erase(pos.currentLoc);
}

template <typename T, typename HashFunc>
void hash<T, HashFunc>::erase(typename hash<T, HashFunc>::iterator first,
									  typename hash<T, HashFunc>::iterator last)
{
	if (hashtableSize == 0)
		throw underflowError("hash erase(first,last): hash table empty");

	// call erase(pos) for each item in the range
	while (first != last)
		erase(first++);
}

template <typename T, typename HashFunc>
int hash<T, HashFunc>::erase(const T& item)
{
	iterator iter;
	int numberErased = 1;

	iter = find(item);
	if (iter != end())
		erase(iter);
	else
		numberErased = 0;

	return numberErased;
}

template <typename T, typename HashFunc>
typename hash<T, HashFunc>::iterator hash<T, HashFunc>::begin()
{
	typename hash<T, HashFunc>::iterator tmp;

	tmp.hashTable = this;
   tmp.currentBucket = -1;
	// start at index -1 + 1 = 0 and search for a non-empty
	// list
	tmp.findNext();

   return tmp;
}

template <typename T, typename HashFunc>
typename hash<T, HashFunc>::const_iterator hash<T, HashFunc>::begin() const
{
	typename hash<T, HashFunc>::const_iterator tmp;

	tmp.hashTable = this;
   tmp.currentBucket = -1;
	// start at index -1 + 1 = 0 and search for a non-empty
	// list
	tmp.findNext();

   return tmp;
}

template <typename T, typename HashFunc>
typename hash<T, HashFunc>::iterator hash<T, HashFunc>::end()
{
	typename hash<T, HashFunc>::iterator tmp;

	tmp.hashTable = this;
	// currentBucket of -1 means we are at end of the table
   tmp.currentBucket = -1;

   return tmp;
}

template <typename T, typename HashFunc>
typename hash<T, HashFunc>::const_iterator hash<T, HashFunc>::end() const
{
	typename hash<T, HashFunc>::const_iterator tmp;

	tmp.hashTable = this;
	// currentBucket of -1 means we are at end of the table
   tmp.currentBucket = -1;

   return tmp;
}

#endif   // HASH_CLASS
================================================================================
#ifdef __BORLANDC__
// suppress the warning message that functions containing for are not
// expanded inline
#pragma warn -8027
// suppress the warning message about comparing signed and unsigned values
#pragma warn -8012
#endif	// __BORLANDC__

#ifndef HASH_FUNCTIONS

#define HASH_FUNCTIONS

#include <string>
#include <cmath>

using namespace std;

class hFintID
{
	public:
		unsigned int operator()(int item) const
		{ return (unsigned)item; }
};

class hFint
{
	public:
		unsigned int operator()(int item) const
		{
			unsigned int value = (unsigned int)item;

			value *= value;			// square the value
			value /= 256;				// discard the low order 8 bits
			return value % 65536;	// return result in range 0 to 65535
		}
};

class hFreal
{
	public:
		unsigned int operator()(double item) const
		{
			int exp;
			double mant;
			unsigned int hashval;

			if (item == 0)
				hashval = 0;
			else
			{
				mant = frexp(item,&exp);
				hashval = (unsigned int)((2 * fabs(mant) -1) * (unsigned int)~0);
			}
			return hashval;
		}
};

class hFstring
{
	public:
		unsigned int operator()(const string& item) const
		{
			unsigned int prime = 2049982463;

			int n = 0, i;

			for (i = 0; i < item.length(); i++)
				n = n*8 + item[i];

			return n > 0 ? (n % prime) : (-n % prime);
		}
};

#endif  // HASH_FUNCTIONS
================================================================================
#ifdef __BORLANDC__
// suppress the warning message that functions containing for are not
// expanded inline
#pragma warn -8027
#endif	// __BORLANDC__

class iterator;
friend class iterator;

class const_iterator;
friend class const_iterator;
	// give the iterator classes access to private
	// section of hash

class iterator
{
	public:

		friend class hash<T,HashFunc>;
		friend class const_iterator;

		iterator()
		{}

		bool operator== (const iterator& rhs) const
		{
			if (currentBucket == rhs.currentBucket)
				if (currentBucket == -1)
					// when bucket locations are = -1, don't
					// care about currentLoc
					return true;
				else
					// compare locations in the bucket
					return currentLoc == rhs.currentLoc;
			else
				return false;
		}

		bool operator!= (const iterator& rhs) const
		{
			if (currentBucket != rhs.currentBucket)
				return true;
			else
				if (currentBucket == -1)
					// when bucket locations are = -1, don't
					// care about currentLoc. consider iterators
					// as equal
					return false;
				else
					// compare locations in the bucket
					return currentLoc != rhs.currentLoc;
		}

		T& operator* ()
		{
			if (currentBucket == -1)
				throw referenceError("hash iterator operator *: "
						  "invalid reference");

			// return the data in the list element
			return *currentLoc;
		}

		iterator& operator++ ()
		{
			// move to the next data value or the end of
			// the list
			currentLoc++;

			// if at end of list, call findNext() to
			// identify the next non-empty bucket in the table
			// and set currentLoc to its first element
			if (currentLoc == hashTable->bucket[currentBucket].end())
				findNext();

			return *this;
		}

		iterator operator++ (int)
		{
			// record the current state of the iterator
			iterator tmp = *this;

			// move to the next data value or the end of
			// the list
			currentLoc++;

			// if at end of list, call findNext() to
			// identify the next non-empty bucket in the table
			// and set currentLoc to its first element
			if (currentLoc == hashTable->bucket[currentBucket].end())
				findNext();

			// return the original iterator state
			return tmp;
		}

	private:

		// points to the hash table container
		hash<T,HashFunc> *hashTable;

		// index of current bucket being traversed
		int currentBucket;
		// points to the current element in the current bucket
		typename list<T>::iterator currentLoc;

		iterator(hash<T,HashFunc> *ht, int b,typename list<T>::iterator loc):
			hashTable(ht), currentBucket(b), currentLoc(loc)
		{}

		// find next non-empty bucket and set currentLoc
		// to point at its first element
		void findNext()
		{
			int i;

			// search from the next bucket to end of
			// table for a non-empty bucket
			for(i=currentBucket+1; i < hashTable->numBuckets;i++)
				if (!hashTable->bucket[i].empty())
				{
					// found a non-empty bucket. set
					// currentBucket index to i and
					// currentLoc to point at the first
					// element of the list
					currentBucket = i;
					currentLoc = hashTable->bucket[i].begin();
					return;
				}

			// we are at end()
			currentBucket = -1;
		}
};

// the constant iterator class
class const_iterator
{
	public:
		friend class hash<T,HashFunc>;

		const_iterator()
		{}

		// converts a const iterator to a const_iterator
		const_iterator (const iterator& x):
			hashTable(x.hashTable),
			currentBucket(x.currentBucket),
			currentLoc(x.currentLoc)
		{}

		bool operator== (const const_iterator& rhs) const
		{
			if (currentBucket == rhs.currentBucket)
				if (currentBucket == -1)
					// when bucket locations are = -1, don't
					// care about currentLoc
					return true;
				else
					// compare locations in the bucket
					return currentLoc == rhs.currentLoc;
			else
				return false;
		}

		bool operator!= (const const_iterator& rhs) const
		{
			if (currentBucket != rhs.currentBucket)
				return true;
			else
				if (currentBucket == -1)
					// when bucket locations are = -1, don't
					// care about currentLoc. consider Const_iterators
					// as equal
					return false;
				else
					// compare locations in the bucket
					return currentLoc != rhs.currentLoc;
		}

		const T& operator* () const
		{
			if (currentBucket == -1)
			{
				// const_iterator does not refer to valid data
				cerr << "hash const_iterator operator *: "
						  "invalid reference" << endl;
				exit(1);
			}

			// return the data in the list element
			return *currentLoc;
		}

		const_iterator& operator++ ()
		{
			// move to the next data value or the end of
			// the list
			currentLoc++;

			// if at end of list, call findNext() to
			// identify the next non-empty bucket in the table
			// and set currentLoc to its first element
			if (currentLoc == hashTable->bucket[currentBucket].end())
				findNext();

			return *this;
		}

		const_iterator operator++ (int)
		{
			// record the current state of the const_iterator
			const_iterator tmp = *this;

			// move to the next data value or the end of
			// the list
			currentLoc++;

			// if at end of list, call findNext() to
			// identify the next non-empty bucket in the table
			// and set currentLoc to its first element
			if (currentLoc == hashTable->bucket[currentBucket].end())
				findNext();

			// return the original const_iterator state
			return tmp;
		}

	private:

		// points to the constant hash table container
		const hash<T,HashFunc> *hashTable;

		// index of current bucket being traversed
		int currentBucket;
		// points to the current element in the current bucket
		typename list<T>::const_iterator currentLoc;

		// used to construct an iterator return value
		const_iterator(const hash<T,HashFunc> *ht, int b,
							typename list<T>::const_iterator loc):
			hashTable(ht), currentBucket(b), currentLoc(loc)
		{}

		// find next non-empty bucket and set currentLoc
		// to point at its first element
		void findNext()
		{
			int i;

			// search from the next bucket to end of
			// table for a non-empty bucket
			for(i=currentBucket+1; i < hashTable->numBuckets;i++)
				if (!hashTable->bucket[i].empty())
				{
					// found a non-empty bucket. set
					// currentBucket index to i and
					// currentLoc to point at the first
					// element of the list
					currentBucket = i;
					currentLoc = hashTable->bucket[i].begin();
					return;
				}

			// we are at end()
			currentBucket = -1;
		}
};
================================================================================
#ifndef HASH_CLASS
#define HASH_CLASS

#include <iostream>
#include <vector>
#include <list>
#include <utility>

#include "d_except.h"

using namespace std;

template <typename T, typename HashFunc>
class myhash
{
	public:

#include "d_hiter.h"
			// hash table iterator nested classes

      myhash(int nbuckets, const HashFunc& hfunc = HashFunc());
			// constructor specifying the number of buckets in the hash table
			// and the hash function

      myhash(T *first, T *last, int nbuckets, const HashFunc& hfunc = HashFunc());
			// constructor with arguments including a pointer range
			// [first, last) of values to insert, the number of
			// buckets in the hash table, and the hash function

      bool empty() const;
			// is the hash table empty?
      int size() const;
			// return number of elements in the hash table

		iterator find(const T& item);
		const_iterator find(const T& item) const;
			// return an iterator pointing at item if it is in the
			// table; otherwise, return end()

      pair<iterator,bool> insert(const T& item);
			// if item is not in the table, insert it and
			// return a pair whose iterator component points
			// at item and whose bool component is true. if item
			// is in the table, return a pair whose iterator
			// component points at the existing item and whose
			// bool component is false
			// Postcondition: the table size increases by 1 if item
			// is not in the table

		int erase(const T& item);
			// if item is in the table, erase it and return 1;
			// otherwise, return 0
			// Postcondition: the table size decreases by 1 if
			// item is in the table
		void erase(iterator pos);
			// erase the item pointed to by pos.
			// Precondition: the table is not empty and pos points
			// to an item in the table. if the table is empty, the
			// function throws the underflowError exception. if the
			// iterator is invalid, the function throws the
			// referenceError exception.
			// Postcondition: the tree size decreases by 1
		void erase(iterator first, iterator last);
			// erase all items in the range [first, last).
			// Precondition: the table is not empty. if the table
			// is empty, the function throws the underflowError
			// exception.
			// Postcondition: the size of the table decreases by
			// the number of elements in the range [first, last)

      iterator begin();
			// return an iterator positioned at the start of the
			// hash table
      const_iterator begin() const;
			// constant version
      iterator end();
			// return an iterator positioned past the last element of the
			// hash table
      const_iterator end() const;
			// constant version

	private:
		int numBuckets;
			// number of buckets in the table
		vector<list<T> > bucket;
			// the hash table is a vector of lists
		HashFunc hf;
			// hash function
		int hashtableSize;
			// number of elements in the hash table
};

// constructor. create an empty hash table
template <typename T, typename HashFunc>
myhash<T, HashFunc>::myhash(int nbuckets, const HashFunc& hfunc):
			numBuckets(nbuckets), bucket(nbuckets), hf(hfunc),
			hashtableSize(0)
{}

// constructor. initialize table from pointer range [first, last)
			template <typename T, typename HashFunc>
myhash<T, HashFunc>::myhash(T *first, T *last, int nbuckets, const HashFunc& hfunc):
			numBuckets(nbuckets), bucket(nbuckets), hf(hfunc),
			hashtableSize(0)
{
	T *p = first;

	while (p != last)
	{
		insert(*p);
		p++;
	}
}

template <typename T, typename HashFunc>
bool myhash<T, HashFunc>::empty() const
{
	return hashtableSize == 0;
}

template <typename T, typename HashFunc>
int myhash<T, HashFunc>::size() const
{
	return hashtableSize;
}

template <typename T, typename HashFunc>
typename myhash<T, HashFunc>::iterator myhash<T, HashFunc>::find(const T& item)
{
   // hashIndex is the bucket number (index of the linked list)
   int hashIndex = int(hf(item) % numBuckets);
   // use alias for bucket[hashIndex] to avoid indexing
   list<T>& myBucket = bucket[hashIndex];
   // use to traverse the list bucket[hashIndex]
   typename list<T>::iterator bucketIter;
   // returned if we find item

	// traverse list and look for a match with item
	bucketIter = myBucket.begin();
   while(bucketIter != myBucket.end())
	{
      // if locate item, return an iterator positioned in
      // bucket hashIndex at location bucketIter
      if (*bucketIter == item)
         return iterator(this, hashIndex, bucketIter);

		bucketIter++;
	}

   // return iterator positioned at the end of the hash table
   return end();
}

template <typename T, typename HashFunc>
typename myhash<T, HashFunc>::const_iterator
myhash<T, HashFunc>::find(const T& item) const
{
   // hashIndex is the bucket number (index of the linked list)
   int hashIndex = int(hf(item) % numBuckets);
   // use alias for bucket[hashIndex] to avoid indexing
   const list<T>& myBucket = bucket[hashIndex];
   // use to traverse the list bucket[hashIndex]
   typename list<T>::const_iterator bucketIter;
   // returned if we find item

	// traverse list and look for a match with item
	bucketIter = myBucket.begin();
   while(bucketIter != myBucket.end())
	{
      // if locate item, return an iterator positioned in
      // bucket hashIndex at location bucketIter
      if (*bucketIter == item)
         return const_iterator(this, hashIndex, bucketIter);

		bucketIter++;
	}

   // return iterator positioned at the end of the hash table
   return end();
}

template <typename T, typename HashFunc>
pair<typename myhash<T, HashFunc>::iterator,bool>
myhash<T, HashFunc>::insert(const T& item)
{
   // hashIndex is the bucket number
   int hashIndex = int(hf(item) % numBuckets);
	// for convenience, make myBucket an alias for bucket[hashIndex]
   list<T>& myBucket = bucket[hashIndex];
   // use iterator to traverse the list myBucket
   typename list<T>::iterator bucketIter;
	// specifies whether or not we do an insert
	bool success;

	// traverse list until we arrive at the end of
	// the bucket or find a match with item
	bucketIter = myBucket.begin();
	while (bucketIter != myBucket.end())
		if (*bucketIter == item)
			break;
		else
			bucketIter++;

	if (bucketIter == myBucket.end())
	{
		// at the end of the list, so item is not
		// in the hash table. call list class insert()
		// and assign its return value to bucketIter
		bucketIter = myBucket.insert(bucketIter, item);
		success = true;
		// increment the hash table size
		hashtableSize++;
	}
	else
		// item is in the hash table. duplicates not allowed.
		// no insertion
		success = false;

   // return a pair with iterator pointing at the new or
	// pre-existing item and success reflecting whether
	// an insert took place
   return pair<iterator,bool>
				(iterator(this, hashIndex, bucketIter), success);
}

template <typename T, typename HashFunc>
void myhash<T, HashFunc>::erase(iterator pos)
{
	if (hashtableSize == 0)
		throw underflowError("hash erase(pos): hash table empty");

	if (pos.currentBucket == -1)
		throw referenceError("hash erase(pos): invalid iterator");


	// go to the bucket (list object) and erase the list item
	// at pos.currentLoc
   bucket[pos.currentBucket].erase(pos.currentLoc);
}

template <typename T, typename HashFunc>
void myhash<T, HashFunc>::erase(typename myhash<T, HashFunc>::iterator first,
									  typename myhash<T, HashFunc>::iterator last)
{
	if (hashtableSize == 0)
		throw underflowError("hash erase(first,last): hash table empty");

	// call erase(pos) for each item in the range
	while (first != last)
		erase(first++);
}

template <typename T, typename HashFunc>
int myhash<T, HashFunc>::erase(const T& item)
{
	iterator iter;
	int numberErased = 1;

	iter = find(item);
	if (iter != end())
		erase(iter);
	else
		numberErased = 0;

	return numberErased;
}

template <typename T, typename HashFunc>
typename myhash<T, HashFunc>::iterator myhash<T, HashFunc>::begin()
{
	typename myhash<T, HashFunc>::iterator tmp;

	tmp.hashTable = this;
   tmp.currentBucket = -1;
	// start at index -1 + 1 = 0 and search for a non-empty
	// list
	tmp.findNext();

   return tmp;
}

template <typename T, typename HashFunc>
typename myhash<T, HashFunc>::const_iterator myhash<T, HashFunc>::begin() const
{
	typename myhash<T, HashFunc>::const_iterator tmp;

	tmp.hashTable = this;
   tmp.currentBucket = -1;
	// start at index -1 + 1 = 0 and search for a non-empty
	// list
	tmp.findNext();

   return tmp;
}

template <typename T, typename HashFunc>
typename myhash<T, HashFunc>::iterator myhash<T, HashFunc>::end()
{
	typename myhash<T, HashFunc>::iterator tmp;

	tmp.hashTable = this;
	// currentBucket of -1 means we are at end of the table
   tmp.currentBucket = -1;

   return tmp;
}

template <typename T, typename HashFunc>
typename myhash<T, HashFunc>::const_iterator myhash<T, HashFunc>::end() const
{
	typename myhash<T, HashFunc>::const_iterator tmp;

	tmp.hashTable = this;
	// currentBucket of -1 means we are at end of the table
   tmp.currentBucket = -1;

   return tmp;
}

#endif   // HASH_CLASS
================================================================================
a
a&m
a&p
aaa
aaas
aarhus
aaron
aau
aba
ababa
aback
abacus
abalone
abandon
abase
abash
abate
abater
abbas
abbe
abbey
abbot
abbott
abbreviate
abc
abdicate
abdomen
abdominal
abduct
abe
abed
abel
abelian
abelson
aberdeen
abernathy
aberrant
aberrate
abet
abetted
abetting
abeyance
abeyant
abhorred
abhorrent
abide
abidjan
abigail
abject
ablate
ablaze
able
ablution
abner
abnormal
abo
aboard
abode
abolish
abolition
abominable
abominate
aboriginal
aborigine
aborning
abort
abound
about
above
aboveboard
aboveground
abovementioned
abrade
abraham
abram
abramson
abrasion
abrasive
abreact
abreast
abridge
abridgment
abroad
abrogate
abrupt
abscess
abscissa
abscissae
absence
absent
absentee
absenteeism
absentia
absentminded
absinthe
absolute
absolution
absolve
absorb
absorbent
absorption
absorptive
abstain
abstention
abstinent
abstract
abstracter
abstractor
abstruse
absurd
abuilding
abundant
abusable
abuse
abusive
abut
abutted
abutting
abysmal
abyss
abyssinia
ac
academe
academia
academic
academician
academy
acadia
acanthus
acapulco
accede
accelerate
accelerometer
accent
accentual
accentuate
accept
acceptant
acceptor
access
accessible
accession
accessory
accident
accidental
accipiter
acclaim
acclamation
acclimate
accolade
accommodate
accompaniment
accompanist
accompany
accomplice
accomplish
accord
accordant
accordion
accost
account
accountant
accra
accredit
accreditate
accreditation
accretion
accrual
accrue
acculturate
accumulate
accuracy
accurate
accusation
accusative
accusatory
accuse
accustom
ace
acerbic
acerbity
acetate
acetic
acetone
acetylene
ache
achieve
achilles
aching
achromatic
acid
acidic
acidulous
ackerman
ackley
acknowledge
acknowledgeable
acm
acme
acolyte
acorn
acoustic
acquaint
acquaintance
acquiesce
acquiescent
acquire
acquisition
acquisitive
acquit
acquittal
acquitting
acre
acreage
acrid
acrimonious
acrimony
acrobacy
acrobat
acrobatic
acronym
acropolis
across
acrylate
acrylic
acs
act
actaeon
actinic
actinide
actinium
actinolite
actinometer
activate
activation
activism
acton
actor
actress
acts
actual
actuarial
actuate
acuity
acumen
acute
acyclic
ad
ada
adage
adagio
adair
adam
adamant
adams
adamson
adapt
adaptation
adaptive
add
added
addend
addenda
addendum
addict
addis
addison
addition
additional
additive
addle
address
addressee
addressograph
adduce
adelaide
adele
adelia
aden
adenine
adenoma
adenosine
adept
adequacy
adequate
adhere
adherent
adhesion
adhesive
adiabatic
adieu
adipic
adirondack
adjacent
adject
adjectival
adjective
adjoin
adjoint
adjourn
adjudge
adjudicate
adjunct
adjust
adjutant
adkins
adler
administer
administrable
administrate
administratrix
admiral
admiralty
admiration
admire
admissible
admission
admit
admittance
admitted
admitting
admix
admixture
admonish
admonition
ado
adobe
adolescent
adolph
adolphus
adonis
adopt
adoption
adoptive
adore
adorn
adposition
adrenal
adrenaline
adrian
adriatic
adrienne
adrift
adroit
adsorb
adsorbate
adsorption
adsorptive
adulate
adult
adulterate
adulterous
adultery
adulthood
advance
advantage
advantageous
advent
adventitious
adventure
adventurous
adverb
adverbial
adversary
adverse
advert
advertise
advice
advisable
advise
advisee
advisor
advisory
advocacy
advocate
aegean
aegis
aeneas
aeneid
aeolian
aeolus
aerate
aerial
aerobacter
aerobic
aerodynamic
aerogene
aeronautic
aerosol
aerospace
aeschylus
aesthete
aesthetic
afar
affable
affair
affect
affectate
affectation
affectionate
afferent
affiance
affidavit
affiliate
affine
affinity
affirm
affirmation
affirmative
affix
afflict
affluence
affluent
afford
afforest
afforestation
affricate
affront
afghan
afghanistan
aficionado
afield
afire
aflame
afloat
afoot
aforementioned
aforesaid
aforethought
afoul
afraid
afresh
africa
afro
aft
aftereffect
afterglow
afterimage
afterlife
aftermath
afternoon
afterthought
afterward
afterword
again
against
agamemnon
agate
agatha
agave
age
agee
agenda
agent
agglomerate
agglutinate
agglutinin
aggravate
aggregate
aggression
aggressive
aggressor
aggrieve
aghast
agile
aging
agitate
agleam
agnes
agnew
agnomen
agnostic
ago
agone
agony
agouti
agrarian
agree
agreeable
agreed
agreeing
agribusiness
agricola
agricultural
agriculture
agrimony
ague
agway
ah
ahead
ahem
ahmadabad
ahmedabad
ahoy
aid
aida
aide
aides
aiken
ail
ailanthus
aile
aileen
aileron
aim
ainu
air
airborne
aircraft
airdrop
airedale
aires
airfare
airfield
airflow
airfoil
airframe
airlift
airline
airlock
airmail
airman
airmass
airmen
airpark
airplane
airport
airspace
airspeed
airstrip
airtight
airway
airy
aisle
aitken
ajar
ajax
ak
akers
akin
akron
al
ala
alabama
alabamian
alabaster
alacrity
alai
alameda
alamo
alan
alan
alarm
alaska
alb
alba
albacore
albania
albanian
albany
albatross
albeit
alberich
albert
alberta
alberto
albrecht
albright
album
albumin
albuquerque
alcestis
alchemy
alcmena
alcoa
alcohol
alcoholic
alcoholism
alcott
alcove
aldebaran
aldehyde
alden
alder
alderman
aldermen
aldrich
aldrin
ale
alec
aleck
aleph
alert
alewife
alex
alexander
alexandra
alexandre
alexandria
alexei
alexis
alfalfa
alfonso
alfonso
alfred
alfredo
alfresco
alga
algae
algaecide
algal
algebra
algebraic
algenib
alger
algeria
algerian
algiers
alginate
algol
algonquin
algorithm
algorithmic
alhambra
ali
alia
alias
alibi
alice
alicia
alien
alienate
alight
align
alike
alimony
aliphatic
aliquot
alison
alistair
alive
alizarin
alkali
alkaline
alkaloid
alkane
alkene
all
allah
allan
allay
allegate
allegation
allege
allegheny
allegiant
allegoric
allegory
allegra
allegro
allele
allemand
allen
allentown
allergic
allergy
alleviate
alley
alleyway
alliance
allied
alligator
allis
allison
alliterate
allocable
allocate
allot
allotropic
allotted
allotting
allow
allowance
alloy
allspice
allstate
allude
allure
allusion
allusive
alluvial
alluvium
ally
allyl
allyn
alma
almaden
almagest
almanac
almighty
almond
almost
aloe
aloft
aloha
alone
along
alongside
aloof
aloud
alp
alpenstock
alpert
alpha
alphabet
alphabetic
alphameric
alphanumeric
alpheratz
alphonse
alpine
alps
already
alsatian
also
alsop
altair
altar
alter
alterate
alteration
altercate
alterman
altern
alternate
althea
although
altimeter
altitude
alto
altogether
alton
altruism
altruist
alum
alumina
aluminate
alumna
alumnae
alumni
alumnus
alundum
alva
alvarez
alveolar
alveoli
alveolus
alvin
alway
always
alyssum
am
ama
amadeus
amalgam
amalgamate
amanita
amanuensis
amaranth
amarillo
amass
amateur
amateurish
amatory
amaze
amazon
ambassador
amber
ambiance
ambidextrous
ambient
ambiguity
ambiguous
ambition
ambitious
ambivalent
amble
ambling
ambrose
ambrosia
ambrosial
ambulant
ambulate
ambulatory
ambuscade
ambush
amelia
ameliorate
amen
amend
amende
amerada
america
american
americana
americanism
americium
ames
ameslan
amethyst
amethystine
amherst
ami
amicable
amid
amide
amidst
amigo
amino
aminobenzoic
amiss
amity
amman
ammerman
ammeter
ammo
ammonia
ammoniac
ammonium
ammunition
amnesia
amoco
amoeba
amoebae
amok
among
amongst
amoral
amorous
amorphous
amort
amos
amount
amp
amperage
ampere
ampersand
ampex
amphetamine
amphibian
amphibious
amphibole
amphibology
amphioxis
ample
amplifier
amplify
amplitude
amply
amputate
amputee
amra
amsterdam
amtrak
amulet
amuse
amy
amy
amygdaloid
an
ana
anabaptist
anabel
anachronism
anachronistic
anaconda
anaerobic
anaglyph
anagram
anaheim
analeptic
analgesic
analogous
analogue
analogy
analyses
analysis
analyst
analytic
anamorphic
anaplasmosis
anarch
anarchic
anarchy
anastasia
anastigmat
anastigmatic
anastomosis
anastomotic
anathema
anatole
anatomic
anatomy
ancestor
ancestral
ancestry
anchor
anchorage
anchorite
anchoritism
anchovy
ancient
ancillary
and
andean
andersen
anderson
andes
andesine
andesite
andiron
andorra
andover
andre
andrea
andrei
andrew
andrews
andromache
andromeda
andy
anecdotal
anecdote
anemone
anent
anew
angel
angela
angeles
angelfish
angelic
angelica
angelina
angeline
angelo
anger
angie
angiosperm
angle
angles
anglican
anglicanism
angling
anglo
anglophobia
angola
angora
angry
angst
angstrom
anguish
angular
angus
anharmonic
anheuser
anhydride
anhydrite
anhydrous
ani
aniline
animadversion
animadvert
animal
animate
animism
animosity
anion
anionic
anise
aniseikonic
anisotropic
anisotropy
anita
ankara
ankle
ann
anna
annal
annale
annalen
annals
annapolis
anne
anneal
annette
annex
annie
annihilate
anniversary
annotate
announce
annoy
annoyance
annual
annuity
annul
annular
annuli
annulled
annulling
annulus
annum
annunciate
anode
anodic
anomalous
anomaly
anomie
anonymity
anonymous
anorexia
anorthic
anorthite
anorthosite
another
anselm
anselmo
ansi
answer
ant
antacid
antaeus
antagonism
antagonist
antagonistic
antarctic
antarctica
antares
ante
anteater
antebellum
antecedent
antedate
antelope
antenna
antennae
anterior
anteroom
anthem
anther
anthology
anthony
anthracite
anthracnose
anthropogenic
anthropology
anthropomorphic
anthropomorphism
anti
antic
anticipate
anticipatory
antietam
antigen
antigone
antigorite
antimony
antioch
antipasto
antipathy
antiperspirant
antiphonal
antipode
antipodean
antipodes
antiquarian
antiquary
antiquated
antique
antiquity
antisemite
antisemitic
antisemitism
antithetic
antler
antoine
antoinette
anton
antonio
antony
antonym
antwerp
anus
anvil
anxiety
anxious
any
anybody
anyhow
anyone
anyplace
anything
anyway
anywhere
aorta
apace
apache
apart
apartheid
apathetic
apathy
apatite
ape
aperiodic
aperture
apex
aphasia
aphasic
aphelion
aphid
aphorism
aphrodite
apices
apiece
aplomb
apocalypse
apocalyptic
apocrypha
apocryphal
apogee
apollo
apollonian
apologetic
apologia
apology
apostate
apostle
apostolic
apostrophe
apothecary
apothegm
apotheosis
appalachia
appall
appanage
apparatus
apparel
apparent
apparition
appeal
appear
appearance
appeasable
appease
appellant
appellate
append
appendage
appendices
appendix
apperception
appertain
appetite
appian
applaud
applause
apple
appleby
applejack
appleton
appliance
applicable
applicant
applicate
application
applied
applique
apply
appoint
appointe
appointee
apport
apportion
apposite
apposition
appraisal
appraise
appreciable
appreciate
apprehend
apprehension
apprehensive
apprentice
apprise
approach
approbation
appropriable
appropriate
approval
approve
approximable
approximant
approximate
apr
apricot
april
apron
apropos
aps
apse
apt
aptitude
aqua
aquarium
aquarius
aquatic
aqueduct
aqueous
aquila
aquinas
ar
arab
arabesque
arabia
arabic
araby
arachne
arachnid
arbiter
arbitrage
arbitrary
arbitrate
arboreal
arboretum
arbutus
arc
arcade
arcadia
arcana
arcane
arccos
arccosine
arch
archae
archaic
archaism
archangel
archbishop
archdiocese
archenemy
archer
archery
archetype
archetypical
archfool
archibald
archimedes
arching
archipelago
architect
architectonic
architectural
architecture
archival
archive
arcing
arclength
arcsin
arcsine
arctan
arctangent
arctic
arcturus
arden
ardency
ardent
arduous
are
area
areaway
areawide
arena
arenaceous
arequipa
ares
argentina
argillaceous
arginine
argive
argo
argon
argonaut
argonne
argot
argue
argument
argumentation
argumentative
argus
arhat
ariadne
arianism
arid
aries
arise
arisen
aristocracy
aristocrat
aristocratic
aristotelean
aristotelian
aristotle
arithmetic
arizona
ark
arkansan
arkansas
arlen
arlene
arlington
arm
armada
armadillo
armageddon
armament
armata
armature
armchair
armco
armenia
armenian
armful
armhole
armillaria
armistice
armload
armoire
armonk
armour
armpit
armstrong
army
arnold
aroma
aromatic
arose
around
arousal
arouse
arpa
arpeggio
arrack
arragon
arraign
arrange
arrangeable
array
arrear
arrest
arrhenius
arrival
arrive
arrogant
arrogate
arrow
arrowhead
arrowroot
arroyo
arsenal
arsenate
arsenic
arsenide
arsine
arson
art
artemis
artemisia
arterial
arteriole
arteriolosclerosis
arteriosclerosis
artery
artful
arthritis
arthur
artichoke
article
articulate
articulatory
artie
artifact
artifice
artificial
artillery
artisan
artistry
arturo
artwork
arty
aruba
arum
aryl
as
asbestos
ascend
ascendant
ascension
ascent
ascertain
ascetic
asceticism
ascomycetes
ascribe
ascription
aseptic
asexual
ash
ashame
ashamed
ashen
asher
asheville
ashland
ashley
ashman
ashmen
ashmolean
ashore
ashtray
ashy
asia
asiatic
aside
asilomar
asinine
ask
askance
askew
asleep
asocial
asparagine
asparagus
aspartic
aspect
aspen
asperity
aspersion
asphalt
aspheric
asphyxiate
aspidistra
aspirant
aspirate
aspire
aspirin
asplenium
ass
assai
assail
assailant
assam
assassin
assassinate
assault
assay
assemblage
assemble
assent
assert
assess
assessor
asset
assiduity
assiduous
assign
assignation
assignee
assimilable
assimilate
assist
assistant
associable
associate
assonant
assort
assuage
assume
assumption
assurance
assure
assyria
assyriology
astarte
astatine
aster
asteria
asterisk
asteroid
asteroidal
asthma
astigmat
astigmatic
astigmatism
astm
astonish
astor
astoria
astound
astraddle
astral
astray
astride
astringent
astrology
astronaut
astronautic
astronomer
astronomic
astronomy
astrophysical
astrophysicist
astrophysics
astute
asuncion
asunder
asylum
asymmetry
asymptote
asymptotic
asynchronous
asynchrony
at
at&t
atalanta
atavism
atavistic
atchison
ate
athabascan
atheism
atheist
athena
athenian
athens
athlete
athletic
athwart
atkins
atkinson
atlanta
atlantes
atlantic
atlantic
atlantica
atlantis
atlas
atmosphere
atmospheric
atom
atomic
atonal
atone
atop
atreus
atrium
atrocious
atrocity
atrophic
atrophy
atropos
attach
attache
attack
attain
attainder
attempt
attend
attendant
attendee
attention
attentive
attenuate
attest
attestation
attic
attica
attire
attitude
attitudinal
attorney
attract
attribute
attribution
attributive
attrition
attune
atwater
atwood
atypic
auberge
aubrey
auburn
auckland
auction
auctioneer
audacious
audacity
audible
audience
audio
audiotape
audiovisual
audit
audition
auditor
auditorium
auditory
audrey
audubon
auerbach
aug
augean
augend
auger
augite
augment
augmentation
augur
august
augusta
augustan
augustine
augustus
auk
aunt
auntie
aura
aural
aurelius
aureomycin
auric
auriga
aurochs
aurora
auschwitz
auspices
auspicious
austenite
austere
austin
australia
australis
australite
austria
authentic
authenticate
author
authoritarian
authoritative
autism
autistic
auto
autobiography
autoclave
autocollimate
autocorrelate
autocracy
autocrat
autocratic
autograph
automat
automata
automate
automatic
automaton
automobile
automorphic
automorphism
automotive
autonomic
autonomous
autonomy
autopsy
autosuggestible
autotransformer
autumn
autumnal
auxiliary
avail
avalanche
avarice
avaricious
ave
avenge
aventine
avenue
aver
average
averred
averring
averse
aversion
avert
avertive
avery
avesta
aviary
aviate
aviatrix
avid
avionic
avis
aviv
avocado
avocate
avocation
avocet
avogadro
avoid
avoidance
avon
avow
avowal
avuncular
await
awake
awaken
award
aware
awash
away
awe
awesome
awful
awhile
awkward
awl
awn
awoke
awry
ax
axe
axes
axial
axiology
axiom
axiomatic
axis
axisymmetric
axle
axolotl
axon
aye
ayers
aylesbury
az
azalea
azerbaijan
azimuth
azimuthal
aztec
aztecan
azure
b
babbitt
babble
babcock
babe
babel
baboon
baby
babyhood
babylon
babylonian
babysat
babysit
babysitter
babysitting
baccalaureate
baccarat
bacchus
bach
bachelor
bacilli
bacillus
back
backboard
backbone
backdrop
backfill
backgammon
background
backhand
backlash
backlog
backorder
backpack
backplane
backplate
backscatter
backside
backspace
backstage
backstitch
backstop
backtrack
backup
backward
backwater
backwood
backyard
bacon
bacteria
bacterial
bacterium
bad
bade
baden
badge
badinage
badland
badminton
baffin
baffle
bag
bagatelle
bagel
baggage
bagging
baggy
baghdad
bagley
bagpipe
bah
bahama
bahrein
bail
bailey
bailiff
bainite
baird
bait
bake
bakelite
bakersfield
bakery
bakhtiari
baklava
baku
balance
balboa
balcony
bald
baldpate
baldwin
baldy
bale
baleen
baleful
balfour
bali
balinese
balk
balkan
balky
ball
ballad
ballard
ballast
balled
ballerina
ballet
balletic
balletomane
ballfield
balloon
ballot
ballroom
ballyhoo
balm
balmy
balsa
balsam
baltic
baltimore
baltimorean
balustrade
balzac
bam
bamako
bamberger
bambi
bamboo
ban
banach
banal
banana
banbury
band
bandage
bandgap
bandit
bandpass
bandstand
bandstop
bandwagon
bandwidth
bandy
bane
baneberry
baneful
bang
bangkok
bangladesh
bangle
bangor
bangui
banish
banister
banjo
bank
bankrupt
bankruptcy
banks
banquet
banshee
bantam
banter
bantu
bantus
baptism
baptismal
baptist
baptiste
baptistery
bar
barb
barbados
barbara
barbarian
barbaric
barbarism
barbarous
barbecue
barbell
barber
barberry
barbital
barbiturate
barbour
barbudo
barcelona
barclay
bard
bare
barefaced
barefoot
barfly
bargain
barge
baritone
barium
bark
barkeep
barley
barlow
barn
barnabas
barnacle
barnard
barnes
barnet
barnett
barney
barnhard
barnstorm
barnyard
barometer
baron
baroness
baronet
baronial
barony
baroque
barr
barrack
barracuda
barrage
barre
barrel
barren
barrett
barrette
barricade
barrier
barrington
barrow
barry
barrymore
barstow
bart
bartend
bartender
barter
barth
bartholomew
bartlett
bartok
barton
barycentric
basal
basalt
base
baseball
baseband
baseboard
basel
baseline
baseman
basemen
baseplate
basepoint
bash
bashaw
bashful
basic
basidiomycetes
basil
basilar
basilisk
basin
basis
bask
basket
basketball
basophilic
bass
bassett
bassi
bassinet
basso
basswood
bastard
baste
bastion
bat
batavia
batch
batchelder
bate
bateau
bateman
bater
bates
bath
bathe
bathos
bathrobe
bathroom
bathtub
bathurst
batik
baton
bator
batt
battalion
battelle
batten
battery
battle
battlefield
battlefront
battleground
batwing
bauble
baud
baudelaire
bauer
bauhaus
bausch
bauxite
bavaria
bawd
bawdy
bawl
baxter
bay
bayberry
bayda
bayed
bayesian
baylor
bayonet
bayonne
bayou
bayport
bayreuth
bazaar
be
beach
beachcomb
beachhead
beacon
bead
beadle
beady
beak
beam
bean
bear
bearberry
beard
beardsley
bearish
beast
beastie
beat
beaten
beater
beatific
beatify
beatitude
beatnik
beatrice
beau
beaujolais
beaumont
beauregard
beauteous
beautiful
beautify
beauty
beaux
beaver
bebop
becalm
became
because
bechtel
beck
becker
becket
beckman
beckon
becky
becloud
become
bed
bedazzle
bedbug
bedevil
bedfast
bedford
bedim
bedimmed
bedimming
bedlam
bedpost
bedraggle
bedridden
bedrock
bedroom
bedside
bedspread
bedspring
bedstraw
bedtime
bee
beebe
beebread
beech
beecham
beechwood
beef
beefsteak
beefy
beehive
been
beep
beer
beet
beethoven
beetle
befall
befallen
befell
befit
befitting
befog
befogging
before
beforehand
befoul
befuddle
beg
began
beget
begetting
beggar
beggary
begging
begin
beginner
beginning
begonia
begotten
begrudge
beguile
begun
behalf
behave
behavioral
behead
beheld
behest
behind
behold
beige
beijing
being
beirut
bel
bela
belate
belch
belfast
belfry
belgian
belgium
belgrade
belie
belief
belies
believe
belittle
bell
bella
belladonna
bellamy
bellatrix
bellboy
belle
bellflower
bellhop
bellicose
belligerent
bellingham
bellini
bellman
bellmen
bellow
bellum
bellwether
belly
bellyache
bellyfull
belmont
beloit
belong
belove
below
belshazzar
belt
beltsville
belvedere
belvidere
belying
bema
bemadden
beman
bemoan
bemuse
ben
bench
benchmark
bend
bender
bendix
beneath
benedict
benedictine
benediction
benedikt
benefactor
benefice
beneficent
beneficial
beneficiary
benefit
benelux
benevolent
bengal
bengali
benight
benign
benjamin
bennett
bennington
benny
benson
bent
bentham
benthic
bentley
benton
benz
benzedrine
benzene
beograd
beowulf
beplaster
bequeath
bequest
berate
berea
bereave
bereft
berenices
beresford
beret
berg
bergamot
bergen
bergland
berglund
bergman
bergson
bergstrom
beribbon
beriberi
berkeley
berkelium
berkowitz
berkshire
berlin
berlioz
berlitz
berman
bermuda
bern
bernadine
bernard
bernardino
bernardo
berne
bernet
bernhard
bernice
bernie
berniece
bernini
bernoulli
bernstein
berra
berry
berserk
bert
berth
bertha
bertie
bertram
bertrand
berwick
beryl
beryllium
beseech
beset
besetting
beside
besiege
besmirch
besotted
bespeak
bespectacled
bespoke
bess
bessel
bessemer
bessie
best
bestial
bestir
bestirring
bestow
bestowal
bestseller
bestselling
bestubble
bet
beta
betatron
betel
betelgeuse
beth
bethel
bethesda
bethlehem
bethought
betide
betoken
betony
betray
betrayal
betrayer
betroth
betrothal
betsey
betsy
bette
bettor
betty
between
betwixt
bevel
beverage
beverly
bevy
bewail
beware
bewhisker
bewilder
bewitch
bey
beyond
bezel
bhoy
bhutan
bialystok
bianco
bias
biaxial
bib
bibb
bible
biblical
bibliography
bibliophile
bicameral
bicarbonate
bicentennial
bicep
biceps
bichromate
bicker
biconcave
biconnected
bicycle
bid
biddable
bidden
biddy
bide
bidiagonal
bidirectional
bien
biennial
biennium
bifocal
bifurcate
big
bigelow
biggs
bigot
bigotry
biharmonic
bijection
bijective
bijouterie
bike
bikini
bilabial
bilateral
bilayer
bile
bilge
bilharziasis
bilinear
bilingual
bilk
bill
billboard
billet
billfold
billiard
billie
billiken
billings
billion
billionth
billow
billy
biltmore
bimetallic
bimetallism
bimini
bimodal
bimolecular
bimonthly
bin
binary
binaural
bind
bindery
bindle
bindweed
bing
binge
bingham
binghamton
bingle
bini
binocular
binomial
binuclear
biochemic
biography
biology
biometrika
biometry
biopsy
biota
biotic
biotite
bipartisan
bipartite
biplane
bipolar
biracial
birch
bird
birdbath
birdie
birdlike
birdseed
birdwatch
birefringent
birgit
birmingham
birth
birthday
birthplace
birthright
biscuit
bisect
bisexual
bishop
bishopric
bismarck
bismark
bismuth
bison
bisque
bissau
bistable
bistate
bit
bitch
bite
bitnet
bitt
bitten
bittern
bitternut
bitterroot
bittersweet
bitumen
bituminous
bitwise
bivalve
bivariate
bivouac
biz
bizarre
bizet
blab
black
blackball
blackberry
blackbird
blackboard
blackbody
blackburn
blacken
blackfeet
blackjack
blackmail
blackman
blackout
blacksmith
blackstone
blackwell
bladder
bladdernut
bladderwort
blade
blaine
blair
blake
blame
blameworthy
blanc
blanch
blanchard
blanche
bland
blandish
blank
blanket
blare
blaspheme
blasphemous
blasphemy
blast
blastula
blat
blatant
blather
blatz
blaze
blazon
bleach
bleak
bleary
bleat
bled
bleed
bleeker
blemish
blend
blenheim
bless
blest
blew
blight
blimp
blind
blindfold
blink
blinn
blip
bliss
blissful
blister
blithe
blitz
blizzard
bloat
blob
bloc
bloch
block
blockade
blockage
blockhouse
blocky
bloke
blomberg
blomquist
blond
blonde
blood
bloodbath
bloodhound
bloodline
bloodroot
bloodshed
bloodshot
bloodstain
bloodstone
bloodstream
bloody
bloom
bloomfield
bloomington
bloop
blossom
blot
blotch
blouse
blow
blowback
blowfish
blown
blowup
blubber
bludgeon
blue
blueback
blueberry
bluebill
bluebird
bluebonnet
bluebook
bluebush
bluefish
bluegill
bluegrass
bluejacket
blueprint
bluestocking
bluet
bluff
bluish
blum
blumenthal
blunder
blunt
blur
blurb
blurry
blurt
blush
bluster
blustery
blutwurst
blvd
blythe
bmw
boa
boar
board
boardinghouse
boast
boastful
boat
boathouse
boatload
boatman
boatmen
boatswain
boatyard
bob
bobbie
bobbin
bobble
bobby
bobcat
bobolink
boca
bock
bocklogged
bode
bodhisattva
bodice
bodied
bodleian
body
bodybuild
bodybuilder
bodybuilding
bodyguard
boeing
boeotia
boeotian
bog
bogey
bogeymen
bogging
boggle
boggy
bogota
bogus
bogy
bohemia
bohr
boil
bois
boise
boisterous
bold
boldface
bole
boletus
bolivar
bolivia
bolo
bologna
bolometer
bolshevik
bolshevism
bolshevist
bolshoi
bolster
bolt
bolton
boltzmann
bomb
bombard
bombast
bombastic
bombay
bombproof
bon
bona
bonanza
bonaparte
bonaventure
bond
bondage
bondholder
bondsman
bondsmen
bone
bonfire
bong
bongo
boniface
bonito
bonn
bonnet
bonneville
bonnie
bonus
bony
bonze
boo
booby
boogie
book
bookbind
bookcase
bookend
bookie
bookish
bookkeep
booklet
bookmobile
bookplate
bookseller
bookshelf
bookshelves
bookstore
booky
boolean
boom
boomerang
boon
boone
boor
boorish
boost
boot
bootes
booth
bootleg
bootlegged
bootlegger
bootlegging
bootstrap
bootstrapped
bootstrapping
booty
booze
bop
borate
borax
bordeaux
bordello
borden
border
borderland
borderline
bore
borealis
boreas
boredom
borg
boric
boris
born
borne
borneo
boron
borosilicate
borough
borroughs
borrow
bosch
bose
bosom
boson
bosonic
boss
boston
bostonian
boswell
botanic
botanist
botany
botch
botfly
both
bothersome
botswana
bottle
bottleneck
bottom
bottommost
botulin
botulism
boucher
bouffant
bough
bought
boulder
boule
boulevard
bounce
bouncy
bound
boundary
bounty
bouquet
bourbaki
bourbon
bourgeois
bourgeoisie
bourn
boustrophedon
bout
boutique
bovine
bow
bowditch
bowdoin
bowel
bowen
bowfin
bowie
bowl
bowline
bowman
bowmen
bowstring
box
boxcar
boxwood
boxy
boy
boyar
boyce
boycott
boyd
boyfriend
boyhood
boyish
boyle
boylston
bp
brace
bracelet
bracken
bracket
brackish
bract
brad
bradbury
bradford
bradley
bradshaw
brady
brae
brag
bragg
braggart
bragging
brahmaputra
brahms
brahmsian
braid
braille
brain
brainard
brainchild
brainchildren
brainstorm
brainwash
brainy
brake
brakeman
bramble
bran
branch
brand
brandeis
brandenburg
brandish
brandon
brandt
brandy
brandywine
braniff
brant
brash
brasilia
brass
brassiere
brassy
bratwurst
braun
bravado
brave
bravery
bravo
bravura
brawl
bray
brazen
brazier
brazil
brazilian
brazzaville
breach
bread
breadboard
breadfruit
breadroot
breadth
breadwinner
break
breakage
breakaway
breakdown
breakfast
breakoff
breakpoint
breakthrough
breakup
breakwater
bream
breast
breastplate
breastwork
breath
breathe
breathtaking
breathy
breccia
bred
breech
breeches
breed
breeze
breezy
bremen
bremsstrahlung
brenda
brendan
brennan
brenner
brent
brest
brethren
breton
brett
breve
brevet
brevity
brew
brewery
brewster
brian
briar
bribe
bribery
brice
brick
brickbat
bricklay
bricklayer
bricklaying
bridal
bride
bridegroom
bridesmaid
bridge
bridgeable
bridgehead
bridgeport
bridget
bridgetown
bridgewater
bridgework
bridle
brief
briefcase
brig
brigade
brigadier
brigantine
briggs
brigham
bright
brighten
brighton
brilliant
brillouin
brim
brimful
brimstone
brindisi
brindle
brine
bring
brink
brinkmanship
briny
brisbane
brisk
bristle
bristol
britain
britannic
britannica
britches
british
briton
brittany
britten
brittle
broach
broad
broadcast
broaden
broadloom
broadside
broadway
brocade
broccoli
brochure
brock
brockle
broglie
broil
broke
broken
brokerage
bromfield
bromide
bromine
bromley
bronchi
bronchial
bronchiolar
bronchiole
bronchitis
bronchus
bronco
brontosaurus
bronx
bronze
bronzy
brood
broody
brook
brooke
brookhaven
brookline
brooklyn
brookside
broom
broomcorn
broth
brothel
brother
brotherhood
brought
brouhaha
brow
browbeaten
brown
browne
brownell
brownian
brownie
brownish
browse
bruce
brucellosis
bruckner
bruegel
bruise
bruit
brumidi
brunch
brunette
brunhilde
bruno
brunswick
brunt
brush
brushfire
brushlike
brushwork
brushy
brusque
brussels
brutal
brute
bryan
bryant
bryce
bryn
bryophyta
bryophyte
bryozoa
bstj
btl
btu
bub
bubble
buchanan
bucharest
buchenwald
buchwald
buck
buckaroo
buckboard
bucket
bucketfull
buckeye
buckhorn
buckle
buckley
bucknell
buckshot
buckskin
buckthorn
buckwheat
bucolic
bud
budapest
budd
buddha
buddhism
buddhist
buddy
budge
budget
budgetary
budweiser
buena
buenos
buff
buffalo
buffet
bufflehead
buffoon
bug
bugaboo
bugeyed
bugging
buggy
bugle
buick
build
buildup
built
builtin
bujumbura
bulb
bulblet
bulgaria
bulge
bulk
bulkhead
bulky
bull
bulldog
bulldoze
bullet
bulletin
bullfinch
bullfrog
bullhead
bullhide
bullish
bullock
bullseye
bullwhack
bully
bullyboy
bulrush
bulwark
bum
bumble
bumblebee
bump
bumptious
bun
bunch
bundestag
bundle
bundoora
bundy
bungalow
bungle
bunk
bunkmate
bunny
bunsen
bunt
bunyan
buoy
buoyant
burbank
burch
burden
burdensome
burdock
bureau
bureaucracy
bureaucrat
bureaucratic
buret
burette
burg
burgeon
burgess
burgher
burglar
burglarproof
burglary
burgundian
burgundy
burial
buried
burke
burl
burlap
burlesque
burley
burlington
burly
burma
burmese
burn
burnett
burnham
burnish
burnout
burnside
burnt
burp
burr
burro
burroughs
burrow
bursitis
burst
bursty
burt
burton
burtt
burundi
bury
bus
busboy
busch
buses
bush
bushel
bushmaster
bushnell
bushwhack
bushy
business
businessman
businessmen
buss
bust
bustard
bustle
busy
but
butadiene
butane
butch
butchery
butene
buteo
butler
butt
butte
butterball
buttercup
butterfat
butterfield
butterfly
buttermilk
butternut
buttery
buttock
button
buttonhole
buttonweed
buttress
buttrick
butyl
butyrate
butyric
buxom
buxtehude
buxton
buy
buyer
buzz
buzzard
buzzer
buzzing
buzzsaw
buzzword
buzzy
by
bye
byers
bygone
bylaw
byline
bypass
bypath
byproduct
byrd
byrne
byroad
byron
byronic
bystander
byte
byway
byword
byzantine
byzantium
c
ca
cab
cabal
cabana
cabaret
cabbage
cabdriver
cabin
cabinet
cabinetmake
cabinetry
cable
cabot
cacao
cachalot
cache
cackle
cacm
cacophonist
cacophony
cacti
cactus
cadaver
cadaverous
caddis
caddy
cadent
cadenza
cadet
cadillac
cadmium
cadre
cady
caesar
cafe
cafeteria
cage
cagey
cahill
cahoot
caiman
cain
caine
cairn
cairo
cajole
cake
cal
calais
calamitous
calamity
calamus
calcareous
calcify
calcine
calcite
calcium
calculable
calculate
calculi
calculus
calcutta
calder
caldera
caldwell
caleb
calendar
calendrical
calf
calfskin
calgary
calhoun
caliber
calibrate
calibre
calico
california
californium
caliper
caliph
caliphate
calisthenic
calkins
call
calla
callaghan
callahan
caller
calligraph
calligraphy
calliope
callisto
callous
callus
calm
caloric
calorie
calorimeter
calumet
calumniate
calumny
calvary
calve
calvert
calvin
calvinist
calypso
cam
camaraderie
camber
cambodia
cambrian
cambric
cambridge
camden
came
camel
camelback
camellia
camelopard
camelot
cameo
camera
cameraman
cameramen
cameron
cameroun
camilla
camilla
camille
camino
camouflage
camp
campaign
campanile
campbell
campfire
campground
campion
campsite
campus
can
canaan
canada
canadian
canal
canary
canaveral
canberra
cancel
cancellate
cancelled
cancelling
cancer
cancerous
candace
candela
candelabra
candid
candidacy
candidate
candide
candle
candlelight
candlelit
candlestick
candlewick
candy
cane
canfield
canine
canis
canister
canker
cankerworm
canna
cannabis
cannel
cannery
cannibal
cannister
cannon
cannonball
cannot
canny
canoe
canoga
canon
canonic
canopy
canst
cant
cantabrigian
cantaloupe
canteen
canterbury
canterelle
canticle
cantilever
cantle
canto
canton
cantonese
cantor
canvas
canvasback
canvass
canyon
cap
capacious
capacitance
capacitate
capacitive
capacitor
capacity
cape
capella
caper
capetown
capillary
capistrano
capita
capital
capitol
capitoline
capitulate
capo
caprice
capricious
capricorn
capsize
capstan
capstone
capsule
captain
captaincy
caption
captious
captivate
captive
captor
capture
caputo
capybara
car
carabao
caracas
caramel
caravan
caraway
carbide
carbine
carbohydrate
carboloy
carbon
carbonaceous
carbonate
carbondale
carbone
carbonic
carbonium
carbonyl
carborundum
carboxy
carboxylic
carboy
carbuncle
carburetor
carcass
carcinoge
carcinogenic
carcinoma
card
cardamom
cardboard
cardiac
cardiff
cardinal
cardiod
cardioid
cardiology
cardiovascular
care
careen
career
carefree
careful
caress
caret
caretaker
careworn
carey
carfare
cargill
cargo
cargoes
carib
caribbean
caribou
caricature
carl
carla
carleton
carlin
carlisle
carlo
carload
carlson
carlton
carlyle
carmela
carmen
carmichael
carmine
carnage
carnal
carnation
carne
carnegie
carney
carnival
carob
carol
carolina
caroline
carolingian
carolinian
carolyn
carouse
carp
carpathia
carpenter
carpentry
carpet
carport
carr
carrageen
carrara
carrel
carriage
carrie
carrion
carroll
carrot
carruthers
carry
carryover
carson
cart
carte
cartel
cartesian
carthage
carthaginian
cartilage
cartilaginous
cartographer
cartographic
cartography
carton
cartoon
cartridge
cartwheel
caruso
carve
carven
caryatid
casanova
casbah
cascade
cascara
case
casebook
casein
casework
casey
cash
cashew
cashier
cashmere
casino
cask
casket
caspian
cassandra
casserole
cassette
cassiopeia
cassius
cassock
cast
castanet
caste
casteth
castigate
castillo
castle
castor
castro
casual
casualty
cat
catabolic
cataclysm
cataclysmic
catalina
catalogue
catalpa
catalysis
catalyst
catalytic
catapult
cataract
catastrophe
catastrophic
catatonia
catatonic
catawba
catbird
catcall
catch
catchup
catchword
catchy
catechism
categoric
category
catenate
cater
caterpillar
catfish
catharsis
cathedra
cathedral
catherine
catherwood
catheter
cathode
cathodic
catholic
catholicism
cathy
cation
cationic
catkin
catlike
catnip
catskill
catsup
cattail
cattle
cattleman
cattlemen
catv
caucasian
caucasus
cauchy
caucus
caught
cauldron
cauliflower
caulk
causal
causate
causation
cause
caustic
caution
cautionary
cautious
cavalcade
cavalier
cavalry
cave
caveat
caveman
cavemen
cavendish
cavern
cavernous
caviar
cavil
cavilling
caviness
cavitate
cavort
caw
cayenne
cayley
cayuga
cb
cbs
ccny
cdc
cease
cecil
cecilia
cecropia
cedar
cede
cedilla
cedric
ceil
celandine
celanese
celebes
celebrant
celebrate
celebrity
celerity
celery
celesta
celeste
celestial
celia
celibacy
cell
cellar
cellophane
cellular
celluloid
cellulose
celsius
celtic
cement
cemetery
cenozoic
censor
censorial
censorious
censure
census
cent
centaur
centenary
centennial
centerline
centerpiece
centigrade
centimeter
centipede
central
centrex
centric
centrifugal
centrifugate
centrifuge
centrist
centroid
centum
century
cepheus
ceq
ceramic
ceramium
cerberus
cereal
cerebellum
cerebral
cerebrate
ceremonial
ceremonious
ceremony
ceres
cereus
cerise
cerium
cern
certain
certainty
certificate
certified
certify
certiorari
certitude
cerulean
cervantes
cervix
cesare
cesium
cessation
cession
cessna
cetera
cetus
ceylon
cezanne
cf
chablis
chad
chadwick
chafe
chaff
chagrin
chain
chair
chairlady
chairman
chairmen
chairperson
chairwoman
chairwomen
chaise
chalcedony
chalcocite
chalet
chalice
chalk
chalkboard
chalkline
chalky
challenge
chalmers
chamber
chamberlain
chambermaid
chambers
chameleon
chamfer
chamois
chamomile
champ
champagne
champaign
champion
champlain
chance
chancel
chancellor
chancery
chancy
chandelier
chandler
chang
change
changeable
changeover
channel
chanson
chant
chantey
chantilly
chantry
chao
chaos
chaotic
chap
chaparral
chapel
chaperon
chaperone
chaplain
chaplaincy
chaplin
chapman
chapter
char
character
characteristic
charcoal
chard
charge
chargeable
chariot
charisma
charismatic
charitable
charity
charlemagne
charles
charleston
charley
charlie
charlotte
charlottesville
charm
charon
chart
charta
chartres
chartreuse
chartroom
charybdis
chase
chasm
chassis
chaste
chastise
chastity
chat
chateau
chateaux
chatham
chattanooga
chattel
chatty
chaucer
chauffeur
chauncey
chautauqua
chaw
cheap
cheat
cheater
check
checkbook
checkerberry
checkerboard
checklist
checkmate
checkout
checkpoint
checksum
checksummed
checksumming
checkup
cheek
cheekbone
cheeky
cheer
cheerful
cheerlead
cheerleader
cheery
cheese
cheesecake
cheesecloth
cheesy
cheetah
chef
chelate
chemic
chemise
chemisorb
chemisorption
chemist
chemistry
chemotherapy
chen
cheney
chenille
cherish
cherokee
cherry
chert
cherub
cherubim
cheryl
chesapeake
cheshire
chess
chest
chester
chesterton
chestnut
chevalier
chevrolet
chevron
chevy
chevy
chew
cheyenne
chi
chiang
chianti
chic
chicago
chicagoan
chicanery
chicano
chick
chickadee
chicken
chickweed
chicory
chide
chief
chiefdom
chieftain
chiffon
chigger
chignon
chilblain
child
childbear
childbirth
childhood
childish
childlike
children
chile
chilean
chili
chill
chilly
chime
chimera
chimeric
chimique
chimney
chimpanzee
chin
china
chinaman
chinamen
chinatown
chinch
chinchilla
chine
chinese
chink
chinook
chinquapin
chip
chipboard
chipmunk
chippendale
chiropractor
chirp
chisel
chisholm
chit
chiton
chivalrous
chivalry
chive
chlorate
chlordane
chloride
chlorinate
chlorine
chloroform
chlorophyll
chloroplast
chloroplatinate
chock
chocolate
choctaw
choice
choir
choirmaster
choke
chokeberry
cholera
cholesterol
cholinesterase
chomp
chomsky
choose
choosy
chop
chopin
choppy
choral
chorale
chord
chordal
chordata
chordate
chore
choreograph
choreography
chorine
chortle
chorus
chose
chosen
chou
chow
chowder
chris
christ
christen
christendom
christensen
christenson
christian
christiana
christianson
christie
christina
christine
christlike
christmas
christoffel
christoph
christopher
christy
chromate
chromatic
chromatin
chromatogram
chromatograph
chromatography
chrome
chromic
chromium
chromosome
chromosphere
chronic
chronicle
chronograph
chronography
chronology
chrysanthemum
chrysler
chrysolite
chub
chubby
chuck
chuckle
chuckwalla
chuff
chug
chugging
chum
chummy
chump
chungking
chunk
chunky
church
churchgo
churchgoer
churchgoing
churchill
churchillian
churchman
churchmen
churchwoman
churchwomen
churchyard
churn
chute
chutney
cia
cicada
cicero
ciceronian
cider
cigar
cigarette
cilia
ciliate
cinch
cincinnati
cinder
cinderella
cindy
cinema
cinematic
cinerama
cinnabar
cinnamon
cinquefoil
cipher
circa
circe
circle
circlet
circuit
circuitous
circuitry
circulant
circular
circulate
circulatory
circumcircle
circumcise
circumcision
circumference
circumferential
circumflex
circumlocution
circumpolar
circumscribe
circumscription
circumspect
circumsphere
circumstance
circumstantial
circumvent
circumvention
circus
cistern
cit
citadel
citation
cite
citizen
citizenry
citrate
citric
citroen
citron
citrus
city
cityscape
citywide
civet
civic
civil
civilian
clad
cladophora
claim
claimant
claire
clairvoyant
clam
clamber
clammy
clamorous
clamp
clamshell
clan
clandestine
clang
clank
clannish
clap
clapboard
clapeyron
clara
clare
claremont
clarence
clarendon
claret
clarify
clarinet
clarity
clark
clarke
clash
clasp
class
classic
classification
classificatory
classify
classmate
classroom
classy
clatter
clattery
claude
claudia
claudio
claus
clause
clausen
clausius
claustrophobia
claustrophobic
claw
clay
clayton
clean
cleanse
cleanup
clear
clearance
clearheaded
clearwater
cleat
cleavage
cleave
cleft
clement
clemson
clench
clergy
clergyman
clergymen
cleric
clerk
cleveland
clever
cliche
click
client
clientele
cliff
cliffhang
clifford
clifton
climactic
climate
climatic
climatology
climax
climb
clime
clinch
cling
clinging
clinic
clinician
clink
clint
clinton
clio
clip
clipboard
clique
clitoris
clive
cloak
cloakroom
clobber
clock
clockwatcher
clockwise
clockwork
clod
cloddish
clog
clogging
cloister
clomp
clone
clonic
close
closet
closeup
closure
clot
cloth
clothbound
clothe
clothesbrush
clotheshorse
clothesline
clothesman
clothesmen
clothier
clotho
cloture
cloud
cloudburst
cloudy
clout
clove
cloven
clown
cloy
club
clubhouse
clubroom
cluck
clue
cluj
clump
clumsy
clung
cluster
clutch
clutter
clyde
clytemnestra
co
coach
coachman
coachmen
coachwork
coadjutor
coagulable
coagulate
coal
coalesce
coalescent
coalition
coarse
coarsen
coast
coastal
coastline
coat
coates
coattail
coauthor
coax
coaxial
cobalt
cobb
cobble
cobblestone
cobol
cobra
cobweb
coca
cocaine
coccidiosis
cochineal
cochlea
cochran
cochrane
cock
cockatoo
cockcrow
cockeye
cockle
cocklebur
cockleshell
cockpit
cockroach
cocksure
cocktail
cocky
coco
cocoa
coconut
cocoon
cod
coda
coddle
code
codebreak
codeposit
codetermine
codeword
codfish
codicil
codify
codomain
codon
codpiece
cody
coed
coeditor
coeducation
coefficient
coequal
coerce
coercible
coercion
coercive
coexist
coexistent
coextensive
cofactor
coffee
coffeecup
coffeepot
coffer
coffey
coffin
coffman
cog
cogent
cogitate
cognac
cognate
cognition
cognitive
cognizable
cognizant
cohen
cohere
coherent
cohesion
cohesive
cohn
cohomology
cohort
cohosh
coiffure
coil
coin
coinage
coincide
coincident
coincidental
coke
col
cola
colander
colatitude
colby
cold
cole
coleman
coleridge
colette
coleus
colgate
colicky
coliform
coliseum
collaborate
collage
collagen
collapse
collapsible
collar
collarbone
collard
collate
collateral
colleague
collect
collectible
collector
college
collegial
collegian
collegiate
collet
collide
collie
collier
collimate
collinear
collins
collision
collocation
colloidal
colloq
colloquia
colloquial
colloquium
colloquy
collude
collusion
cologne
colombia
colombo
colon
colonel
colonial
colonist
colonnade
colony
colorado
colorate
coloratura
colorimeter
colossal
colosseum
colossi
colossus
colt
coltish
coltsfoot
columbia
columbine
columbus
column
columnar
colza
coma
comanche
comatose
comb
combat
combatant
combatted
combinate
combination
combinator
combinatorial
combinatoric
combine
combustible
combustion
come
comeback
comedian
comedy
comet
cometary
cometh
comfort
comic
cominform
comma
command
commandant
commandeer
commando
commemorate
commend
commendation
commendatory
commensurable
commensurate
comment
commentary
commentator
commerce
commercial
commingle
commiserate
commissariat
commissary
commission
commit
committable
committal
committed
committee
committeeman
committeemen
committeewoman
committeewomen
committing
commodious
commodity
commodore
common
commonality
commonplace
commonweal
commonwealth
commotion
communal
commune
communicable
communicant
communicate
communion
communique
commutate
commute
compact
compacter
compactify
compagnie
companion
companionway
company
comparative
comparator
compare
comparison
compartment
compass
compassion
compassionate
compatible
compatriot
compel
compellable
compelled
compelling
compendia
compendium
compensable
compensate
compensatory
compete
competent
competition
competitive
competitor
compilation
compile
complacent
complain
complainant
complaint
complaisant
compleat
complement
complementarity
complementary
complementation
complete
completion
complex
complexion
compliant
complicate
complicity
compliment
complimentary
compline
comply
component
componentry
comport
compose
composite
composition
compositor
compost
composure
compote
compound
comprehend
comprehensible
comprehension
comprehensive
compress
compressible
compression
compressive
compressor
comprise
compromise
compton
comptroller
compulsion
compulsive
compulsory
compunction
computation
compute
comrade
con
conakry
conant
concatenate
concave
conceal
concede
conceit
conceive
concentrate
concentric
concept
conception
conceptual
concern
concert
concerti
concertina
concertmaster
concerto
concession
concessionaire
conch
concierge
conciliate
conciliatory
concise
concision
conclave
conclude
conclusion
conclusive
concoct
concocter
concomitant
concord
concordant
concourse
concrete
concretion
concubine
concur
concurred
concurrent
concurring
concussion
condemn
condemnate
condemnatory
condensate
condense
condensible
condescend
condescension
condiment
condition
condolence
condominium
condone
conduce
conducive
conduct
conductance
conductor
conduit
cone
coneflower
conestoga
coney
confabulate
confect
confectionery
confederacy
confederate
confer
conferee
conference
conferrable
conferred
conferring
confess
confession
confessor
confidant
confidante
confide
confident
confidential
configuration
configure
confine
confirm
confirmation
confirmatory
confiscable
confiscate
confiscatory
conflagrate
conflagration
conflict
confluent
confocal
conform
conformal
conformance
conformation
confound
confrere
confront
confrontation
confucian
confucianism
confucius
confuse
confusion
confute
congeal
congener
congenial
congenital
congest
congestion
congestive
conglomerate
congo
congolese
congratulate
congratulatory
congregate
congress
congressional
congressman
congressmen
congresswoman
congresswomen
congruent
conic
conifer
coniferous
conjectural
conjecture
conjoin
conjoint
conjugacy
conjugal
conjugate
conjunct
conjuncture
conjure
conklin
conley
conn
connally
connect
connecticut
connector
conner
connie
connivance
connive
connoisseur
connors
connotation
connotative
connote
connubial
conquer
conqueror
conquest
conquistador
conrad
conrail
consanguine
consanguineous
conscience
conscientious
conscionable
conscious
conscript
conscription
consecrate
consecutive
consensus
consent
consequent
consequential
conservation
conservatism
conservative
conservator
conservatory
conserve
consider
considerate
consign
consignee
consignor
consist
consistent
consolation
console
consolidate
consonant
consonantal
consort
consortium
conspicuous
conspiracy
conspirator
conspiratorial
conspire
constance
constant
constantine
constantinople
constellate
consternate
constipate
constituent
constitute
constitution
constitutive
constrain
constraint
constrict
constrictor
construct
constructible
constructor
construe
consul
consular
consulate
consult
consultant
consultation
consultative
consume
consummate
consumption
consumptive
contact
contagion
contagious
contain
contaminant
contaminate
contemplate
contemporaneous
contemporary
contempt
contemptible
contemptuous
contend
content
contention
contentious
contest
contestant
context
contextual
contiguity
contiguous
continent
continental
contingent
continua
continual
continuant
continuation
continue
continued
continuity
continuo
continuous
continuum
contort
contour
contraband
contrabass
contraception
contraceptive
contract
contractor
contractual
contradict
contradictory
contradistinct
contradistinction
contradistinguish
contralateral
contralto
contraption
contrariety
contrariwise
contrary
contrast
contravariant
contravene
contravention
contretemps
contribute
contribution
contributor
contributory
contrite
contrition
contrivance
contrive
control
controllable
controlled
controller
controlling
controversial
controversy
controvertible
contumacy
contusion
conundrum
convair
convalesce
convalescent
convect
convene
convenient
convent
convention
converge
convergent
conversant
conversation
converse
conversion
convert
convertible
convex
convey
conveyance
conveyor
convict
convince
convivial
convocate
convocation
convoke
convolute
convolution
convolve
convoy
convulse
convulsion
convulsive
conway
cony
coo
cook
cookbook
cooke
cookery
cookie
cooky
cool
coolant
cooley
coolheaded
coolidge
coon
coop
cooperate
coordinate
coors
coot
cop
cope
copeland
copenhagen
copernican
copernicus
copious
coplanar
copolymer
copperas
copperfield
copperhead
coppery
copra
coprinus
coproduct
copter
copy
copybook
copyright
copywriter
coquette
coquina
coral
coralberry
coralline
corbel
corbett
corcoran
cord
cordage
cordial
cordite
cordon
corduroy
core
corey
coriander
corinth
corinthian
coriolanus
cork
corkscrew
cormorant
corn
cornbread
cornea
cornelia
cornelius
cornell
cornerstone
cornet
cornfield
cornflower
cornish
cornish
cornmeal
cornstarch
cornucopia
cornwall
corny
corollary
corona
coronado
coronary
coronate
coroner
coronet
coroutine
corp
corpora
corporal
corporate
corporeal
corps
corpse
corpsman
corpsmen
corpulent
corpus
corpuscular
corral
corralled
correct
corrector
correlate
correspond
correspondent
corridor
corrigenda
corrigendum
corrigible
corroborate
corroboree
corrode
corrodible
corrosion
corrosive
corrugate
corrupt
corruptible
corruption
corsage
corset
cortege
cortex
cortical
cortland
corundum
coruscate
corvallis
corvette
corvus
cos
cosec
coset
cosgrove
cosh
cosine
cosmetic
cosmic
cosmology
cosmopolitan
cosmos
cosponsor
cossack
cost
costa
costello
costume
cosy
cot
cotangent
cotillion
cotman
cotoneaster
cotta
cottage
cotton
cottonmouth
cottonseed
cottonwood
cottony
cottrell
cotty
cotyledon
couch
cougar
cough
could
coulomb
coulter
council
councilman
councilmen
councilwoman
councilwomen
counsel
counselor
count
countdown
countenance
counteract
counterargument
counterattack
counterbalance
counterclockwise
counterexample
counterfeit
counterflow
counterintuitive
counterman
countermen
counterpart
counterpoint
counterpoise
counterproductive
counterproposal
countersink
countersunk
countervail
countrify
country
countryman
countrymen
countryside
countrywide
county
countywide
coup
coupe
couple
coupon
courage
courageous
courier
course
court
courteous
courtesan
courtesy
courthouse
courtier
courtney
courtroom
courtyard
couscous
cousin
couturier
covalent
covariant
covariate
covary
cove
coven
covenant
coventry
cover
coverage
coverall
coverlet
covert
covet
covetous
cow
cowan
coward
cowardice
cowbell
cowbird
cowboy
cowgirl
cowhand
cowherd
cowhide
cowl
cowlick
cowman
cowmen
coworker
cowpea
cowpoke
cowpony
cowpox
cowpunch
cowry
cowslip
cox
coxcomb
coy
coyote
coypu
cozen
cozy
cpa
cpu
crab
crabapple
crabmeat
crack
crackle
crackpot
cradle
craft
craftsman
craftsmen
craftspeople
craftsperson
crafty
crag
craggy
craig
cram
cramer
cramp
cranberry
crandall
crane
cranelike
cranford
crania
cranium
crank
crankcase
crankshaft
cranky
cranny
cranston
crap
crappie
crash
crass
crate
crater
cravat
crave
craven
craw
crawford
crawl
crawlspace
crayfish
crayon
craze
crazy
creak
creaky
cream
creamery
creamy
crease
create
creating
creature
creche
credent
credential
credenza
credible
credit
creditor
credo
credulity
credulous
creed
creedal
creek
creekside
creep
creepy
cremate
crematory
creole
creon
creosote
crepe
crept
crescendo
crescent
cress
crest
crestfallen
crestview
cretaceous
cretan
crete
cretin
cretinous
crevice
crew
crewcut
crewel
crewman
crewmen
crib
cricket
cried
crime
crimea
criminal
crimp
crimson
cringe
crinkle
cripple
crises
crisis
crisp
crispin
criss
crisscross
criteria
criterion
critic
critique
critter
croak
croatia
crochet
crock
crockery
crockett
crocodile
crocodilian
crocus
croft
croix
cromwell
cromwellian
crone
crony
crook
croon
crop
croquet
crosby
cross
crossarm
crossbar
crossbill
crossbow
crosscut
crosshatch
crosslink
crossover
crosspoint
crossroad
crosstalk
crosswalk
crossway
crosswise
crossword
crosswort
crotch
crotchety
crouch
croupier
crow
crowbait
crowberry
crowd
crowfoot
crowley
crown
croydon
crt
crucial
crucible
crucifix
crucifixion
crucify
crud
cruddy
crude
cruel
cruelty
cruickshank
cruise
crumb
crumble
crummy
crump
crumple
crunch
crupper
crusade
crush
crusoe
crust
crusty
crutch
crux
cruz
cry
cryogenic
cryostat
crypt
cryptanalysis
cryptanalyst
cryptanalytic
cryptanalyze
cryptic
cryptogram
cryptographer
cryptography
cryptology
crystal
crystalline
crystallite
crystallographer
crystallography
csnet
ct
cub
cuba
cubbyhole
cube
cubic
cuckoo
cucumber
cud
cuddle
cuddly
cudgel
cue
cuff
cufflink
cuisine
culbertson
culinary
cull
culminate
culpa
culpable
culprit
cult
cultivable
cultivate
cultural
culture
culver
culvert
cumberland
cumbersome
cumin
cummings
cummins
cumulate
cumulus
cunard
cunning
cunningham
cuny
cup
cupboard
cupful
cupid
cupidity
cupric
cuprous
cur
curate
curb
curbside
curd
curdle
cure
curfew
curia
curie
curio
curiosity
curious
curium
curl
curlew
curlicue
curran
currant
current
curricula
curricular
curriculum
curry
curse
cursive
cursor
cursory
curt
curtail
curtain
curtis
curtsey
curvaceous
curvature
curve
curvilinear
cushing
cushion
cushman
cusp
custer
custodial
custodian
custody
custom
customary
customhouse
cut
cutaneous
cutback
cute
cutesy
cutlass
cutler
cutlet
cutoff
cutout
cutover
cutset
cutthroat
cuttlebone
cuttlefish
cutworm
cyanamid
cyanate
cyanic
cyanide
cybernetic
cybernetics
cycad
cyclades
cycle
cyclic
cyclist
cyclone
cyclopean
cyclops
cyclorama
cyclotomic
cyclotron
cygnus
cylinder
cylindric
cynic
cynthia
cypress
cyprian
cypriot
cyprus
cyril
cyrillic
cyrus
cyst
cysteine
cytochemistry
cytology
cytolysis
cytoplasm
cytosine
cz
czar
czarina
czech
czechoslovakia
czerniak
d
dab
dabble
dacca
dachshund
dactyl
dactylic
dad
dada
dadaism
dadaist
daddy
dade
daedalus
daffodil
daffy
dagger
dahl
dahlia
dahomey
dailey
daimler
dainty
dairy
dairylea
dairyman
dairymen
dais
daisy
dakar
dakota
dale
daley
dalhousie
dallas
dally
dalton
daly
dalzell
dam
damage
damascus
damask
dame
damn
damnation
damon
damp
dampen
damsel
dan
dana
danbury
dance
dandelion
dandy
dane
dang
danger
dangerous
dangle
daniel
danielson
danish
dank
danny
dante
danube
danubian
danzig
daphne
dapper
dapple
dar
dare
daredevil
darius
dark
darken
darkle
darlene
darling
darn
darpa
darrell
darry
dart
dartmouth
darwin
darwinian
dash
dashboard
dastard
data
database
date
dateline
dater
datsun
datum
daub
daugherty
daughter
daunt
dauphin
dauphine
dave
davenport
david
davidson
davies
davis
davison
davit
davy
dawn
dawson
day
daybed
daybreak
daydream
daylight
daytime
dayton
daytona
daze
dazzle
dc
de
deacon
deaconess
deactivate
dead
deaden
deadhead
deadline
deadlock
deadwood
deaf
deafen
deal
deallocate
dealt
dean
deane
deanna
dear
dearborn
dearie
dearth
death
deathbed
deathward
debacle
debar
debarring
debase
debate
debater
debauch
debauchery
debbie
debby
debenture
debilitate
debility
debit
debonair
deborah
debra
debrief
debris
debt
debtor
debug
debugged
debugger
debugging
debunk
debussy
debut
debutante
dec
decade
decadent
decaffeinate
decal
decant
decathlon
decatur
decay
decca
decease
decedent
deceit
deceitful
deceive
decelerate
december
decennial
decent
deception
deceptive
decertify
decibel
decide
deciduous
decile
decimal
decimate
decipher
decision
decisional
decisionmake
decisive
deck
decker
declaim
declamation
declamatory
declaration
declarative
declarator
declaratory
declare
declassify
declination
decline
declivity
decode
decolletage
decollimate
decolonize
decommission
decompile
decomposable
decompose
decomposition
decompress
decompression
decontrol
decontrolled
decontrolling
deconvolution
deconvolve
decor
decorate
decorous
decorticate
decorum
decouple
decoy
decrease
decree
decreeing
decrement
decry
decrypt
decryption
dedicate
deduce
deducible
deduct
deductible
dee
deed
deem
deemphasize
deep
deepen
deer
deere
deerskin
deerstalker
deface
default
defeat
defecate
defect
defector
defend
defendant
defensible
defensive
defer
deferent
deferrable
deferred
deferring
defiant
deficient
deficit
define
definite
definition
definitive
deflate
deflater
deflect
deflector
defocus
deforest
deforestation
deform
deformation
defraud
defray
defrock
defrost
deft
defunct
defuse
defy
degas
degassing
degeneracy
degenerate
degradation
degrade
degrease
degree
degum
degumming
dehumidify
dehydrate
deify
deign
deity
deja
deject
del
delaney
delano
delaware
delay
delectable
delectate
delegable
delegate
delete
deleterious
deletion
delft
delhi
delia
deliberate
delicacy
delicate
delicatessen
delicious
delicti
delight
delightful
delilah
delimit
delimitation
delineament
delineate
delinquent
deliquesce
deliquescent
delirious
delirium
deliver
deliverance
delivery
dell
della
delmarva
delouse
delphi
delphic
delphine
delphinium
delphinus
delta
deltoid
delude
deluge
delusion
delusive
deluxe
delve
demagnify
demagogue
demand
demarcate
demark
demean
demented
dementia
demerit
demigod
demijohn
demiscible
demise
demit
demitted
demitting
demo
democracy
democrat
democratic
demodulate
demography
demolish
demolition
demon
demoniac
demonic
demonstrable
demonstrate
demote
demountable
dempsey
demultiplex
demur
demure
demurred
demurrer
demurring
demystify
den
denature
dendrite
dendritic
deneb
denebola
deniable
denial
denigrate
denizen
denmark
dennis
denny
denominate
denotation
denotative
denote
denouement
denounce
dense
densitometer
dent
dental
dentistry
denton
denture
denudation
denude
denumerable
denunciate
denunciation
denver
deny
deodorant
deoxyribonucleic
deoxyribose
depart
department
departure
depend
dependent
depict
deplete
depletion
deplore
deploy
deport
deportation
deportee
depose
deposit
depositary
deposition
depositor
depository
depot
deprave
deprecate
deprecatory
depreciable
depreciate
depredate
depress
depressant
depressible
depression
depressive
depressor
deprivation
deprive
depth
deputation
depute
deputy
derail
derange
derate
derby
derbyshire
dereference
deregulate
deregulatory
derek
derelict
deride
derision
derisive
derivate
derive
derogate
derogatory
derrick
derriere
dervish
des
descant
descartes
descend
descendant
descendent
descent
describe
description
descriptive
descriptor
desecrate
desecrater
desegregate
desert
deserve
desicate
desiderata
desideratum
design
designate
desire
desirous
desist
desk
desmond
desolate
desolater
desorption
despair
desperado
desperate
despicable
despise
despite
despoil
despond
despondent
despot
despotic
dessert
dessicate
destabilize
destinate
destine
destiny
destitute
destroy
destruct
destructor
desuetude
desultory
detach
detail
detain
detect
detector
detent
detente
detention
deter
detergent
deteriorate
determinant
determinate
determine
deterred
deterrent
deterring
detest
detestation
detonable
detonate
detour
detoxify
detract
detractor
detriment
detroit
deuce
deus
deuterate
deuterium
deuteron
devastate
develop
deviant
deviate
device
devil
devilish
devious
devise
devisee
devoid
devolution
devolve
devon
devonshire
devote
devotee
devotion
devour
devout
dew
dewar
dewdrop
dewey
dewitt
dewy
dexter
dexterity
dextrose
dextrous
dey
dhabi
dharma
diabase
diabetes
diabetic
diabolic
diachronic
diacritic
diacritical
diadem
diagnosable
diagnose
diagnoses
diagnosis
diagnostic
diagnostician
diagonal
diagram
diagrammatic
dial
dialect
dialectic
dialogue
dialup
dialysis
diamagnetic
diamagnetism
diameter
diamond
diana
diane
dianne
diaper
diaphanous
diaphragm
diary
diathermy
diathesis
diatom
diatomaceous
diatomic
diatonic
diatribe
dibble
dice
dichloride
dichondra
dichotomize
dichotomous
dichotomy
dick
dickcissel
dickens
dickerson
dickey
dickinson
dickson
dicotyledon
dicta
dictate
dictatorial
diction
dictionary
dictum
did
didactic
diddle
dido
die
diebold
died
diego
diehard
dieldrin
dielectric
diem
diesel
diet
dietary
dietetic
diethylstilbestrol
dietician
dietrich
diety
dietz
diffeomorphic
diffeomorphism
differ
different
differentiable
differential
differentiate
difficult
difficulty
diffident
diffract
diffractometer
diffuse
diffusible
diffusion
diffusive
difluoride
dig
digest
digestible
digestion
digestive
digging
digit
digital
digitalis
digitate
dignify
dignitary
dignity
digram
digress
digression
dihedral
dilapidate
dilatation
dilate
dilatory
dilemma
dilettante
diligent
dill
dillon
dilogarithm
diluent
dilute
dilution
dim
dime
dimension
dimethyl
diminish
diminution
diminutive
dimple
din
dinah
dine
ding
dinghy
dingo
dingy
dinnertime
dinnerware
dinosaur
dint
diocesan
diocese
diode
dionysian
dionysus
diophantine
diopter
diorama
diorite
dioxide
dip
diphtheria
diphthong
diploid
diploidy
diploma
diplomacy
diplomat
diplomatic
dipole
dirac
dire
direct
director
directorate
directorial
directory
directrices
directrix
dirge
dirichlet
dirt
dirty
dis
disaccharide
disambiguate
disastrous
disburse
disc
discern
discernible
disciple
disciplinarian
disciplinary
discipline
disco
discoid
discomfit
discordant
discovery
discreet
discrepant
discrete
discretion
discretionary
discriminable
discriminant
discriminate
discriminatory
discus
discuss
discussant
discussion
disdain
disdainful
disembowel
disgruntle
disgustful
dish
dishes
dishevel
dishwasher
dishwater
disjunct
disk
dismal
dismissal
disney
disneyland
disparage
disparate
dispel
dispelled
dispelling
dispensable
dispensary
dispensate
dispense
dispersal
disperse
dispersible
dispersion
dispersive
disposable
disposal
disputant
dispute
disquietude
disquisition
disrupt
disruption
disruptive
dissemble
disseminate
dissension
dissertation
dissident
dissipate
dissociable
dissociate
dissonant
dissuade
distaff
distal
distant
distillate
distillery
distinct
distinguish
distort
distortion
distraught
distribution
distributive
distributor
district
disturb
disturbance
disulfide
disyllable
ditch
dither
ditto
ditty
ditzel
diurnal
diva
divalent
divan
dive
diverge
divergent
diverse
diversify
diversion
diversionary
divert
divest
divestiture
divide
dividend
divination
divine
divisible
division
divisional
divisive
divisor
divorce
divorcee
divulge
dixie
dixieland
dixieland
dixon
dizzy
djakarta
dna
dnieper
do
dobbin
dobbs
doberman
dobson
docile
dock
docket
dockside
dockyard
doctor
doctoral
doctorate
doctrinaire
doctrinal
doctrine
document
documentary
documentation
dod
dodd
dodecahedra
dodecahedral
dodecahedron
dodge
dodo
dodson
doe
doff
dog
dogbane
dogberry
doge
dogfish
dogging
doggone
doghouse
dogleg
dogma
dogmatic
dogmatism
dogtooth
dogtrot
dogwood
doherty
dolan
dolce
doldrum
doldrums
dole
doleful
doll
dollar
dollop
dolly
dolomite
dolomitic
dolores
dolphin
dolt
doltish
domain
dome
domenico
domesday
domestic
domesticate
domicile
dominant
dominate
domineer
domingo
dominic
dominican
dominick
dominion
dominique
domino
don
donahue
donald
donaldson
donate
done
doneck
donkey
donna
donnelly
donner
donnybrook
donor
donovan
doodle
dooley
doolittle
doom
doomsday
door
doorbell
doorkeep
doorkeeper
doorknob
doorman
doormen
doorstep
doorway
dopant
dope
doppler
dora
dorado
dorcas
dorchester
doreen
doria
doric
doris
dormant
dormitory
dorothea
dorothy
dorset
dortmund
dosage
dose
dosimeter
dossier
dostoevsky
dot
dote
double
doubleday
doubleheader
doublet
doubleton
doubloon
doubt
doubtful
douce
doug
dough
dougherty
doughnut
douglas
douglass
dour
douse
dove
dovekie
dovetail
dow
dowager
dowel
dowitcher
dowling
down
downbeat
downcast
downdraft
downey
downfall
downgrade
downhill
downing
downplay
downpour
downright
downriver
downs
downside
downslope
downspout
downstairs
downstate
downstream
downtown
downtrend
downtrodden
downturn
downward
downwind
dowry
doyle
doze
dozen
dr
drab
draco
draft
draftee
draftsman
draftsmen
draftsperson
drafty
drag
dragging
dragnet
dragon
dragonfly
dragonhead
dragoon
drain
drainage
drake
dram
drama
dramatic
dramatist
dramaturgy
drank
drape
drapery
drastic
draw
drawback
drawbridge
drawl
drawn
dread
dreadful
dreadnought
dream
dreamboat
dreamlike
dreamt
dreamy
dreary
dredge
dreg
drench
dress
dressmake
dressy
drew
drexel
dreyfuss
drib
dribble
dried
drier
drift
drill
drink
drip
drippy
driscoll
drive
driven
driveway
drizzle
drizzly
droll
dromedary
drone
drool
droop
droopy
drop
drophead
droplet
dropout
drosophila
dross
drought
drove
drown
drowse
drowsy
drub
drudge
drudgery
drug
drugging
drugstore
druid
drum
drumhead
drumlin
drummond
drunk
drunkard
drunken
drury
dry
dryad
dryden
du
dual
dualism
duane
dub
dubhe
dubious
dubitable
dublin
ducat
duchess
duck
duckling
duct
ductile
ductwork
dud
dudley
due
duel
duet
duff
duffel
duffy
dug
dugan
dugout
duke
dukedom
dulcet
dull
dully
dulse
duluth
duly
duma
dumb
dumbbell
dummy
dump
dumpty
dumpy
dun
dunbar
duncan
dunce
dune
dunedin
dung
dungeon
dunham
dunk
dunkirk
dunlap
dunlop
dunn
duopolist
duopoly
dupe
duplex
duplicable
duplicate
duplicity
dupont
duquesne
durable
durance
durango
duration
durer
duress
durham
during
durkee
durkin
durrell
durward
dusenberg
dusenbury
dusk
dusky
dusseldorf
dust
dustbin
dusty
dutch
dutchess
dutchman
dutchmen
dutiable
dutiful
dutton
duty
dwarf
dwarves
dwell
dwelt
dwight
dwindle
dwyer
dyad
dyadic
dye
dyeing
dyer
dying
dyke
dylan
dynamic
dynamism
dynamite
dynamo
dynast
dynastic
dynasty
dyne
dysentery
dyspeptic
dysplasia
dysprosium
dystrophy
each
eagan
eager
eagle
ear
eardrum
earl
earmark
earn
earnest
earphone
earring
earsplitting
earth
earthen
earthenware
earthmen
earthmove
earthmover
earthmoving
earthquake
earthshaking
earthworm
earthy
earwig
ease
easel
east
eastbound
eastern
easternmost
eastland
eastman
eastward
eastwood
easy
easygoing
eat
eaten
eater
eaton
eave
eavesdrop
eavesdropped
eavesdropper
eavesdropping
ebb
eben
ebony
ebullient
eccentric
eccles
ecclesiastic
echelon
echidna
echinoderm
echo
echoes
eclat
eclectic
eclipse
ecliptic
eclogue
ecole
ecology
econometric
econometrica
economic
economist
economy
ecosystem
ecstasy
ecstatic
ectoderm
ectopic
ecuador
ecumenic
ecumenist
ed
eddie
eddy
edelweiss
edematous
eden
edgar
edge
edgerton
edgewise
edging
edgy
edible
edict
edifice
edify
edinburgh
edison
edit
edith
edition
editor
editorial
edmonds
edmondson
edmonton
edmund
edna
edt
eduardo
educable
educate
edward
edwardian
edwardine
edwards
edwin
edwina
eel
eelgrass
eeoc
eerie
eerily
efface
effaceable
effect
effectual
effectuate
effeminate
efferent
effete
efficacious
efficacy
efficient
effie
effloresce
efflorescent
effluent
effluvia
effluvium
effort
effusion
effusive
eft
egalitarian
egan
egg
egghead
eggplant
eggshell
ego
egocentric
egotism
egotist
egregious
egress
egret
egypt
egyptian
eh
ehrlich
eider
eidetic
eigenfunction
eigenspace
eigenstate
eigenvalue
eigenvector
eight
eighteen
eighteenth
eightfold
eighth
eightieth
eighty
eileen
einstein
einsteinian
einsteinium
eire
eisenhower
eisner
either
ejaculate
eject
ejector
eke
ekstrom
ektachrome
el
elaborate
elaine
elan
elapse
elastic
elastomer
elate
elba
elbow
elder
eldest
eldon
eleanor
eleazar
elect
elector
electoral
electorate
electra
electress
electret
electric
electrician
electrify
electro
electrocardiogram
electrocardiograph
electrode
electroencephalogram
electroencephalograph
electroencephalography
electrolysis
electrolyte
electrolytic
electron
electronic
electrophoresis
electrophorus
elegant
elegiac
elegy
element
elementary
elena
elephant
elephantine
elevate
eleven
eleventh
elfin
elgin
eli
elicit
elide
eligible
elijah
eliminate
elinor
eliot
elisabeth
elisha
elision
elite
elizabeth
elizabethan
elk
elkhart
ell
ella
ellen
elliot
elliott
ellipse
ellipsis
ellipsoid
ellipsoidal
ellipsometer
elliptic
ellis
ellison
ellsworth
ellwood
elm
elmer
elmhurst
elmira
elmsford
eloise
elongate
elope
eloquent
else
elsevier
elsewhere
elsie
elsinore
elton
eluate
elucidate
elude
elusive
elute
elution
elves
ely
elysee
elysian
em
emaciate
emanate
emancipate
emanuel
emasculate
embalm
embank
embarcadero
embargo
embargoes
embark
embarrass
embassy
embattle
embed
embeddable
embedded
embedder
embedding
embellish
ember
embezzle
emblazon
emblem
emblematic
embodiment
embody
embolden
emboss
embouchure
embower
embrace
embraceable
embrittle
embroider
embroidery
embroil
embryo
embryology
embryonic
emcee
emendable
emerald
emerge
emergent
emeriti
emeritus
emerson
emery
emigrant
emigrate
emil
emile
emilio
emily
eminent
emirate
emissary
emission
emissivity
emit
emittance
emitted
emitter
emitting
emma
emma
emmanuel
emmett
emolument
emory
emotion
emotional
empathy
emperor
emphases
emphasis
emphatic
emphysema
emphysematous
empire
empiric
emplace
employ
employed
employee
employer
employing
emporium
empower
empress
empty
emulate
emulsify
emulsion
en
enable
enamel
encapsulate
encephalitis
enchantress
enclave
encomia
encomium
encore
encroach
encryption
encumber
encumbrance
encyclopedic
end
endemic
endgame
endicott
endoderm
endogamous
endogamy
endogenous
endomorphism
endorse
endosperm
endothelial
endothermic
endow
endpoint
endurance
endure
enemy
energetic
energy
enervate
enfant
enfield
enforceable
enforcible
eng
engage
engel
engine
engineer
england
englander
engle
englewood
english
englishman
englishmen
enhance
enid
enigma
enigmatic
enjoinder
enlargeable
enliven
enmity
enoch
enol
enormity
enormous
enos
enough
enquire
enquiry
enrico
enrollee
ensconce
ensemble
enstatite
entendre
enter
enterprise
entertain
enthalpy
enthrall
enthusiasm
enthusiast
enthusiastic
entice
entire
entirety
entity
entomology
entourage
entranceway
entrant
entrepreneur
entrepreneurial
entropy
entry
enumerable
enumerate
enunciable
enunciate
envelop
envelope
enviable
envious
environ
envoy
envy
enzymatic
enzyme
enzymology
eocene
eohippus
eosine
epa
epaulet
ephemeral
ephemerides
ephemeris
ephesian
ephesus
ephraim
epic
epicure
epicurean
epicycle
epicyclic
epidemic
epidemiology
epidermic
epidermis
epigenetic
epigram
epigrammatic
epigraph
epileptic
epilogue
epimorphism
epiphany
epiphyseal
epiphysis
episcopal
episcopalian
episcopate
episode
episodic
epistemology
epistle
epistolatory
epitaph
epitaxial
epitaxy
epithelial
epithelium
epithet
epitome
epoch
epochal
epoxy
epsilon
epsom
epstein
equable
equal
equanimity
equate
equatorial
equestrian
equidistant
equilateral
equilibrate
equilibria
equilibrium
equine
equinoctial
equinox
equip
equipoise
equipotent
equipped
equipping
equitable
equitation
equity
equivalent
equivocal
equivocate
era
eradicable
eradicate
erasable
erase
erasmus
erastus
erasure
erato
eratosthenes
erbium
erda
ere
erect
erg
ergative
ergodic
eric
erich
erickson
ericsson
erie
erik
erlenmeyer
ernest
ernestine
ernie
ernst
erode
erodible
eros
erosible
erosion
erosive
erotic
erotica
err
errancy
errand
errant
errantry
errata
erratic
erratum
errol
erroneous
error
ersatz
erskine
erudite
erudition
erupt
eruption
ervin
erwin
escadrille
escalate
escapade
escape
escapee
escheat
escherichia
eschew
escort
escritoire
escrow
escutcheon
eskimo
esmark
esophagi
esoteric
especial
espionage
esplanade
esposito
espousal
espouse
esprit
esquire
essay
essen
essence
essential
essex
est
establish
estate
esteem
estella
ester
estes
esther
estimable
estimate
estonia
estop
estoppal
estrange
estuarine
estuary
et
eta
etc
etch
eternal
eternity
ethan
ethane
ethanol
ethel
ether
ethereal
ethic
ethiopia
ethnic
ethnography
ethnology
ethology
ethos
ethyl
ethylene
etiology
etiquette
etruscan
etude
etymology
eucalyptus
eucharist
euclid
euclidean
eucre
eugene
eugenia
eugenic
eukaryote
euler
eulerian
eulogy
eumenides
eunice
euphemism
euphemist
euphorbia
euphoria
euphoric
euphrates
eurasia
eureka
euridyce
euripides
europa
europe
european
europium
eurydice
eutectic
euterpe
euthanasia
eva
evacuate
evade
evaluable
evaluate
evanescent
evangel
evangelic
evans
evanston
evansville
evaporate
evasion
evasive
eve
evelyn
even
evenhanded
evensong
event
eventful
eventide
eventual
eventuate
eveready
everett
everglades
evergreen
everhart
everlasting
every
everybody
everyday
everyman
everyone
everything
everywhere
evict
evident
evidential
evil
evildoer
evince
evocable
evocate
evocation
evoke
evolution
evolutionary
evolve
evzone
ewe
ewing
ex
exacerbate
exact
exacter
exaggerate
exalt
exaltation
exam
examination
examine
example
exasperate
exasperater
excavate
exceed
excel
excelled
excellent
excelling
excelsior
except
exception
exceptional
excerpt
excess
excessive
exchange
exchangeable
exchequer
excisable
excise
excision
excitation
excitatory
excite
exciton
exclaim
exclamation
exclamatory
exclude
exclusion
exclusionary
exclusive
excommunicate
excoriate
excrescent
excrete
excretion
excretory
excruciate
exculpate
exculpatory
excursion
excursus
excusable
excuse
execrable
execrate
execute
execution
executive
executor
executrix
exegesis
exegete
exemplar
exemplary
exemplify
exempt
exemption
exercisable
exercise
exert
exeter
exhale
exhaust
exhaustible
exhaustion
exhaustive
exhibit
exhibition
exhibitor
exhilarate
exhort
exhortation
exhumation
exhume
exigent
exile
exist
existent
existential
exit
exodus
exogamous
exogamy
exogenous
exonerate
exorbitant
exorcise
exorcism
exorcist
exoskeleton
exothermic
exotic
exotica
expand
expanse
expansible
expansion
expansive
expatiate
expect
expectant
expectation
expectorant
expectorate
expedient
expedite
expedition
expeditious
expel
expellable
expelled
expelling
expend
expenditure
expense
expensive
experience
experiential
experiment
experimentation
expert
expertise
expiable
expiate
expiration
expire
explain
explanation
explanatory
expletive
explicable
explicate
explicit
explode
exploit
exploitation
exploration
exploratory
explore
explosion
explosive
exponent
exponential
exponentiate
export
exportation
expose
exposit
exposition
expositor
expository
exposure
expound
express
expressible
expression
expressive
expressway
expropriate
expulsion
expunge
expurgate
exquisite
extant
extemporaneous
extempore
extend
extendible
extensible
extension
extensive
extensor
extent
extenuate
exterior
exterminate
external
extinct
extinguish
extirpate
extol
extolled
extoller
extolling
extort
extra
extracellular
extract
extractor
extracurricular
extraditable
extradite
extradition
extralegal
extralinguistic
extramarital
extramural
extraneous
extraordinary
extrapolate
extraterrestrial
extravagant
extravaganza
extrema
extremal
extreme
extremis
extremum
extricable
extricate
extrinsic
extroversion
extrovert
extrude
extrusion
extrusive
exuberant
exudate
exudation
exude
exult
exultant
exultation
exxon
eye
eyeball
eyebright
eyebrow
eyed
eyeful
eyeglass
eyelash
eyelet
eyelid
eyepiece
eyesight
eyesore
eyewitness
ezekiel
ezra
f
faa
faber
fabian
fable
fabric
fabricate
fabulous
facade
face
faceplate
facet
facetious
facial
facile
facilitate
facsimile
fact
factious
facto
factor
factorial
factory
factual
facultative
faculty
fad
fade
fadeout
faery
fafnir
fag
fahey
fahrenheit
fail
failsafe
failsoft
failure
fain
faint
fair
fairchild
fairfax
fairfield
fairgoer
fairport
fairway
fairy
faith
faithful
fake
falcon
falconry
fall
fallacious
fallacy
fallen
fallible
falloff
fallout
fallow
falmouth
false
falsehood
falsify
falstaff
falter
fame
familial
familiar
familiarly
familism
family
famine
famish
famous
fan
fanatic
fanciful
fancy
fanfare
fanfold
fang
fangled
fanny
fanout
fantasia
fantasist
fantastic
fantasy
fantod
far
farad
faraday
farber
farce
farcical
fare
farewell
farfetched
fargo
farina
farkas
farley
farm
farmhouse
farmington
farmland
farnsworth
faro
farrell
farsighted
farther
farthest
fascicle
fasciculate
fascinate
fascism
fascist
fashion
fast
fasten
fastidious
fat
fatal
fate
fateful
father
fathom
fatigue
fatima
fatten
fatty
fatuous
faucet
faulkner
fault
faulty
faun
fauna
faust
faustian
faustus
fawn
fay
fayette
fayetteville
faze
fbi
fcc
fda
fe
fealty
fear
fearful
fearsome
feasible
feast
feat
feather
featherbed
featherbedding
featherbrain
feathertop
featherweight
feathery
feature
feb
febrile
february
fecund
fed
fedders
federal
federate
fedora
fee
feeble
feed
feedback
feel
feeney
feet
feign
feint
feldman
feldspar
felice
felicia
felicitous
felicity
feline
felix
fell
fellow
felon
felonious
felony
felsite
felt
female
feminine
feminism
feminist
femur
fence
fencepost
fend
fennel
fenton
fenugreek
ferber
ferdinand
ferguson
fermat
ferment
fermentation
fermi
fermion
fermium
fern
fernando
fernery
ferocious
ferocity
ferreira
ferrer
ferret
ferric
ferris
ferrite
ferroelectric
ferromagnet
ferromagnetic
ferromagnetism
ferrous
ferruginous
ferrule
ferry
fertile
fervent
fescue
fest
festival
festive
fetal
fetch
fete
fetid
fetish
fetter
fettle
fetus
feud
feudal
feudatory
fever
feverish
few
fiance
fiancee
fiasco
fiat
fib
fiberboard
fiberglas
fibonacci
fibration
fibrin
fibrosis
fibrous
fiche
fickle
fiction
fictitious
fictive
fiddle
fiddlestick
fide
fidelity
fidget
fiducial
fiduciary
fief
fiefdom
field
fields
fieldstone
fieldwork
fiend
fiendish
fierce
fiery
fiesta
fife
fifo
fifteen
fifteenth
fifth
fiftieth
fifty
fig
figaro
fight
figural
figurate
figure
figurine
filament
filamentary
filbert
filch
file
filet
filial
filibuster
filigree
filipino
fill
filled
filler
fillet
fillip
filly
film
filmdom
filmmake
filmstrip
filmy
filter
filth
filthy
filtrate
fin
final
finale
finance
financial
financier
finch
find
fine
finery
finesse
finessed
finessing
finger
fingernail
fingerprint
fingertip
finial
finicky
finish
finitary
finite
fink
finland
finley
finn
finnegan
finnish
finny
fir
fire
firearm
fireboat
firebreak
firebug
firecracker
firefly
firehouse
firelight
fireman
firemen
fireplace
firepower
fireproof
fireside
firestone
firewall
firewood
firework
firm
firmware
first
firsthand
fiscal
fischbein
fischer
fish
fisherman
fishermen
fishery
fishmonger
fishpond
fishy
fisk
fiske
fissile
fission
fissure
fist
fisticuff
fit
fitch
fitchburg
fitful
fitzgerald
fitzpatrick
fitzroy
five
fivefold
fix
fixate
fixture
fizeau
fizzle
fjord
fl
flabbergast
flabby
flack
flag
flagellate
flageolet
flagging
flagler
flagpole
flagrant
flagstaff
flagstone
flail
flair
flak
flake
flaky
flam
flamboyant
flame
flamingo
flammable
flanagan
flanders
flange
flank
flannel
flap
flare
flash
flashback
flashlight
flashy
flask
flat
flatbed
flathead
flatiron
flatland
flatten
flattery
flatulent
flatus
flatware
flatworm
flaunt
flautist
flaw
flax
flaxen
flaxseed
flea
fleabane
fleawort
fleck
fled
fledge
fledgling
flee
fleece
fleeing
fleet
fleming
flemish
flemish
flesh
fleshy
fletch
fletcher
flew
flex
flexible
flexural
flexure
flick
flier
flight
flimsy
flinch
fling
flint
flintlock
flinty
flip
flipflop
flippant
flirt
flirtation
flirtatious
flit
flo
float
floc
flocculate
flock
floe
flog
flogging
flood
floodgate
floodlight
floodlit
floor
floorboard
flop
floppy
flora
floral
florence
florentine
florican
florid
florida
floridian
florin
florist
flotation
flotilla
flounce
flounder
flour
flourish
floury
flout
flow
flowchart
flowerpot
flowery
flown
floyd
flu
flub
fluctuate
flue
fluency
fluent
fluff
fluffy
fluid
fluke
flung
flunk
fluoresce
fluorescein
fluorescent
fluoridate
fluoride
fluorine
fluorite
fluorocarbon
fluorspar
flurry
flush
fluster
flute
flutter
fluvial
flux
fly
flycatcher
flyer
flynn
flyway
fm
fmc
foal
foam
foamflower
foamy
fob
focal
foci
focus
focussed
fodder
foe
fog
fogarty
fogging
foggy
fogy
foible
foil
foist
fold
foldout
foley
foliage
foliate
folio
folk
folklore
folksong
folksy
follicle
follicular
follow
followeth
folly
fomalhaut
fond
fondle
fondly
font
fontaine
fontainebleau
food
foodstuff
fool
foolhardy
foolish
foolproof
foot
footage
football
footbridge
foote
footfall
foothill
footman
footmen
footnote
footpad
footpath
footprint
footstep
footstool
footwear
footwork
fop
foppish
for
forage
foray
forbade
forbear
forbearance
forbes
forbid
forbidden
forbidding
forbore
forborne
force
forceful
forcible
ford
fordham
fore
foregoing
foreign
forensic
forest
forestry
forever
forfeit
forfeiture
forfend
forgave
forge
forgery
forget
forgetful
forgettable
forgetting
forgive
forgiven
forgo
forgot
forgotten
fork
forklift
forlorn
form
formal
formaldehyde
formant
format
formate
formatted
formatting
formic
formica
formidable
formosa
formula
formulae
formulaic
formulate
forrest
forsake
forsaken
forsook
forswear
forsythe
fort
forte
fortescue
forth
forthcome
forthright
forthwith
fortieth
fortify
fortin
fortiori
fortitude
fortnight
fortran
fortran
fortress
fortuitous
fortunate
fortune
forty
forum
forward
forwent
foss
fossil
fossiliferous
foster
fosterite
fought
foul
foulmouth
found
foundation
foundling
foundry
fount
fountain
fountainhead
four
fourfold
fourier
foursome
foursquare
fourteen
fourteenth
fourth
fovea
fowl
fox
foxglove
foxhall
foxhole
foxhound
foxtail
foxy
foyer
fpc
fraction
fractionate
fractious
fracture
fragile
fragment
fragmentary
fragmentation
fragrant
frail
frailty
frambesia
frame
framework
fran
franc
franca
france
frances
franchise
francine
francis
franciscan
francisco
francium
franco
franco
francoise
frangipani
frank
frankel
frankfort
frankfurt
frankfurter
franklin
frantic
franz
fraser
fraternal
fraternity
frau
fraud
fraudulent
fraught
fray
frayed
frazier
frazzle
freak
freakish
freckle
fred
freddie
freddy
frederic
frederick
fredericks
fredericksburg
fredericton
fredholm
fredrickson
free
freeboot
freed
freedman
freedmen
freedom
freehand
freehold
freeing
freeman
freemen
freeport
freer
freest
freestone
freethink
freetown
freeway
freewheel
freeze
freight
french
frenchman
frenchmen
frenetic
frenzy
freon
frequent
fresco
frescoes
fresh
freshen
freshman
freshmen
freshwater
fresnel
fresno
fret
freud
freudian
frey
freya
friable
friar
fricative
frick
friction
frictional
friday
fried
friedman
friedrich
friend
frieze
frigate
frigga
fright
frighten
frightful
frigid
frigidaire
frill
frilly
fringe
frisky
fritillary
fritter
fritz
frivolity
frivolous
frizzle
fro
frock
frog
frolic
from
front
frontage
frontal
frontier
frontiersman
frontiersmen
frost
frostbite
frostbitten
frosty
froth
frothy
frown
frowzy
froze
frozen
fructify
fructose
fruehauf
frugal
fruit
fruitful
fruition
frustrate
frustrater
frustum
fry
frye
ft
ftc
fuchs
fuchsia
fudge
fuel
fugal
fugitive
fugue
fuji
fujitsu
fulcrum
fulfill
full
fullback
fullerton
fully
fulminate
fulsome
fulton
fum
fumble
fume
fumigant
fumigate
fun
function
functionary
functor
functorial
fund
fundamental
fundraise
funeral
funereal
fungal
fungi
fungible
fungicide
fungoid
fungus
funk
funnel
funny
fur
furbish
furious
furl
furlong
furlough
furman
furnace
furnish
furniture
furrier
furrow
furry
further
furtherance
furthermore
furthermost
furthest
furtive
fury
furze
fuse
fuselage
fusible
fusiform
fusillade
fusion
fuss
fussy
fusty
futile
future
fuzz
fuzzy
g
ga
gab
gabardine
gabble
gabbro
gaberones
gable
gabon
gabriel
gabrielle
gad
gadfly
gadget
gadgetry
gadolinium
gadwall
gaelic
gaff
gaffe
gag
gage
gagging
gaggle
gagwriter
gaiety
gail
gaillardia
gain
gaines
gainesville
gainful
gait
gaithersburg
gal
gala
galactic
galactose
galapagos
galatea
galatia
galaxy
galbreath
gale
galen
galena
galenite
galilee
gall
gallagher
gallant
gallantry
gallberry
gallery
galley
gallinule
gallium
gallivant
gallon
gallonage
gallop
galloway
gallows
gallstone
gallup
gallus
galois
galt
galvanic
galvanism
galvanometer
galveston
galway
gam
gambia
gambit
gamble
gambol
game
gamecock
gamesman
gamin
gamma
gamut
gander
gang
ganges
gangland
gangling
ganglion
gangplank
gangster
gangway
gannet
gannett
gantlet
gantry
ganymede
gao
gap
gape
gar
garage
garb
garbage
garble
garcia
garden
gardenia
gardner
garfield
gargantuan
gargle
garibaldi
garish
garland
garlic
garner
garnet
garrett
garrison
garrisonian
garrulous
garry
garter
garth
garvey
gary
gas
gascony
gaseous
gases
gash
gasify
gasket
gaslight
gasohol
gasoline
gasp
gaspee
gassy
gaston
gastrointestinal
gastronome
gastronomy
gate
gatekeep
gates
gateway
gather
gatlinburg
gator
gauche
gaucherie
gaudy
gauge
gaugeable
gauguin
gaul
gauleiter
gaulle
gaunt
gauntlet
gaur
gauss
gaussian
gauze
gave
gavel
gavin
gavotte
gawk
gawky
gay
gaylord
gaze
gazelle
gazette
ge
gear
gecko
gedanken
gee
geese
gegenschein
geiger
geigy
geisha
gel
gelable
gelatin
gelatine
gelatinous
geld
gem
geminate
gemini
gemlike
gemma
gemstone
gender
gene
genealogy
genera
general
generate
generic
generosity
generous
genesco
genesis
genetic
geneva
genevieve
genial
genie
genii
genital
genitive
genius
genoa
genotype
genre
gent
genteel
gentian
gentile
gentility
gentle
gentleman
gentlemen
gentry
genuine
genus
geocentric
geochemical
geochemistry
geochronology
geodesic
geodesy
geodetic
geoduck
geoffrey
geographer
geography
geology
geometer
geometrician
geophysical
geophysics
geopolitic
george
georgetown
georgia
gerald
geraldine
geranium
gerard
gerber
gerbil
gerhard
gerhardt
geriatric
germ
german
germane
germanic
germanium
germantown
germany
germicidal
germicide
germinal
germinate
gerontology
gerry
gershwin
gertrude
gerund
gerundial
gerundive
gestalt
gestapo
gesticulate
gesture
get
getaway
getty
gettysburg
geyser
ghana
ghastly
ghent
gherkin
ghetto
ghost
ghostlike
ghostly
ghoul
ghoulish
giacomo
giant
giantess
gibberish
gibbet
gibbon
gibbons
gibbous
gibbs
gibby
gibe
giblet
gibraltar
gibson
giddap
giddy
gideon
gifford
gift
gig
gigabit
gigabyte
gigacycle
gigahertz
gigaherz
gigantic
gigavolt
gigawatt
gigging
giggle
gil
gila
gilbert
gilbertson
gilchrist
gild
gilead
giles
gill
gillespie
gillette
gilligan
gilmore
gilt
gimbal
gimbel
gimmick
gimmickry
gimpy
gin
gina
ginger
gingham
gingko
ginkgo
ginmill
ginn
gino
ginsberg
ginsburg
ginseng
giovanni
giraffe
gird
girdle
girl
girlie
girlish
girth
gist
giuliano
giuseppe
give
giveaway
given
giveth
glacial
glaciate
glacier
glacis
glad
gladden
gladdy
glade
gladiator
gladiolus
gladstone
gladys
glamor
glamorous
glamour
glance
gland
glandular
glans
glare
glasgow
glass
glassine
glassware
glasswort
glassy
glaswegian
glaucoma
glaucous
glaze
gleam
glean
gleason
glee
gleeful
glen
glenda
glendale
glenn
glib
glidden
glide
glimmer
glimpse
glint
glissade
glisten
glitch
glitter
gloat
glob
global
globe
globular
globule
globulin
glom
glomerular
gloom
gloomy
gloria
gloriana
glorify
glorious
glory
gloss
glossary
glossed
glossolalia
glossy
glottal
glottis
gloucester
glove
glow
glucose
glue
glued
gluey
gluing
glum
glut
glutamate
glutamic
glutamine
glutinous
glutton
glyceride
glycerin
glycerinate
glycerine
glycerol
glycine
glycogen
glycol
glyph
gm
gmt
gnarl
gnash
gnat
gnaw
gneiss
gnome
gnomon
gnomonic
gnostic
gnp
gnu
go
goa
goad
goal
goat
goatherd
gob
gobble
gobbledygook
goblet
god
goddard
goddess
godfather
godfrey
godhead
godkin
godlike
godmother
godparent
godsend
godson
godwin
godwit
goer
goes
goethe
goff
gog
goggle
gogh
gogo
gold
goldberg
golden
goldeneye
goldenrod
goldenseal
goldfinch
goldfish
goldman
goldsmith
goldstein
goldstine
goldwater
goleta
golf
goliath
golly
gondola
gone
gong
goniometer
gonzales
gonzalez
goober
good
goodbye
goode
goodman
goodrich
goodwill
goodwin
goody
goodyear
goof
goofy
goose
gooseberry
gop
gopher
gordian
gordon
gore
goren
gorge
gorgeous
gorgon
gorham
gorilla
gorky
gorse
gorton
gory
gosh
goshawk
gosling
gospel
gossamer
gossip
got
gotham
gothic
gotten
gottfried
goucher
gouda
gouge
gould
gourd
gourmet
gout
govern
governance
governess
governor
gown
gpo
grab
grace
graceful
gracious
grackle
grad
gradate
grade
gradient
gradual
graduate
grady
graff
graft
graham
grail
grain
grainy
grammar
grammarian
grammatic
granary
grand
grandchild
grandchildren
granddaughter
grandeur
grandfather
grandiloquent
grandiose
grandma
grandmother
grandnephew
grandniece
grandpa
grandparent
grandson
grandstand
granite
granitic
granny
granola
grant
grantee
grantor
granular
granulate
granule
granville
grape
grapefruit
grapevine
graph
grapheme
graphic
graphite
grapple
grasp
grass
grassland
grassy
grata
grate
grateful
grater
gratify
gratis
gratitude
gratuitous
gratuity
grave
gravel
graven
graves
gravestone
graveyard
gravid
gravitate
gravy
gray
graybeard
grayish
grayson
graywacke
graze
grease
greasy
great
greatcoat
greater
grebe
grecian
greece
greed
greedy
greek
green
greenbelt
greenberg
greenblatt
greenbriar
greene
greenery
greenfield
greengrocer
greenhouse
greenish
greenland
greensboro
greensward
greenware
greenwich
greenwood
greer
greet
greg
gregarious
gregg
gregory
gremlin
grenade
grendel
grenoble
gresham
greta
gretchen
grew
grey
greyhound
greylag
grid
griddle
gridiron
grief
grievance
grieve
grievous
griffin
griffith
grill
grille
grilled
grillwork
grim
grimace
grimaldi
grime
grimes
grimm
grin
grind
grindstone
grip
gripe
grippe
grisly
grist
gristmill
griswold
grit
gritty
grizzle
grizzly
groan
groat
grocer
grocery
groggy
groin
grommet
groom
groove
grope
grosbeak
gross
grosset
grossman
grosvenor
grotesque
groton
ground
groundsel
groundskeep
groundwork
group
groupoid
grout
grove
grovel
grover
grow
growl
grown
grownup
growth
grub
grubby
grudge
gruesome
gruff
grumble
grumman
grunt
gryphon
gsa
gu
guam
guanidine
guanine
guano
guarantee
guaranteeing
guarantor
guaranty
guard
guardhouse
guardia
guardian
guatemala
gubernatorial
guelph
guenther
guerdon
guernsey
guerrilla
guess
guesswork
guest
guffaw
guggenheim
guiana
guidance
guide
guidebook
guideline
guidepost
guiding
guignol
guild
guildhall
guile
guilford
guillemot
guillotine
guilt
guilty
guinea
guise
guitar
gules
gulf
gull
gullah
gullet
gullible
gully
gulp
gum
gumbo
gumdrop
gummy
gumption
gumshoe
gun
gunderson
gunfight
gunfire
gunflint
gunk
gunky
gunman
gunmen
gunnery
gunny
gunplay
gunpowder
gunshot
gunsling
gunther
gurgle
gurkha
guru
gus
gush
gusset
gust
gustafson
gustav
gustave
gustavus
gusto
gusty
gut
gutenberg
guthrie
gutsy
guttural
guy
guyana
guzzle
gwen
gwyn
gym
gymnasium
gymnast
gymnastic
gymnosperm
gyp
gypsite
gypsum
gypsy
gyrate
gyrfalcon
gyro
gyrocompass
gyroscope
h
ha
haag
haas
habeas
haberdashery
haberman
habib
habit
habitant
habitat
habitation
habitual
habituate
hacienda
hack
hackberry
hackett
hackle
hackmatack
hackney
hackneyed
hacksaw
had
hadamard
haddad
haddock
hades
hadley
hadrian
hadron
hafnium
hagen
hager
haggard
haggle
hagstrom
hague
hahn
haifa
haiku
hail
hailstone
hailstorm
haines
hair
haircut
hairdo
hairpin
hairy
haiti
haitian
hal
halcyon
hale
haley
half
halfback
halfhearted
halfway
halibut
halide
halifax
halite
hall
hallelujah
halley
hallmark
hallow
halloween
hallucinate
hallway
halma
halo
halocarbon
halogen
halpern
halsey
halstead
halt
halvah
halve
halverson
ham
hamal
hamburg
hamburger
hamilton
hamlet
hamlin
hammerhead
hammock
hammond
hamper
hampshire
hampton
hamster
han
hancock
hand
handbag
handbook
handclasp
handcuff
handel
handful
handgun
handhold
handicap
handicapped
handicapper
handicapping
handicraft
handicraftsman
handicraftsmen
handiwork
handkerchief
handle
handleable
handlebar
handline
handmade
handmaiden
handout
handset
handshake
handsome
handspike
handstand
handwaving
handwrite
handwritten
handy
handyman
handymen
haney
hanford
hang
hangable
hangar
hangman
hangmen
hangout
hangover
hank
hankel
hanley
hanlon
hanna
hannah
hannibal
hanoi
hanover
hanoverian
hans
hansel
hansen
hansom
hanson
hanukkah
hap
haphazard
haploid
haploidy
haplology
happen
happenstance
happy
hapsburg
harangue
harass
harbin
harbinger
harcourt
hard
hardbake
hardboard
hardboiled
hardcopy
harden
hardhat
hardin
harding
hardscrabble
hardtack
hardtop
hardware
hardwood
hardworking
hardy
hare
harelip
harem
hark
harlan
harlem
harley
harm
harmful
harmon
harmonic
harmonica
harmonious
harmony
harness
harold
harp
harpoon
harpsichord
harpy
harriet
harriman
harrington
harris
harrisburg
harrison
harrow
harry
harsh
harshen
hart
hartford
hartley
hartman
harvard
harvest
harvestman
harvey
hash
hashish
hasp
hassle
hast
haste
hasten
hastings
hasty
hat
hatch
hatchet
hatchway
hate
hateful
hater
hatfield
hath
hathaway
hatred
hatteras
hattie
hattiesburg
haugen
haughty
haul
haulage
haunch
haunt
hausdorff
havana
have
haven
havilland
havoc
haw
hawaii
hawaiian
hawk
hawkins
hawley
hawthorn
hawthorne
hay
hayden
haydn
hayes
hayfield
haynes
hays
haystack
hayward
hayward
hazard
hazardous
haze
hazel
hazelnut
hazy
he
head
headache
headboard
headdress
headland
headlight
headline
headmaster
headphone
headquarter
headquarters
headroom
headset
headsman
headsmen
headstand
headstone
headstrong
headwall
headwater
headway
headwind
heady
heal
healey
health
healthful
healthy
healy
heap
hear
heard
hearken
hearsay
hearse
hearst
heart
heartbeat
heartbreak
hearten
heartfelt
hearth
hearty
heat
heater
heath
heathen
heathenish
heathkit
heave
heaven
heavenward
heavy
heavyweight
hebe
hebephrenic
hebraic
hebrew
hecate
hecatomb
heck
heckle
heckman
hectic
hector
hecuba
hedge
hedgehog
hedonism
hedonist
heed
heel
heft
hefty
hegelian
hegemony
heidelberg
heigh
height
heighten
heine
heinrich
heinz
heir
heiress
heisenberg
held
helen
helena
helene
helga
helical
helicopter
heliocentric
heliotrope
helium
helix
hell
hellbender
hellebore
hellenic
hellfire
hellgrammite
hellish
hello
helm
helmet
helmholtz
helmsman
helmsmen
helmut
help
helpful
helpmate
helsinki
helvetica
hem
hematite
hemingway
hemisphere
hemispheric
hemlock
hemoglobin
hemolytic
hemorrhage
hemorrhoid
hemosiderin
hemp
hempstead
hen
henbane
hence
henceforth
henchman
henchmen
henderson
hendrick
hendricks
hendrickson
henequen
henley
henpeck
henri
henrietta
henry
hepatica
hepatitis
hepburn
heptane
her
hera
heraclitus
herald
herb
herbert
herculean
hercules
herd
herdsman
here
hereabout
hereafter
hereby
hereditary
heredity
hereford
herein
hereinabove
hereinafter
hereinbelow
hereof
heresy
heretic
hereto
heretofore
hereunder
hereunto
herewith
heritable
heritage
herkimer
herman
hermann
hermeneutic
hermes
hermetic
hermite
hermitian
hermosa
hernandez
hero
herodotus
heroes
heroic
heroin
heroine
heroism
heron
herpes
herpetology
herr
herringbone
herschel
herself
hershel
hershey
hertz
hertzog
hesitant
hesitate
hesitater
hesperus
hess
hesse
hessian
hester
heterocyclic
heterodyne
heterogamous
heterogeneity
heterogeneous
heterosexual
heterostructure
heterozygous
hetman
hettie
hetty
heublein
heuristic
heusen
heuser
hew
hewett
hewitt
hewlett
hewn
hex
hexachloride
hexadecimal
hexafluoride
hexagon
hexagonal
hexameter
hexane
hey
heyday
hi
hiatt
hiatus
hiawatha
hibachi
hibbard
hibernate
hibernia
hick
hickey
hickman
hickory
hicks
hid
hidalgo
hidden
hide
hideaway
hideous
hideout
hierarchal
hierarchic
hierarchy
hieratic
hieroglyphic
hieronymus
hifalutin
higgins
high
highball
highboy
highest
highfalutin
highhanded
highland
highlight
highroad
hightail
highway
highwayman
highwaymen
hijack
hijinks
hike
hilarious
hilarity
hilbert
hildebrand
hill
hillbilly
hillcrest
hillel
hillman
hillmen
hillock
hillside
hilltop
hilly
hilt
hilton
hilum
him
himalaya
himself
hind
hindmost
hindrance
hindsight
hindu
hinduism
hines
hinge
hinman
hint
hinterland
hip
hippo
hippocrates
hippocratic
hippodrome
hippopotamus
hippy
hipster
hiram
hire
hireling
hiroshi
hiroshima
hirsch
hirsute
his
hispanic
hiss
histamine
histidine
histochemic
histochemistry
histogram
histology
historian
historic
historiography
history
histrionic
hit
hitachi
hitch
hitchcock
hither
hitherto
hitler
hive
ho
hoagie
hoagland
hoagy
hoar
hoard
hoarfrost
hoarse
hob
hobart
hobbes
hobble
hobbs
hobby
hobbyhorse
hobgoblin
hobo
hoboken
hoc
hock
hockey
hocus
hodge
hodgepodge
hodges
hodgkin
hoe
hoff
hoffman
hog
hogan
hogging
hoi
hokan
holbrook
holcomb
hold
holden
holdout
holdover
holdup
hole
holeable
holiday
holland
hollandaise
holler
hollerith
hollingsworth
hollister
hollow
holloway
hollowware
holly
hollyhock
hollywood
holm
holman
holmdel
holmes
holmium
holocaust
holocene
hologram
holography
holst
holstein
holster
holt
holyoke
holystone
hom
homage
home
homebound
homebuild
homebuilder
homebuilding
homecome
homecoming
homeland
homemade
homemake
homeomorph
homeomorphic
homeopath
homeostasis
homeown
homeowner
homeric
homesick
homestead
homeward
homework
homicidal
homicide
homily
homo
homogenate
homogeneity
homogeneous
homologous
homologue
homology
homomorphic
homomorphism
homonym
homophobia
homosexual
homotopy
homozygous
homunculus
honda
hondo
honduras
hone
honest
honesty
honey
honeybee
honeycomb
honeydew
honeymoon
honeysuckle
honeywell
hong
honk
honolulu
honoraria
honorarium
honorary
honoree
honorific
honshu
hooch
hood
hoodlum
hoof
hoofmark
hook
hookup
hookworm
hooligan
hoop
hoopla
hoosegow
hoosier
hoot
hoover
hooves
hop
hope
hopeful
hopkins
hopkinsian
hopple
hopscotch
horace
horatio
horde
horehound
horizon
horizontal
hormone
horn
hornbeam
hornblende
hornblower
hornet
hornmouth
horntail
hornwort
horny
horology
horoscope
horowitz
horrendous
horrible
horrid
horrify
horror
horse
horseback
horsedom
horseflesh
horsefly
horsehair
horseman
horsemen
horseplay
horsepower
horseshoe
horsetail
horsewoman
horsewomen
horticulture
horton
horus
hose
hosiery
hospice
hospitable
hospital
host
hostage
hostelry
hostess
hostile
hostler
hot
hotbed
hotbox
hotel
hotelman
hothead
hothouse
hotrod
hotshot
houdaille
houdini
hough
houghton
hound
hour
hourglass
house
houseboat
housebreak
housebroken
housefly
household
housekeep
housewares
housewife
housewives
housework
houston
hove
hovel
hover
how
howard
howdy
howe
howell
however
howl
howsoever
howsomever
hoy
hoyden
hoydenish
hoyt
hrothgar
hub
hubbard
hubbell
hubbub
hubby
huber
hubert
hubris
huck
huckleberry
huckster
huddle
hudson
hue
hued
huff
huffman
hug
huge
hugging
huggins
hugh
hughes
hugo
huh
hulk
hull
hum
human
humane
humanitarian
humanoid
humble
humboldt
humerus
humid
humidify
humidistat
humiliate
humility
hummel
hummingbird
hummock
humorous
hump
humpback
humphrey
humpty
humus
hun
hunch
hundred
hundredfold
hundredth
hung
hungarian
hungary
hungry
hunk
hunt
hunter
huntington
huntley
huntsville
hurd
hurdle
hurl
hurley
huron
hurrah
hurray
hurricane
hurry
hurst
hurt
hurtle
hurty
hurwitz
husband
husbandman
husbandmen
husbandry
hush
husky
hustle
huston
hut
hutch
hutchins
hutchinson
hutchison
huxley
huxtable
huzzah
hyacinth
hyades
hyaline
hyannis
hybrid
hyde
hydra
hydrangea
hydrant
hydrate
hydraulic
hydride
hydro
hydrocarbon
hydrochemistry
hydrochloric
hydrochloride
hydrodynamic
hydroelectric
hydrofluoric
hydrogen
hydrogenate
hydrology
hydrolysis
hydrometer
hydronium
hydrophilic
hydrophobia
hydrophobic
hydrosphere
hydrostatic
hydrothermal
hydrous
hydroxide
hydroxy
hydroxyl
hydroxylate
hyena
hygiene
hygrometer
hygroscopic
hying
hyman
hymen
hymn
hymnal
hyperbola
hyperbolic
hyperboloid
hyperboloidal
hypertensive
hyphen
hyphenate
hypnosis
hypnotic
hypoactive
hypochlorite
hypochlorous
hypocrisy
hypocrite
hypocritic
hypocritical
hypocycloid
hypodermic
hypophyseal
hypotenuse
hypothalamic
hypothalamus
hypotheses
hypothesis
hypothetic
hypothyroid
hysterectomy
hysteresis
hysteria
hysteric
hysteron
i
ia
iambic
ian
iberia
ibex
ibid
ibis
ibm
ibn
icarus
icc
ice
iceberg
icebox
iceland
iceland
icelandic
ichneumon
icicle
icky
icon
iconic
iconoclasm
iconoclast
icosahedra
icosahedral
icosahedron
icy
id
ida
idaho
idea
ideal
ideate
idempotent
identical
identify
identity
ideolect
ideologue
ideology
idiocy
idiom
idiomatic
idiosyncrasy
idiosyncratic
idiot
idiotic
idle
idol
idolatry
idyll
idyllic
ieee
if
iffy
ifni
igloo
igneous
ignite
ignition
ignoble
ignominious
ignoramus
ignorant
ignore
igor
ii
iii
ike
il
ileum
iliac
iliad
ill
illegal
illegible
illegitimacy
illegitimate
illicit
illimitable
illinois
illiteracy
illiterate
illogic
illume
illuminate
illumine
illusion
illusionary
illusive
illusory
illustrate
illustrious
ilona
ilyushin
image
imagen
imagery
imaginary
imaginate
imagine
imbalance
imbecile
imbibe
imbrium
imbroglio
imbrue
imbue
imitable
imitate
immaculate
immanent
immaterial
immature
immeasurable
immediacy
immediate
immemorial
immense
immerse
immersion
immigrant
immigrate
imminent
immiscible
immobile
immobility
immoderate
immodest
immodesty
immoral
immortal
immovable
immune
immunization
immunoelectrophoresis
immutable
imp
impact
impair
impale
impalpable
impart
impartation
impartial
impassable
impasse
impassion
impassive
impatient
impeach
impeccable
impedance
impede
impediment
impel
impelled
impeller
impelling
impend
impenetrable
imperate
imperative
imperceivable
imperceptible
imperfect
imperial
imperil
imperious
imperishable
impermeable
impermissible
impersonal
impersonate
impertinent
imperturbable
impervious
impetuous
impetus
impiety
impinge
impious
impish
implacable
implant
implantation
implausible
implement
implementation
implementer
implementor
implicant
implicate
implicit
implode
implore
implosion
impolite
impolitic
imponderable
import
important
importation
importunate
importune
impose
imposition
impossible
impost
imposture
impotent
impound
impoverish
impracticable
impractical
imprecate
imprecise
imprecision
impregnable
impregnate
impresario
impress
impressible
impression
impressive
imprimatur
imprint
imprison
improbable
impromptu
improper
impropriety
improve
improvident
improvisate
improvisation
improvise
imprudent
impudent
impugn
impulse
impulsive
impunity
impure
imputation
impute
in
inability
inaccessible
inaccuracy
inaccurate
inaction
inactivate
inactive
inadequacy
inadequate
inadmissible
inadvertent
inadvisable
inalienable
inalterable
inane
inanimate
inappeasable
inapplicable
inappreciable
inapproachable
inappropriate
inapt
inaptitude
inarticulate
inasmuch
inattention
inattentive
inaudible
inaugural
inaugurate
inauspicious
inboard
inborn
inbred
inbreed
inc
inca
incalculable
incandescent
incant
incantation
incapable
incapacitate
incapacity
incarcerate
incarnate
incaution
incautious
incendiary
incense
incentive
inception
inceptor
incessant
incest
incestuous
inch
incident
incidental
incinerate
incipient
incise
incisive
incite
inclement
inclination
incline
inclose
include
inclusion
inclusive
incoherent
incombustible
income
incommensurable
incommensurate
incommunicable
incommutable
incomparable
incompatible
incompetent
incomplete
incompletion
incomprehensible
incomprehension
incompressible
incomputable
inconceivable
inconclusive
incondensable
incongruity
incongruous
inconsequential
inconsiderable
inconsiderate
inconsistent
inconsolable
inconspicuous
inconstant
incontestable
incontrollable
incontrovertible
inconvenient
inconvertible
incorporable
incorporate
incorrect
incorrigible
incorruptible
increasable
increase
incredible
incredulity
incredulous
increment
incriminate
incubate
incubi
incubus
inculcate
inculpable
incumbent
incur
incurred
incurrer
incurring
incursion
indebted
indecent
indecipherable
indecision
indecisive
indecomposable
indeed
indefatigable
indefensible
indefinable
indefinite
indelible
indelicate
indemnify
indemnity
indent
indentation
indenture
independent
indescribable
indestructible
indeterminable
indeterminacy
indeterminate
index
india
indian
indiana
indianapolis
indicant
indicate
indices
indict
indicter
indies
indifferent
indigene
indigenous
indigent
indigestible
indigestion
indignant
indignation
indignity
indigo
indira
indirect
indiscernible
indiscoverable
indiscreet
indiscretion
indiscriminate
indispensable
indispose
indisposition
indisputable
indissoluble
indistinct
indistinguishable
indium
individual
individualism
individuate
indivisible
indochina
indochinese
indoctrinate
indoeuropean
indolent
indomitable
indonesia
indoor
indorse
indubitable
induce
inducible
induct
inductance
inductee
inductor
indulge
indulgent
industrial
industrialism
industrious
industry
indwell
indy
ineducable
ineffable
ineffective
ineffectual
inefficacy
inefficient
inelastic
inelegant
ineligible
ineluctable
inept
inequality
inequitable
inequity
inequivalent
ineradicable
inert
inertance
inertia
inertial
inescapable
inestimable
inevitable
inexact
inexcusable
inexhaustible
inexorable
inexpedient
inexpensive
inexperience
inexpert
inexpiable
inexplainable
inexplicable
inexplicit
inexpressible
inextinguishable
inextricable
infallible
infamous
infamy
infancy
infant
infantile
infantry
infantryman
infantrymen
infarct
infatuate
infeasible
infect
infectious
infelicitous
infelicity
infer
inference
inferential
inferior
infernal
inferno
inferred
inferring
infertile
infest
infestation
infidel
infield
infight
infighting
infiltrate
infima
infimum
infinite
infinitesimal
infinitive
infinitude
infinitum
infinity
infirm
infirmary
infix
inflame
inflammable
inflammation
inflammatory
inflate
inflater
inflationary
inflect
inflexible
inflict
inflicter
inflow
influence
influent
influential
influenza
influx
info
inform
informal
informant
informatica
information
informative
infra
infract
infrared
infrastructure
infrequent
infringe
infuriate
infuse
infusible
infusion
ingather
ingenious
ingenuity
ingenuous
ingersoll
ingest
ingestible
ingestion
inglorious
ingot
ingram
ingrate
ingratiate
ingratitude
ingredient
ingrown
inhabit
inhabitant
inhabitation
inhalation
inhale
inharmonious
inhere
inherent
inherit
inheritance
inheritor
inhibit
inhibition
inhibitor
inhibitory
inholding
inhomogeneity
inhomogeneous
inhospitable
inhuman
inhumane
inimical
inimitable
iniquitous
iniquity
initial
initiate
inject
injudicious
injun
injunct
injunction
injure
injurious
injury
injustice
ink
inkling
inlaid
inland
inlay
inlet
inman
inmate
inn
innards
innate
inner
innermost
innkeeper
innocent
innocuous
innovate
innuendo
innumerable
inoculate
inoffensive
inoperable
inoperative
inopportune
inordinate
inorganic
input
inputting
inquest
inquire
inquiry
inquisition
inquisitive
inquisitor
inroad
insane
insatiable
inscribe
inscription
inscrutable
insect
insecticide
insecure
inseminate
insensible
insensitive
inseparable
insert
inset
inshore
inside
insidious
insight
insightful
insignia
insignificant
insincere
insinuate
insipid
insist
insistent
insofar
insolent
insoluble
insolvable
insolvent
insomnia
insomniac
insouciant
inspect
inspector
inspiration
inspire
instable
install
installation
instalment
instance
instant
instantaneous
instantiate
instead
instep
instigate
instill
instillation
instinct
instinctual
institute
institution
instruct
instructor
instrument
instrumentation
insubordinate
insubstantial
insufferable
insufficient
insular
insulate
insulin
insult
insuperable
insupportable
insuppressible
insurance
insure
insurgent
insurmountable
insurrect
insurrection
intact
intake
intangible
integer
integrable
integral
integrand
integrate
integrity
integument
intellect
intellectual
intelligent
intelligentsia
intelligible
intemperance
intemperate
intend
intendant
intense
intensify
intensive
intent
intention
inter
intercalate
intercept
interception
interceptor
intercom
interdict
interest
interfere
interference
interferometer
interim
interior
interject
interlude
intermediary
intermit
intermittent
intern
internal
internecine
internescine
interpol
interpolant
interpolate
interpolatory
interpret
interpretation
interpretive
interregnum
interrogate
interrogatory
interrupt
interruptible
interruption
intersect
intersperse
interstice
interstitial
interval
intervene
intervenor
intervention
interviewee
intestate
intestinal
intestine
intimacy
intimal
intimate
intimater
intimidate
into
intolerable
intolerant
intonate
intone
intoxicant
intoxicate
intractable
intramolecular
intransigent
intransitive
intrepid
intricacy
intricate
intrigue
intrinsic
introduce
introduction
introductory
introit
introject
introspect
introversion
introvert
intrude
intrusion
intrusive
intuit
intuitable
intuition
intuitive
inundate
inure
invade
invalid
invalidate
invaluable
invariable
invariant
invasion
invasive
invective
inveigh
inveigle
invent
invention
inventive
inventor
inventory
inverness
inverse
inversion
invert
invertebrate
invertible
invest
investigate
investigatory
investor
inveterate
inviable
invidious
invigorate
invincible
inviolable
inviolate
invisible
invitation
invite
invitee
invocate
invoice
invoke
involuntary
involute
involution
involutorial
involutory
involve
invulnerable
inward
io
iodate
iodide
iodinate
iodine
ion
ionic
ionosphere
ionospheric
iota
iowa
ipecac
ipsilateral
ipso
iq
ir
ira
iran
iranian
iraq
irate
ire
ireland
irene
iridium
iris
irish
irishman
irishmen
irk
irksome
irma
iron
ironic
ironside
ironstone
ironwood
irony
iroquois
irradiate
irrational
irrawaddy
irreclaimable
irreconcilable
irrecoverable
irredeemable
irredentism
irredentist
irreducible
irrefutable
irregular
irrelevancy
irrelevant
irremediable
irremovable
irreparable
irreplaceable
irrepressible
irreproachable
irreproducible
irresistible
irresolute
irresolution
irresolvable
irrespective
irresponsible
irretrievable
irreverent
irreversible
irrevocable
irrigate
irritable
irritant
irritate
irruption
irs
irvin
irvine
irving
irwin
is
isaac
isaacson
isabel
isabella
isadore
isaiah
isentropic
isfahan
ising
isinglass
isis
islam
islamabad
islamic
island
isle
isochronal
isochronous
isocline
isolate
isolde
isomer
isomorph
isomorphic
isopleth
isotherm
isothermal
isotope
isotopic
isotropic
isotropy
israel
israeli
israelite
issuance
issuant
issue
istanbul
istvan
it
it&t
italian
italic
italy
itch
item
iterate
ithaca
itinerant
itinerary
ito
itself
itt
iv
ivan
ivanhoe
iverson
ivory
ivy
ix
izvestia
j
jab
jablonsky
jack
jackanapes
jackass
jackboot
jackdaw
jacket
jackie
jackknife
jackman
jackpot
jackson
jacksonian
jacksonville
jacky
jacm
jacob
jacobean
jacobi
jacobian
jacobite
jacobs
jacobsen
jacobson
jacobus
jacqueline
jacques
jade
jaeger
jag
jagging
jaguar
jail
jaime
jakarta
jake
jake
jalopy
jam
jamaica
jamboree
james
jamestown
jan
jane
janeiro
janet
jangle
janice
janissary
janitor
janitorial
janos
jansenist
january
janus
japan
japanese
jar
jargon
jarvin
jason
jasper
jaundice
jaunty
java
javelin
jaw
jawbone
jawbreak
jay
jazz
jazzy
jealous
jealousy
jean
jeannie
jed
jeep
jeff
jefferson
jeffersonian
jeffrey
jehovah
jejune
jejunum
jelly
jellyfish
jenkins
jennie
jennifer
jennings
jenny
jensen
jeopard
jeopardy
jeremiah
jeremy
jeres
jericho
jerk
jerky
jeroboam
jerome
jerry
jersey
jerusalem
jess
jesse
jessica
jessie
jest
jesuit
jesus
jet
jetliner
jettison
jew
jewel
jewell
jewelry
jewett
jewish
jibe
jiffy
jig
jigging
jiggle
jigsaw
jill
jilt
jim
jimenez
jimmie
jimmy
jingle
jinx
jitter
jitterbug
jitterbugger
jitterbugging
jittery
jive
jo
joan
joanna
joanne
joaquin
job
jobholder
jock
jockey
jockstrap
jocose
jocular
jocund
joe
joel
joey
jog
jogging
joggle
johann
johannes
johannesburg
johansen
johanson
john
johnny
johns
johnsen
johnson
johnston
johnstown
join
joint
joke
joliet
jolla
jolly
jolt
jon
jonas
jonathan
jones
jonquil
jordan
jorge
jorgensen
jorgenson
jose
josef
joseph
josephine
josephson
josephus
joshua
josiah
joss
jostle
jot
joule
jounce
journal
journalese
journey
journeyman
journeymen
joust
jovanovich
jove
jovial
jovian
jowl
jowly
joy
joyce
joyful
joyous
joyride
joystick
jr
juan
juanita
jubilant
jubilate
jubilee
judaism
judas
judd
jude
judge
judicable
judicatory
judicature
judicial
judiciary
judicious
judith
judo
judson
judy
jug
jugate
jugging
juggle
jugoslavia
juice
juicy
juju
jujube
juke
jukes
julep
jules
julia
julie
juliet
julio
julius
july
jumble
jumbo
jump
jumpy
junco
junction
junctor
juncture
june
juneau
jungle
junior
juniper
junk
junkerdom
junketeer
junky
juno
junta
jupiter
jura
jurassic
jure
juridic
jurisdiction
jurisprudent
jurisprudential
juror
jury
just
justice
justiciable
justify
justine
justinian
jut
jute
jutish
juvenile
juxtapose
juxtaposition
k
kabuki
kabul
kaddish
kafka
kafkaesque
kahn
kaiser
kajar
kalamazoo
kale
kaleidescope
kaleidoscope
kalmia
kalmuk
kamchatka
kamikaze
kampala
kane
kangaroo
kankakee
kansas
kant
kaolin
kaolinite
kaplan
kapok
kappa
karachi
karamazov
karate
karen
karl
karma
karol
karp
karyatid
kaskaskia
kate
katharine
katherine
kathleen
kathy
katie
katmandu
katowice
katz
kauffman
kaufman
kava
kay
kayo
kazoo
keaton
keats
keddah
keel
keelson
keen
keenan
keep
keeshond
keg
keith
keller
kelley
kellogg
kelly
kelly
kelp
kelsey
kelvin
kemp
ken
kendall
kennan
kennecott
kennedy
kennel
kenneth
kenney
keno
kensington
kent
kenton
kentucky
kenya
kenyon
kepler
kept
kerchief
kermit
kern
kernel
kernighan
kerosene
kerr
kerry
kerygma
kessler
kestrel
ketch
ketchup
ketone
ketosis
kettering
kettle
kevin
key
keyboard
keyed
keyes
keyhole
keynes
keynesian
keynote
keypunch
keys
keystone
keyword
khaki
khan
khartoum
khmer
khrushchev
kibbutzim
kibitz
kick
kickback
kickoff
kid
kidde
kiddie
kidnap
kidnapped
kidnapping
kidney
kieffer
kiev
kiewit
kigali
kikuyu
kilgore
kill
killdeer
killjoy
kilo
kilohm
kim
kimball
kimberly
kimono
kin
kind
kindergarten
kindle
kindred
kinematic
kinesic
kinesthesis
kinetic
king
kingbird
kingdom
kingfisher
kinglet
kingpin
kingsbury
kingsley
kingston
kink
kinky
kinney
kinshasha
kiosk
kiowa
kipling
kirby
kirchner
kirchoff
kirk
kirkland
kirkpatrick
kirov
kiss
kissing
kit
kitakyushu
kitchen
kitchenette
kite
kitten
kittenish
kittle
kitty
kiva
kivu
kiwanis
kiwi
klan
klaus
klaxon
kleenex
klein
kline
klux
klystron
knack
knapp
knapsack
knauer
knead
knee
kneecap
kneel
knell
knelt
knew
knick
knickerbocker
knife
knifelike
knight
knightsbridge
knit
knives
knob
knobby
knock
knockdown
knockout
knoll
knot
knott
knotty
know
knoweth
knowhow
knowledge
knowledgeable
knowles
knowlton
known
knox
knoxville
knuckle
knuckleball
knudsen
knudson
knurl
knutsen
knutson
koala
kobayashi
koch
kochab
kodachrome
kodak
kodak
kodiak
koenig
koenigsberg
kohlrabi
koinonia
kola
kolkhoz
kombu
kong
konrad
koppers
koran
korea
kosher
kovacs
kowalewski
kowalski
kowloon
kraft
krakatoa
krakow
kramer
krause
kraut
krebs
kremlin
kresge
krieger
krishna
kristin
kronecker
krueger
kruger
kruse
krypton
ks
ku
kudo
kudzu
kuhn
kulak
kumquat
kurd
kurt
kuwait
kwashiorkor
ky
kyle
kyoto
l
la
lab
laban
label
labia
labial
labile
lability
laboratory
laborious
labour
labrador
labradorite
labyrinth
lac
lace
lacerate
lacerta
lacewing
lachesis
lack
lackadaisic
lackey
lackluster
laconic
lacquer
lacrosse
lactate
lactose
lacuna
lacunae
lacustrine
lacy
lad
laden
ladle
lady
ladyfern
ladylike
lafayette
lag
lager
lagging
lagoon
lagos
lagrange
lagrangian
laguerre
lahore
laid
laidlaw
lain
lair
laissez
laity
lake
lakehurst
lakeside
lam
lamar
lamarck
lamb
lambda
lambert
lame
lamellar
lament
lamentation
laminar
laminate
lamp
lampblack
lamplight
lampoon
lamprey
lana
lancashire
lancaster
lance
land
landau
landfill
landhold
landis
landlord
landmark
landowner
landscape
landslide
lane
lang
lange
langley
langmuir
language
languid
languish
lank
lanka
lanky
lansing
lantern
lanthanide
lanthanum
lao
laocoon
laos
laotian
lap
lapel
lapelled
lapidary
laplace
laplacian
lappet
lapse
laramie
larceny
larch
lard
laredo
lares
large
largemouth
largesse
lariat
lark
larkin
larkspur
larry
lars
larsen
larson
larva
larvae
larval
laryngeal
larynges
larynx
lascar
lascivious
lase
lash
lass
lasso
last
laszlo
latch
late
latent
later
latera
lateral
lateran
laterite
latex
lath
lathe
lathrop
latin
latinate
latitude
latitudinal
latitudinary
latrobe
latter
lattice
latus
latvia
laud
laudanum
laudatory
lauderdale
laue
laugh
laughingstock
laughlin
laughter
launch
launder
laundry
laura
laureate
laurel
lauren
laurence
laurent
laurentian
laurie
lausanne
lava
lavabo
lavatory
lavender
lavish
lavoisier
law
lawbreak
lawbreaker
lawbreaking
lawful
lawgive
lawgiver
lawgiving
lawmake
lawman
lawmen
lawn
lawrence
lawrencium
lawson
lawsuit
lawyer
lax
laxative
lay
layette
layman
laymen
layoff
layout
layton
layup
lazarus
laze
lazy
lazybones
lea
leach
leachate
lead
leaden
leadeth
leadsman
leadsmen
leaf
leaflet
leafy
league
leak
leakage
leaky
lean
leander
leap
leapfrog
leapt
lear
learn
lease
leasehold
leash
least
leather
leatherback
leatherneck
leatherwork
leathery
leave
leaven
leavenworth
lebanese
lebanon
lebensraum
lebesgue
lecher
lechery
lectern
lectionary
lecture
led
ledge
lee
leech
leeds
leek
leer
leery
leeuwenhoek
leeward
leeway
left
leftmost
leftover
leftward
lefty
leg
legacy
legal
legate
legatee
legato
legend
legendary
legendre
legerdemain
legging
leggy
leghorn
legible
legion
legislate
legislature
legitimacy
legitimate
legume
leguminous
lehigh
lehman
leigh
leighton
leila
leisure
leitmotif
leitmotiv
leland
lemma
lemming
lemon
lemonade
lemuel
len
lena
lend
length
lengthen
lengthwise
lengthy
lenient
lenin
leningrad
leninism
leninist
lennox
lenny
lenore
lens
lent
lenten
lenticular
lentil
leo
leon
leona
leonard
leonardo
leone
leonid
leonine
leopard
leopold
leper
lepidolite
leprosy
leroy
lesbian
lesbian
lesion
leslie
lesotho
less
lessee
lessen
lesson
lessor
lest
lester
let
lethal
lethargic
lethargy
lethe
letitia
letterhead
letterman
lettermen
lettuce
leucine
leukemia
lev
levee
level
lever
leverage
levi
levin
levine
levis
levitate
leviticus
levitt
levity
levulose
levy
lew
lew
lewd
lewis
lexical
lexicography
lexicon
lexington
leyden
liable
liaison
liar
libation
libel
libelous
liberal
liberate
liberia
libertarian
libertine
liberty
libidinous
libido
librarian
library
librate
librettist
libretto
libreville
libya
lice
licensable
licensee
licensor
licentious
lichen
lick
licorice
lid
lie
liechtenstein
lied
lien
lieu
lieutenant
life
lifeblood
lifeboat
lifeguard
lifelike
lifelong
lifespan
lifestyle
lifetime
lifo
lift
ligament
ligand
ligature
ligget
liggett
light
lighten
lightface
lighthearted
lighthouse
lightning
lightproof
lightweight
lignite
lignum
like
liken
likewise
lila
lilac
lilian
lillian
lilliputian
lilly
lilt
lily
lim
lima
limb
limbic
limbo
lime
limelight
limerick
limestone
limit
limitate
limitation
limousine
limp
limpet
limpid
limpkin
lin
lincoln
lind
linda
lindberg
lindbergh
linden
lindholm
lindquist
lindsay
lindsey
lindstrom
line
lineage
lineal
linear
linebacker
lineman
linemen
linen
lineprinter
lineup
linger
lingerie
lingo
lingua
lingual
linguist
liniment
link
linkage
linoleum
linotype
linseed
lint
linus
lion
lionel
lioness
lip
lipid
lippincott
lipread
lipschitz
lipscomb
lipstick
lipton
liquefaction
liquefy
liqueur
liquid
liquidate
liquidus
liquor
lisa
lisbon
lise
lisle
lisp
lissajous
list
listen
lit
litany
literacy
literal
literary
literate
literature
lithe
lithic
lithium
lithograph
lithography
lithology
lithosphere
lithospheric
lithuania
litigant
litigate
litigious
litmus
litterbug
little
littleneck
littleton
litton
littoral
liturgic
liturgy
live
liven
livermore
liverpool
liverpudlian
liverwort
livery
livestock
liveth
livid
livingston
livre
liz
lizard
lizzie
lloyd
lo
load
loaf
loam
loamy
loan
loath
loathe
loathsome
loaves
lob
lobar
lobby
lobe
loblolly
lobo
lobotomy
lobscouse
lobster
lobular
lobule
local
locale
locate
loci
lock
locke
lockhart
lockheed
lockian
locknut
lockout
locksmith
lockstep
lockup
lockwood
locomote
locomotion
locomotive
locomotor
locomotory
locoweed
locus
locust
locution
locutor
lodestone
lodge
lodgepole
lodowick
loeb
loess
loft
lofty
log
logan
logarithm
logarithmic
loge
loggerhead
logging
logic
logician
logistic
logjam
logo
loin
loincloth
loire
lois
loiter
loki
lola
loll
lollipop
lolly
lomb
lombard
lombardy
lome
london
lone
lonesome
long
longevity
longfellow
longhand
longhorn
longish
longitude
longitudinal
longleg
longstanding
longtime
longue
look
lookout
lookup
loom
loomis
loon
loop
loophole
loose
looseleaf
loosen
loosestrife
loot
lop
lope
lopez
lopseed
lopsided
loquacious
loquacity
loquat
lord
lordosis
lore
lorelei
loren
lorenz
loretta
lorinda
lorraine
los
losable
lose
loss
lossy
lost
lot
lotion
lotte
lottery
lottie
lotus
lou
loud
loudspeak
loudspeaker
loudspeaking
louis
louisa
louise
louisiana
louisville
lounge
lounsbury
lourdes
louse
lousewort
lousy
louver
louvre
love
lovebird
lovelace
loveland
lovelorn
low
lowboy
lowdown
lowe
lowell
lower
lowland
lowry
loy
loyal
loyalty
lozenge
lsi
ltd
ltv
lubbock
lubell
lubricant
lubricate
lubricious
lubricity
lucas
lucerne
lucia
lucian
lucid
lucifer
lucille
lucius
luck
lucky
lucrative
lucre
lucretia
lucretius
lucy
lucy
ludicrous
ludlow
ludwig
lufthansa
luftwaffe
lug
luge
luger
luggage
lugging
luis
luke
luke
lukemia
lukewarm
lull
lullaby
lulu
lumbar
lumber
lumberman
lumbermen
lumen
luminance
luminary
luminescent
luminosity
luminous
lummox
lump
lumpish
lumpur
lumpy
lunacy
lunar
lunary
lunate
lunatic
lunch
luncheon
lunchroom
lunchtime
lund
lundberg
lundquist
lung
lunge
lupine
lura
lurch
lure
lurid
lurk
lusaka
luscious
lush
lust
lustful
lustrous
lusty
lutanist
lute
lutetium
luther
lutheran
lutz
lux
luxe
luxembourg
luxuriant
luxuriate
luxurious
luxury
luzon
lycopodium
lydia
lye
lying
lykes
lyle
lyman
lymph
lymphocyte
lymphoma
lynch
lynchburg
lynn
lynx
lyon
lyons
lyra
lyric
lyricism
lysenko
lysergic
lysine
m
ma
mabel
mac
macabre
macaque
macarthur
macassar
macbeth
macdonald
macdougall
mace
macedon
macedonia
macgregor
mach
machiavelli
machination
machine
machinelike
machinery
machismo
macho
macintosh
mack
mackenzie
mackerel
mackey
mackinac
mackinaw
mackintosh
macmillan
macon
macrame
macro
macromolecular
macromolecule
macrophage
macroprocessor
macroscopic
macrostructure
mad
madagascar
madam
madame
madcap
madden
maddox
made
madeira
madeleine
madeline
madhouse
madison
madman
madmen
madonna
madras
madrid
madrigal
madsen
madstone
mae
maelstrom
maestro
mafia
magazine
magdalene
magenta
maggie
maggot
maggoty
magi
magic
magician
magisterial
magistrate
magma
magna
magnanimity
magnanimous
magnate
magnesia
magnesite
magnesium
magnet
magnetic
magnetite
magneto
magnetron
magnificent
magnify
magnitude
magnolia
magnum
magnuson
magog
magpie
magruder
mahayana
mahayanist
mahogany
mahoney
maid
maiden
maidenhair
maidservant
maier
mail
mailbox
mailman
mailmen
maim
main
maine
mainland
mainline
mainstay
mainstream
maintain
maintenance
maitre
majestic
majesty
major
make
makeshift
makeup
malabar
maladapt
maladaptive
maladjust
maladroit
malady
malagasy
malaise
malaprop
malaria
malarial
malawi
malay
malaysia
malcolm
malconduct
malcontent
malden
maldistribute
maldive
male
maledict
malefactor
malevolent
malfeasant
malformation
malformed
malfunction
mali
malice
malicious
malign
malignant
mall
mallard
malleable
mallet
mallory
mallow
malnourished
malnutrition
malocclusion
malone
maloney
malposed
malpractice
malraux
malt
malta
maltese
malton
maltose
maltreat
mambo
mamma
mammal
mammalian
mammoth
man
mana
manage
manageable
managerial
managua
manama
manatee
manchester
mandamus
mandarin
mandate
mandatory
mandrake
mandrel
mandrill
mane
maneuver
manfred
manganese
mange
mangel
mangle
manhattan
manhole
manhood
mania
maniac
maniacal
manic
manifest
manifestation
manifold
manikin
manila
manipulable
manipulate
manitoba
mankind
manley
mann
manna
mannequin
mannerism
manometer
manor
manpower
mans
manse
manservant
mansfield
mansion
manslaughter
mantel
mantic
mantis
mantissa
mantle
mantlepiece
mantrap
manual
manuel
manufacture
manumission
manumit
manumitted
manure
manuscript
manville
many
manzanita
mao
maori
map
maple
mar
marathon
maraud
marble
marc
marceau
marcel
marcello
march
marcia
marco
marcus
marcy
mardi
mare
margaret
margarine
margery
margin
marginal
marginalia
margo
marguerite
maria
marianne
marie
marietta
marigold
marijuana
marilyn
marimba
marin
marina
marinade
marinate
marine
marino
mario
marion
marionette
marital
maritime
marjoram
marjorie
marjory
mark
market
marketeer
marketplace
marketwise
markham
markov
markovian
marks
marksman
marksmen
marlboro
marlborough
marlene
marlin
marlowe
marmalade
marmot
maroon
marque
marquee
marquess
marquette
marquis
marriage
marriageable
married
marrietta
marriott
marrow
marrowbone
marry
mars
marseilles
marsh
marsha
marshal
marshall
marshland
marshmallow
marsupial
mart
marten
martensite
martha
martial
martian
martin
martinez
martingale
martini
martinique
martinson
marty
martyr
martyrdom
marvel
marvelous
marvin
marx
mary
maryland
mascara
masculine
maser
maseru
mash
mask
masochism
masochist
mason
masonic
masonite
masonry
masque
masquerade
mass
massachusetts
massacre
massage
masseur
massey
massif
massive
mast
masterful
mastermind
masterpiece
mastery
mastic
mastiff
mastodon
masturbate
mat
match
matchbook
matchmake
mate
mateo
mater
material
materiel
maternal
maternity
math
mathematic
mathematician
mathematik
mathews
mathewson
mathias
mathieu
matilda
matinal
matinee
matins
matisse
matriarch
matriarchal
matrices
matriculate
matrimonial
matrimony
matrix
matroid
matron
matson
matsumoto
matte
matthew
matthews
mattock
mattress
mattson
maturate
mature
maudlin
maul
maureen
maurice
mauricio
maurine
mauritania
mauritius
mausoleum
mauve
maverick
mavis
maw
mawkish
mawr
max
max
maxim
maxima
maximal
maximilian
maximum
maxine
maxwell
maxwellian
may
maya
mayapple
maybe
mayer
mayfair
mayflower
mayhem
maynard
mayo
mayonnaise
mayor
mayoral
mayst
mazda
maze
mazurka
mba
mbabane
mcadams
mcallister
mcbride
mccabe
mccall
mccallum
mccann
mccarthy
mccarty
mccauley
mcclain
mcclellan
mcclure
mccluskey
mcconnel
mcconnell
mccormick
mccoy
mccracken
mccullough
mcdaniel
mcdermott
mcdonald
mcdonnell
mcdougall
mcdowell
mcelroy
mcfadden
mcfarland
mcgee
mcgill
mcginnis
mcgovern
mcgowan
mcgrath
mcgraw
mcgregor
mcguire
mchugh
mcintosh
mcintyre
mckay
mckee
mckenna
mckenzie
mckeon
mckesson
mckinley
mckinney
mcknight
mclaughlin
mclean
mcleod
mcmahon
mcmillan
mcmullen
mcnally
mcnaughton
mcneil
mcnulty
mcpherson
md
me
mead
meadow
meadowland
meadowsweet
meager
meal
mealtime
mealy
mean
meander
meaningful
meant
meantime
meanwhile
measle
measure
meat
meaty
mecca
mechanic
mechanism
mechanist
mecum
medal
medallion
meddle
medea
medford
media
medial
median
mediate
medic
medicate
medici
medicinal
medicine
medico
mediocre
mediocrity
meditate
mediterranean
medium
medlar
medley
medusa
meek
meet
meetinghouse
meg
megabit
megabyte
megahertz
megalomania
megalomaniac
megaton
megavolt
megawatt
megaword
megohm
meier
meiosis
meistersinger
mekong
mel
melamine
melancholy
melanesia
melange
melanie
melanin
melanoma
melbourne
melcher
meld
melee
melinda
meliorate
melissa
mellon
mellow
melodic
melodious
melodrama
melodramatic
melody
melon
melpomene
melt
meltdown
meltwater
melville
melvin
member
membrane
memento
memo
memoir
memorabilia
memorable
memoranda
memorandum
memorial
memory
memphis
men
menace
menagerie
menarche
mend
mendacious
mendacity
mendel
mendelevium
mendelssohn
menelaus
menfolk
menhaden
menial
meningitis
meniscus
menlo
mennonite
menopause
menstruate
mensurable
mensuration
mental
mention
mentor
menu
menzies
mephistopheles
mercantile
mercator
mercedes
mercenary
mercer
merchandise
merchant
merciful
mercilessly
merck
mercurial
mercuric
mercury
mercy
mere
meredith
meretricious
merganser
merge
meridian
meridional
meringue
merit
meritorious
merle
merlin
mermaid
merriam
merrill
merrimack
merriment
merritt
merry
merrymake
mervin
mesa
mescal
mescaline
mesenteric
mesh
mesmeric
mesoderm
meson
mesopotamia
mesozoic
mesquite
mess
message
messenger
messiah
messiah
messieurs
messrs
messy
met
metabole
metabolic
metabolism
metabolite
metal
metallic
metalliferous
metallography
metalloid
metallurgic
metallurgist
metallurgy
metalwork
metamorphic
metamorphism
metamorphose
metamorphosis
metaphor
metaphoric
metcalf
mete
meteor
meteoric
meteorite
meteoritic
meteorology
meter
methacrylate
methane
methanol
methionine
method
methodic
methodism
methodist
methodology
methuen
methuselah
methyl
methylene
meticulous
metier
metric
metro
metronome
metropolis
metropolitan
mettle
mettlesome
metzler
mew
mexican
mexico
meyer
meyers
mezzanine
mezzo
mi
miami
miasma
miasmal
mica
mice
michael
michaelangelo
michel
michelangelo
michele
michelin
michelson
michigan
michigan
mickelson
mickey
micky
micro
microbial
microcosm
microfiche
micrography
microjoule
micron
micronesia
microscopy
mid
midas
midband
midday
middle
middlebury
middleman
middlemen
middlesex
middleton
middletown
middleweight
midge
midget
midland
midmorn
midnight
midpoint
midrange
midscale
midsection
midshipman
midshipmen
midspan
midst
midstream
midterm
midway
midweek
midwest
midwestern
midwife
midwinter
midwives
mien
miff
mig
might
mighty
mignon
migrant
migrate
migratory
miguel
mike
mila
milan
milch
mild
mildew
mildred
mile
mileage
miles
milestone
milieu
militant
militarism
militarist
military
militate
militia
militiamen
milk
milkweed
milky
mill
millard
millenarian
millenia
millennia
millennium
miller
millet
millie
millikan
millinery
million
millionaire
millions
millionth
millipede
mills
millstone
milord
milt
milton
miltonic
milwaukee
mimeograph
mimesis
mimetic
mimi
mimic
mimicked
mimicking
min
minaret
mince
mincemeat
mind
mindanao
mindful
mine
minefield
mineral
mineralogy
minerva
minestrone
minesweeper
mingle
mini
miniature
minibike
minicomputer
minim
minima
minimal
minimax
minimum
minion
ministerial
ministry
mink
minneapolis
minnesota
minnie
minnow
minoan
minor
minos
minot
minsk
minsky
minstrel
minstrelsy
mint
minuend
minuet
minus
minuscule
minute
minuteman
minutemen
minutiae
miocene
mira
miracle
miraculous
mirage
miranda
mire
mirfak
miriam
mirror
mirth
misanthrope
misanthropic
miscegenation
miscellaneous
miscellany
mischievous
miscible
miscreant
miser
misery
misnomer
misogynist
misogyny
mispronunciation
miss
misshapen
missile
mission
missionary
mississippi
mississippian
missive
missoula
missouri
misspelled
missy
mist
mistletoe
mistress
misty
mit
mitchell
mite
miterwort
mitigate
mitochondria
mitosis
mitral
mitre
mitt
mitten
mix
mixture
mixup
mizar
mnemonic
mo
moan
moat
mob
mobcap
mobil
mobile
mobility
mobster
moccasin
mock
mockernut
mockery
mockingbird
mockup
modal
mode
model
modem
moderate
modern
modest
modesto
modesty
modicum
modify
modish
modular
modulate
module
moduli
modulo
modulus
modus
moe
moen
mogadiscio
mohammedan
mohawk
mohr
moiety
moines
moire
moiseyev
moist
moisten
moisture
molal
molar
molasses
mold
moldavia
moldboard
mole
molecular
molecule
molehill
molest
moliere
moline
moll
mollie
mollify
mollusk
molly
mollycoddle
moloch
molt
molten
moluccas
molybdate
molybdenite
molybdenum
moment
momenta
momentary
momentous
momentum
mommy
mona
monaco
monad
monadic
monarch
monarchic
monarchy
monash
monastery
monastic
monaural
monday
monel
monetarism
monetarist
monetary
money
moneymake
moneywort
mongolia
mongoose
monic
monica
monies
monitor
monitory
monk
monkey
monkeyflower
monkish
monmouth
monoceros
monochromatic
monochromator
monocotyledon
monocular
monogamous
monogamy
monoid
monolith
monologist
monologue
monomer
monomeric
monomial
monongahela
monopoly
monotonous
monotreme
monoxide
monroe
monrovia
monsanto
monsieur
monsoon
monster
monstrosity
monstrous
mont
montage
montague
montana
montclair
monte
montenegrin
monterey
monteverdi
montevideo
montgomery
month
monticello
montmartre
montpelier
montrachet
montreal
monty
monument
moo
mood
moody
moon
mooney
moonlight
moonlit
moor
moore
moorish
moose
moot
mop
moraine
moral
morale
moran
morass
moratorium
moravia
morbid
more
morel
moreland
moreover
moresby
morgan
morgen
morgue
moriarty
moribund
morley
mormon
morn
moroccan
morocco
moron
morose
morpheme
morphemic
morphine
morphism
morphology
morphophonemic
morrill
morris
morrison
morrissey
morristown
morrow
morse
morsel
mort
mortal
mortar
mortem
mortgage
mortgagee
mortgagor
mortician
mortify
mortise
morton
mosaic
moscow
moser
moses
moslem
mosque
mosquito
moss
mossy
most
mot
motel
motet
moth
mothball
mother
motherhood
motherland
motif
motion
motivate
motive
motley
motor
motorcycle
motorola
mottle
motto
mould
moulton
mound
mount
mountain
mountaineer
mountainous
mountainside
mourn
mournful
mouse
moustache
mousy
mouth
mouthful
mouthpiece
mouton
move
movie
mow
moyer
mozart
mph
mr
mrs
ms
mt
mu
much
mucilage
muck
mucosa
mucus
mud
mudd
muddle
muddlehead
muddy
mudguard
mudsling
mueller
muezzin
muff
muffin
muffle
mug
mugging
muggy
mugho
muir
mukden
mulatto
mulberry
mulch
mulct
mule
mulish
mull
mullah
mullein
mullen
mulligan
mulligatawny
mullion
multi
multifarious
multinomial
multiple
multiplet
multiplex
multiplexor
multipliable
multiplicand
multiplication
multiplicative
multiplicity
multiply
multitude
multitudinous
mum
mumble
mumford
mummy
munch
muncie
mundane
mung
munich
municipal
munificent
munition
munson
muon
muong
mural
murder
murderous
muriatic
muriel
murk
murky
murmur
murphy
murray
murre
muscat
muscle
muscovite
muscovy
muscular
musculature
muse
museum
mush
mushroom
mushy
music
musicale
musician
musicology
musk
muskegon
muskellunge
musket
muskmelon
muskox
muskoxen
muskrat
muslim
muslim
muslin
mussel
must
mustache
mustachio
mustang
mustard
musty
mutagen
mutandis
mutant
mutate
mutatis
mute
mutilate
mutineer
mutiny
mutt
mutter
mutton
mutual
mutuel
muzak
muzo
muzzle
my
mycenae
mycenaean
mycobacteria
mycology
myel
myeline
myeloid
myers
mylar
mynah
mynheer
myocardial
myocardium
myofibril
myoglobin
myopia
myopic
myosin
myra
myriad
myron
myrrh
myrtle
myself
mysterious
mystery
mystic
mystify
mystique
myth
mythic
mythology
n
naacp
nab
nabisco
nabla
nadia
nadine
nadir
nag
nagasaki
nagging
nagoya
nagy
naiad
nail
nair
nairobi
naive
naivete
nakayama
naked
name
nameable
nameplate
namesake
nan
nancy
nanette
nanking
nanometer
nanosecond
nantucket
naomi
nap
nape
napkin
naples
napoleon
napoleonic
narbonne
narcissism
narcissist
narcissus
narcosis
narcotic
narragansett
narrate
narrow
nary
nasa
nasal
nascent
nash
nashua
nashville
nassau
nasturtium
nasty
nat
natal
natalie
natchez
nate
nathan
nathaniel
nation
nationhood
nationwide
native
nato
natty
natural
nature
naturopath
naughty
nausea
nauseate
nauseum
nautical
nautilus
navajo
naval
nave
navel
navigable
navigate
navy
nay
nazarene
nazareth
nazi
nazism
nbc
nbs
nc
ncaa
ncar
nco
ncr
nd
nd
ndjamena
ne
neal
neanderthal
neap
neapolitan
near
nearby
nearest
nearsighted
neat
neater
neath
nebraska
nebula
nebulae
nebular
nebulous
necessary
necessitate
necessity
neck
necklace
neckline
necktie
necromancer
necromancy
necromantic
necropsy
necrosis
necrotic
nectar
nectareous
nectarine
nectary
ned
nee
need
needful
needham
needham
needle
needlepoint
needlework
needy
neff
negate
neglect
neglecter
negligee
negligent
negligible
negotiable
negotiate
negro
negroes
negroid
nehru
neil
neither
nell
nellie
nelsen
nelson
nemesis
neoclassic
neoconservative
neodymium
neolithic
neologism
neon
neonatal
neonate
neophyte
neoprene
nepal
nepenthe
nephew
neptune
neptunium
nereid
nero
nerve
nervous
ness
nest
nestle
nestor
net
nether
netherlands
netherworld
nettle
nettlesome
network
neumann
neural
neuralgia
neurasthenic
neuritis
neuroanatomic
neuroanatomy
neuroanotomy
neurology
neuromuscular
neuron
neuronal
neuropathology
neurophysiology
neuropsychiatric
neuroses
neurosis
neurotic
neuter
neutral
neutrino
neutron
neva
nevada
neve
never
nevertheless
nevins
new
newark
newbold
newborn
newcastle
newcomer
newel
newell
newfound
newfoundland
newline
newlywed
newman
newport
newsboy
newscast
newsletter
newsman
newsmen
newspaper
newspaperman
newspapermen
newsreel
newsstand
newsweek
newt
newton
newtonian
next
nguyen
nh
niacin
niagara
niamey
nib
nibble
nibelung
nibs
nicaragua
nice
nicety
niche
nicholas
nicholls
nichols
nicholson
nichrome
nick
nickel
nickname
nicodemus
nicosia
nicotinamide
nicotine
niece
nielsen
nielson
nietzsche
niger
nigeria
niggardly
nigger
niggle
nigh
night
nightcap
nightclub
nightdress
nightfall
nightgown
nighthawk
nightingale
nightmare
nightmarish
nightshirt
nighttime
nih
nihilism
nihilist
nikko
nikolai
nil
nile
nilpotent
nimble
nimbus
nimh
nina
nine
ninebark
ninefold
nineteen
nineteenth
ninetieth
ninety
nineveh
ninth
niobe
niobium
nip
nipple
nippon
nirvana
nit
nitpick
nitrate
nitric
nitride
nitrite
nitrogen
nitrogenous
nitroglycerine
nitrous
nitty
nixon
nj
nm
nne
nnw
no
noaa
noah
nob
nobel
nobelium
noble
nobleman
noblemen
noblesse
nobody
nocturnal
nocturne
nod
nodal
node
nodular
nodule
noel
noetherian
noise
noisemake
noisy
nolan
noll
nolo
nomad
nomadic
nomenclature
nominal
nominate
nominee
nomogram
nomograph
non
nonagenarian
nonce
nonchalant
nondescript
none
nonetheless
nonogenarian
nonsensic
nonsensical
noodle
nook
noon
noontime
noose
nor
nora
nordhoff
nordstrom
noreen
norfolk
norm
norma
normal
normalcy
norman
normandy
normative
norris
north
northampton
northbound
northeast
northeastern
northerly
northern
northernmost
northland
northrop
northrup
northumberland
northward
northwest
northwestern
norton
norwalk
norway
norwegian
norwich
nose
nosebag
nosebleed
nostalgia
nostalgic
nostradamus
nostrand
nostril
not
notary
notate
notch
note
notebook
noteworthy
nothing
notice
noticeable
notify
notion
notocord
notoriety
notorious
notre
nottingham
notwithstanding
nouakchott
noun
nourish
nouveau
nov
nova
novak
novel
novelty
november
novice
novitiate
novo
novosibirsk
now
nowaday
nowadays
nowhere
nowise
noxious
nozzle
nrc
nsf
ntis
nu
nuance
nubia
nubile
nucleant
nuclear
nucleate
nuclei
nucleic
nucleoli
nucleolus
nucleotide
nucleus
nuclide
nude
nudge
nugatory
nugget
nuisance
null
nullify
nullstellensatz
numb
numerable
numeral
numerate
numeric
numerische
numerology
numerous
numinous
numismatic
numismatist
nun
nuptial
nurse
nursery
nurture
nut
nutate
nutcrack
nuthatch
nutmeg
nutria
nutrient
nutrition
nutritious
nutritive
nutshell
nuzzle
nv
nw
ny
nyc
nylon
nymph
nymphomania
nymphomaniac
nyquist
nyu
o
oaf
oak
oaken
oakland
oakley
oakwood
oar
oases
oasis
oat
oath
oatmeal
obduracy
obdurate
obedient
obeisant
obelisk
oberlin
obese
obey
obfuscate
obfuscatory
obituary
object
objectify
objectivity
objector
objet
oblate
obligate
obligatory
oblige
oblique
obliterate
oblivion
oblivious
oblong
obnoxious
oboe
oboist
obscene
obscure
obsequious
obsequy
observant
observation
observatory
observe
obsess
obsession
obsessive
obsidian
obsolescent
obsolete
obstacle
obstetric
obstinacy
obstinate
obstruct
obstruent
obtain
obtrude
obtrusion
obtrusive
obverse
obviate
obvious
ocarina
occasion
occident
occidental
occipital
occlude
occlusion
occlusive
occult
occultate
occultation
occupant
occupation
occupy
occur
occurred
occurrent
occurring
ocean
oceania
oceanic
oceanographer
oceanography
oceanside
ocelot
oct
octagon
octagonal
octahedra
octahedral
octahedron
octal
octane
octant
octave
octavia
octennial
octet
octile
octillion
october
octogenarian
octopus
octoroon
ocular
odd
ode
odessa
odin
odious
odium
odometer
odorous
odysseus
odyssey
oedipal
oedipus
oersted
of
off
offal
offbeat
offenbach
offend
offensive
offer
offertory
offhand
office
officeholder
officemate
official
officialdom
officiate
officio
officious
offload
offprint
offsaddle
offset
offsetting
offshoot
offshore
offspring
offstage
oft
often
oftentimes
ogden
ogle
ogre
ogress
oh
ohio
ohm
ohmic
ohmmeter
oil
oilcloth
oilman
oilmen
oilseed
oily
oint
ointment
ok
okay
okay
okinawa
oklahoma
olaf
olav
old
olden
oldenburg
oldsmobile
oldster
oldy
oleander
olefin
oleomargarine
olfactory
olga
oligarchic
oligarchy
oligoclase
oligopoly
olin
olive
oliver
olivetti
olivia
olivine
olsen
olson
olympia
olympic
omaha
oman
ombudsman
ombudsperson
omega
omelet
omen
omicron
ominous
omission
omit
omitted
omitting
omnibus
omnipotent
omnipresent
omniscient
on
once
oncology
oncoming
one
oneida
onerous
oneself
onetime
oneupmanship
ongoing
onion
onlook
onlooker
onlooking
only
onomatopoeia
onomatopoeic
onondaga
onrush
onrushing
onset
onslaught
ontario
onto
ontogeny
ontology
onus
onward
onyx
oocyte
oodles
ooze
opacity
opal
opalescent
opaque
opec
opel
open
opera
operable
operand
operant
operate
operatic
operetta
operon
ophiucus
ophthalmic
ophthalmology
opiate
opine
opinion
opinionate
opium
opossum
oppenheimer
opponent
opportune
opposable
oppose
opposite
opposition
oppress
oppression
oppressive
oppressor
opprobrium
opt
opthalmic
opthalmology
optic
optima
optimal
optimism
optimist
optimistic
optimum
option
optoacoustic
optoelectronic
optoisolate
optometrist
optometry
opulent
opus
or
oracle
oracular
oral
orange
orangeroot
orangutan
orate
oratoric
oratorical
oratorio
oratory
orb
orbit
orbital
orchard
orchestra
orchestral
orchestrate
orchid
orchis
ordain
ordeal
order
orderly
ordinal
ordinance
ordinary
ordinate
ordnance
ore
oregano
oregon
oresteia
orestes
organ
organdy
organic
organismic
organometallic
orgasm
orgiastic
orgy
orient
oriental
orifice
origin
original
originate
orin
orinoco
oriole
orion
orkney
orlando
orleans
ornament
ornamentation
ornate
ornately
ornery
orographic
orography
orono
orphan
orphanage
orpheus
orphic
orr
ortega
orthant
orthicon
orthoclase
orthodontic
orthodontist
orthodox
orthodoxy
orthogonal
orthography
orthonormal
orthopedic
orthophosphate
orthorhombic
orville
orwell
orwellian
osaka
osborn
osborne
oscar
oscillate
oscillatory
oscilloscope
osgood
osha
oshkosh
osier
osiris
oslo
osmium
osmosis
osmotic
osprey
osseous
ossify
ostensible
ostentatious
osteology
osteopath
osteopathic
osteopathy
osteoporosis
ostracism
ostracod
ostrander
ostrich
oswald
othello
other
otherwise
otherworld
otherworldly
otiose
otis
ott
ottawa
otter
otto
ottoman
ouagadougou
ouch
ought
ounce
our
ourselves
oust
out
outermost
outlandish
outlawry
outrageous
ouvre
ouzel
ouzo
ova
oval
ovary
ovate
oven
ovenbird
over
overhang
overt
overture
ovid
oviform
ovum
ow
owe
owens
owing
owl
owly
own
ox
oxalate
oxalic
oxcart
oxen
oxeye
oxford
oxidant
oxidate
oxide
oxnard
oxonian
oxygen
oxygenate
oyster
ozark
ozone
p
pa
pablo
pabst
pace
pacemake
pacesetting
pacific
pacifism
pacifist
pacify
pack
package
packard
packet
pact
pad
paddle
paddock
paddy
padlock
padre
paean
pagan
page
pageant
pageantry
paginate
pagoda
paid
pail
pain
paine
painful
painstaking
paint
paintbrush
pair
pairwise
pakistan
pakistani
pal
palace
palate
palatine
palazzi
palazzo
pale
paleolithic
paleozoic
palermo
palestine
palestinian
palette
palfrey
palindrome
palindromic
palisade
pall
palladia
palladian
palladium
pallet
palliate
pallid
palm
palmate
palmetto
palmolive
palmyra
palo
palomar
palpable
palsy
pam
pamela
pampa
pamper
pamphlet
pan
panacea
panama
pancake
pancho
pancreas
pancreatic
panda
pandanus
pandemic
pandemonium
pander
pandora
pane
panel
pang
panhandle
panic
panicked
panicky
panicle
panjandrum
panoply
panorama
panoramic
pansy
pant
pantheism
pantheist
pantheon
panther
pantomime
pantomimic
pantry
panty
paoli
pap
papa
papacy
papal
papaw
paper
paperback
paperbound
paperweight
paperwork
papery
papillary
papoose
pappas
pappy
paprika
papua
papyri
papyrus
par
parabola
parabolic
paraboloid
paraboloidal
parachute
parade
paradigm
paradigmatic
paradise
paradox
paradoxic
paraffin
paragon
paragonite
paragraph
paraguay
parakeet
paralinguistic
parallax
parallel
parallelepiped
paralysis
paramagnet
paramagnetic
paramedic
parameter
paramilitary
paramount
paramus
paranoia
paranoiac
paranoid
paranormal
parapet
paraphernalia
paraphrase
parapsychology
parasite
parasitic
parasol
parasympathetic
paratroop
paraxial
parboil
parcel
parch
pardon
pare
paregoric
parent
parentage
parental
parentheses
parenthesis
parenthetic
parenthood
pareto
pariah
parimutuel
paris
parish
parishioner
parisian
park
parke
parkinson
parkish
parkland
parks
parkway
parlance
parlay
parley
parliament
parliamentarian
parliamentary
parochial
parody
parole
parolee
parquet
parr
parrish
parrot
parry
parse
parsifal
parsimonious
parsimony
parsley
parsnip
parson
parsonage
parsons
part
partake
parthenon
partial
participant
participate
participle
particle
particular
particulate
partisan
partition
partner
partook
partridge
party
parvenu
pasadena
pascal
paschal
pasha
paso
pass
passage
passageway
passaic
passband
passe
passenger
passer
passerby
passion
passionate
passivate
passive
passover
passport
password
past
paste
pasteboard
pastel
pasteup
pasteur
pastiche
pastime
pastor
pastoral
pastry
pasture
pasty
pat
patagonia
patch
patchwork
patchy
pate
patent
patentee
pater
paternal
paternoster
paterson
path
pathetic
pathfind
pathogen
pathogenesis
pathogenic
pathology
pathos
pathway
patient
patina
patio
patriarch
patriarchal
patriarchy
patrice
patricia
patrician
patrick
patrimonial
patrimony
patriot
patriotic
patristic
patrol
patrolled
patrolling
patrolman
patrolmen
patron
patronage
patroness
patsy
pattern
patterson
patti
patton
patty
paucity
paul
paula
paulette
pauli
pauline
paulo
paulsen
paulson
paulus
paunch
paunchy
pauper
pause
pavanne
pave
pavilion
pavlov
paw
pawn
pawnshop
pawtucket
pax
pay
paycheck
payday
paymaster
payne
payoff
payroll
paz
pbs
pdp
pea
peabody
peace
peaceable
peaceful
peacemake
peacetime
peach
peachtree
peacock
peafowl
peak
peaky
peal
peale
peanut
pear
pearce
pearl
pearlite
pearlstone
pearson
peasant
peasanthood
pease
peat
pebble
pecan
peccary
peck
pecos
pectoral
pectoralis
peculate
peculiar
pecuniary
pedagogic
pedagogue
pedagogy
pedal
pedant
pedantic
pedantry
peddle
pedestal
pedestrian
pediatric
pediatrician
pedigree
pediment
pedro
pee
peed
peek
peel
peep
peephole
peepy
peer
peg
pegasus
pegboard
pegging
peggy
pejorative
peking
pelham
pelican
pellagra
pellet
pelt
peltry
pelvic
pelvis
pembroke
pemmican
pen
penal
penalty
penance
penates
pence
penchant
pencil
pend
pendant
pendulum
penelope
penetrable
penetrate
penguin
penh
penicillin
peninsula
penis
penitent
penitential
penitentiary
penman
penmen
penn
penna
pennant
pennsylvania
penny
pennyroyal
penrose
pensacola
pension
pensive
pent
pentagon
pentagonal
pentagram
pentane
pentecost
pentecostal
penthouse
penultimate
penumbra
penurious
penury
peony
people
peoria
pep
peppergrass
peppermint
pepperoni
peppery
peppy
pepsi
pepsico
peptide
per
perceive
percent
percentage
percentile
percept
perceptible
perception
perceptive
perceptual
perch
perchance
perchlorate
percival
percolate
percussion
percussive
percy
perdition
peregrine
peremptory
perennial
perez
perfect
perfecter
perfectible
perfidious
perfidy
perforate
perforce
perform
performance
perfume
perfumery
perfunctory
perfuse
perfusion
pergamon
perhaps
periclean
pericles
peridotite
perihelion
peril
perilla
perilous
perimeter
period
periodic
peripatetic
peripheral
periphery
periphrastic
periscope
perish
peritectic
periwinkle
perjure
perjury
perk
perkins
perky
perle
permalloy
permanent
permeable
permeate
permian
permissible
permission
permissive
permit
permitted
permitting
permutation
permute
pernicious
peroxide
perpendicular
perpetrate
perpetual
perpetuate
perpetuity
perplex
perquisite
perry
persecute
persecution
persecutory
perseus
perseverance
perseverant
persevere
pershing
persia
persian
persiflage
persimmon
persist
persistent
person
persona
personage
personal
personify
personnel
perspective
perspicacious
perspicuity
perspicuous
perspiration
perspire
persuade
persuasion
persuasive
pert
pertain
perth
pertinacious
pertinent
perturb
perturbate
perturbation
peru
perusal
peruse
peruvian
pervade
pervasion
pervasive
perverse
perversion
pervert
pessimal
pessimism
pessimist
pessimum
pest
peste
pesticide
pestilent
pestilential
pestle
pet
petal
pete
petersburg
petersen
peterson
petit
petite
petition
petrel
petri
petrifaction
petrify
petrochemical
petroglyph
petrol
petroleum
petrology
petticoat
petty
petulant
petunia
peugeot
pew
pewee
pewter
pfennig
pfizer
phage
phagocyte
phalanger
phalanx
phalarope
phantasy
phantom
pharaoh
pharmaceutic
pharmacist
pharmacology
pharmacopoeia
pharmacy
phase
phd
pheasant
phelps
phenol
phenolic
phenomena
phenomenal
phenomenology
phenomenon
phenotype
phenyl
phenylalanine
phi
phil
philadelphia
philanthrope
philanthropic
philanthropy
philharmonic
philip
philippine
philistine
phillip
phillips
philodendron
philology
philosoph
philosopher
philosophic
philosophy
phipps
phloem
phlox
phobic
phoebe
phoenicia
phoenix
phon
phone
phoneme
phonemic
phonetic
phonic
phonograph
phonology
phonon
phony
phosgene
phosphate
phosphide
phosphine
phosphor
phosphoresce
phosphorescent
phosphoric
phosphorus
phosphorylate
photo
photogenic
photography
photolysis
photolytic
photometry
photon
phrase
phrasemake
phraseology
phthalate
phycomycetes
phyla
phyllis
phylogeny
physic
physician
physik
physiochemical
physiognomy
physiology
physiotherapist
physiotherapy
physique
phytoplankton
pi
pianissimo
pianist
piano
piazza
pica
picasso
picayune
piccadilly
piccolo
pick
pickaxe
pickerel
pickering
picket
pickett
pickford
pickle
pickman
pickoff
pickup
picky
picnic
picnicked
picnicker
picnicking
picofarad
picojoule
picosecond
pictorial
picture
picturesque
piddle
pidgin
pie
piece
piecemeal
piecewise
piedmont
pier
pierce
pierre
pierson
pietism
piety
piezoelectric
pig
pigeon
pigeonberry
pigeonfoot
pigeonhole
pigging
piggish
piggy
piggyback
pigment
pigmentation
pigpen
pigroot
pigskin
pigtail
pike
pilate
pile
pilewort
pilfer
pilferage
pilgrim
pilgrimage
pill
pillage
pillar
pillory
pillow
pillsbury
pilot
pimp
pimple
pin
pinafore
pinball
pinch
pincushion
pine
pineapple
pinehurst
ping
pinhead
pinhole
pinion
pink
pinkie
pinkish
pinnacle
pinnate
pinochle
pinpoint
pinscher
pinsky
pint
pintail
pinto
pinwheel
pinxter
pion
pioneer
piotr
pious
pip
pipe
pipeline
piper
pipette
pipsissewa
piquant
pique
piracy
piraeus
pirate
pirogue
pirouette
piscataway
pisces
piss
pistachio
pistol
pistole
piston
pit
pitch
pitchblende
pitchfork
pitchstone
piteous
pitfall
pith
pithy
pitiable
pitiful
pitilessly
pitman
pitney
pitt
pittsburgh
pittsfield
pittston
pituitary
pity
pius
pivot
pivotal
pixel
pixy
pizza
pizzeria
pizzicato
pl
placate
placater
place
placeable
placebo
placeholder
placenta
placental
placid
plagiarism
plagiarist
plagioclase
plague
plagued
plaguey
plaid
plain
plainfield
plaintiff
plaintive
plan
planar
planck
plane
planeload
planet
planetaria
planetarium
planetary
planetesimal
planetoid
plank
plankton
planoconcave
planoconvex
plant
plantain
plantation
plaque
plasm
plasma
plasmon
plaster
plastic
plastisol
plastron
plat
plate
plateau
platelet
platen
platform
platinum
platitude
platitudinous
plato
platonic
platonism
platonist
platoon
platte
platypus
plausible
play
playa
playback
playboy
playful
playground
playhouse
playmate
playoff
playroom
plaything
playtime
playwright
playwriting
plaza
plea
plead
pleasant
please
pleasure
pleat
plebeian
plebian
pledge
pleiades
pleistocene
plenary
plenipotentiary
plenitude
plentiful
plenty
plenum
plethora
pleura
pleural
plexiglas
pliable
pliancy
pliant
pliers
plight
pliny
pliocene
plod
plop
plot
plover
plowman
plowshare
pluck
plucky
plug
plugboard
pluggable
plugging
plum
plumage
plumb
plumbago
plumbate
plume
plummet
plump
plunder
plunge
plunk
pluperfect
plural
plus
plush
plushy
plutarch
pluto
pluton
plutonium
ply
plymouth
plyscore
plywood
pm
pneumatic
pneumococcus
pneumonia
po
poach
pobox
pocket
pocketbook
pocketful
pocono
pocus
pod
podge
podia
podium
poe
poem
poesy
poet
poetic
poetry
pogo
pogrom
poi
poignant
poincare
poinsettia
point
pointwise
poise
poison
poisonous
poisson
poke
pokerface
pol
poland
polar
polarimeter
polaris
polariscope
polariton
polarogram
polarograph
polarography
polaroid
polaron
pole
polecat
polemic
police
policeman
policemen
policy
polio
poliomyelitis
polis
polish
politburo
polite
politic
politician
politicking
politico
polity
polk
polka
polkadot
poll
pollard
pollen
pollinate
pollock
polloi
pollster
pollutant
pollute
pollution
pollux
polo
polonaise
polonium
polopony
polyglot
polygon
polygonal
polygynous
polyhedra
polyhedral
polyhedron
polyhymnia
polymer
polymerase
polymeric
polymorph
polymorphic
polynomial
polyphemus
polyphony
polyploidy
polypropylene
polysaccharide
polytechnic
polytope
polytypy
pomade
pomegranate
pomona
pomp
pompadour
pompano
pompeii
pompey
pompon
pomposity
pompous
ponce
ponchartrain
poncho
pond
ponder
ponderous
pong
pont
pontiac
pontiff
pontific
pontificate
pony
pooch
poodle
pooh
pool
poole
poop
poor
pop
popcorn
pope
popish
poplar
poplin
poppy
populace
popular
populate
populism
populist
populous
porcelain
porch
porcine
porcupine
pore
pork
pornographer
pornography
porosity
porous
porphyry
porpoise
porridge
port
portage
portal
porte
portend
portent
portentous
porterhouse
portfolio
portia
portico
portland
portland
portmanteau
porto
portrait
portraiture
portray
portrayal
portsmouth
portugal
portuguese
portulaca
posable
pose
poseidon
poseur
posey
posh
posit
position
positive
positron
posner
posse
posseman
possemen
possess
possession
possessive
possessor
possible
possum
post
postage
postal
postcard
postcondition
postdoctoral
posterior
posteriori
posterity
postfix
postgraduate
posthumous
postlude
postman
postmark
postmaster
postmen
postmortem
postmultiply
postoperative
postorder
postpaid
postpone
postposition
postprocess
postprocessor
postscript
postulate
posture
postwar
posy
pot
potable
potash
potassium
potato
potatoes
potbelly
potboil
potent
potentate
potential
potentiometer
pothole
potion
potlatch
potomac
potpourri
pottery
potts
pouch
poughkeepsie
poultice
poultry
pounce
pound
pour
pout
poverty
pow
powder
powderpuff
powdery
powell
power
powerful
powerhouse
powers
poynting
ppm
pr
practicable
practical
practice
practise
practitioner
prado
praecox
pragmatic
pragmatism
pragmatist
prague
prairie
praise
praiseworthy
pram
prance
prank
praseodymium
pratt
pravda
pray
prayer
prayerful
preach
preachy
preamble
precambrian
precarious
precaution
precautionary
precede
precedent
precept
precess
precession
precinct
precious
precipice
precipitable
precipitate
precipitous
precis
precise
precision
preclude
precocious
precocity
precursor
predatory
predecessor
predicament
predicate
predict
predictor
predilect
predispose
predisposition
predominant
predominate
preeminent
preempt
preemption
preemptive
preemptor
preen
prefab
prefabricate
preface
prefatory
prefect
prefecture
prefer
preference
preferential
preferred
preferring
prefix
pregnant
prehistoric
prejudice
prejudicial
preliminary
prelude
premature
premeditate
premier
premiere
premise
premium
premonition
premonitory
prentice
preoccupy
prep
preparation
preparative
preparatory
prepare
preponderant
preponderate
preposition
preposterous
prerequisite
prerogative
presage
presbyterian
presbytery
prescott
prescribe
prescript
prescription
prescriptive
presence
present
presentation
presentational
preservation
preserve
preside
president
presidential
press
pressure
prestidigitate
prestige
prestigious
presto
preston
presume
presumed
presuming
presumption
presumptive
presumptuous
presuppose
presupposition
pretend
pretense
pretension
pretentious
pretext
pretoria
pretty
prevail
prevalent
prevent
prevention
preventive
preview
previous
prexy
prey
priam
price
prick
prickle
pride
priest
priestley
prig
priggish
prim
prima
primacy
primal
primary
primate
prime
primeval
primitive
primitivism
primordial
primp
primrose
prince
princess
princeton
principal
principia
principle
print
printmake
printout
prior
priori
priory
priscilla
prism
prismatic
prison
prissy
pristine
pritchard
privacy
private
privet
privilege
privy
prize
prizewinning
pro
probabilist
probate
probe
probity
problem
problematic
procaine
procedural
procedure
proceed
process
procession
processor
proclaim
proclamation
proclivity
procrastinate
procreate
procrustean
procrustes
procter
proctor
procure
procyon
prod
prodigal
prodigious
prodigy
produce
producible
product
productivity
prof
profane
profess
profession
professional
professor
professorial
proffer
proficient
profile
profit
profiteer
profligacy
profligate
profound
profundity
profuse
profusion
progenitor
progeny
prognosis
prognosticate
programmable
programmed
programmer
programming
progress
progression
progressive
prohibit
prohibition
prohibitive
prohibitory
project
projectile
projector
prokaryote
prokofieff
prolate
prolegomena
proletariat
proliferate
prolific
proline
prolix
prologue
prolong
prolongate
prolusion
prom
promenade
promethean
prometheus
promethium
prominent
promiscuity
promiscuous
promise
promote
promotion
prompt
promptitude
promulgate
prone
prong
pronoun
pronounce
pronounceable
pronto
pronunciation
proof
proofread
prop
propaganda
propagandist
propagate
propane
propel
propellant
propelled
propeller
propelling
propensity
proper
property
prophecy
prophesy
prophet
prophetic
prophylactic
propionate
propitiate
propitious
proponent
proportion
proportionate
propos
proposal
propose
proposition
propound
proprietary
proprietor
propriety
proprioception
proprioceptive
propulsion
propyl
propylene
prorate
prorogue
prosaic
proscenium
proscribe
proscription
prose
prosecute
prosecution
prosecutor
proserpine
prosodic
prosody
prosopopoeia
prospect
prospector
prospectus
prosper
prosperous
prostate
prostheses
prosthesis
prosthetic
prostitute
prostitution
prostrate
protactinium
protagonist
protean
protease
protect
protector
protectorate
protege
protein
proteolysis
proteolytic
protest
protestant
protestation
prothonotary
protocol
proton
protophyta
protoplasm
protoplasmic
prototype
prototypic
protozoa
protozoan
protract
protrude
protrusion
protrusive
protuberant
proud
proust
prove
proven
provenance
proverb
proverbial
provide
provident
providential
province
provincial
provision
provisional
proviso
provocateur
provocation
provocative
provoke
provost
prow
prowess
prowl
proximal
proximate
proximity
proxy
prudent
prudential
prune
prurient
prussia
pry
psalm
psalter
psaltery
pseudo
psi
psych
psyche
psychiatric
psychiatrist
psychiatry
psychic
psycho
psychoacoustic
psychoanalysis
psychoanalyst
psychoanalytic
psychobiology
psychology
psychometry
psychopath
psychopathic
psychophysic
psychophysiology
psychopomp
psychoses
psychosis
psychosomatic
psychotherapeutic
psychotherapist
psychotherapy
psychotic
psyllium
pta
ptarmigan
pterodactyl
ptolemaic
ptolemy
pub
puberty
pubescent
public
publication
publish
puc
puccini
puck
puckish
pudding
puddingstone
puddle
puddly
pueblo
puerile
puerto
puff
puffball
puffed
puffery
puffin
puffy
pug
pugh
pugnacious
puissant
puke
pulaski
pulitzer
pull
pullback
pulley
pullman
pullover
pulmonary
pulp
pulpit
pulsar
pulsate
pulse
pulverable
puma
pumice
pummel
pump
pumpkin
pumpkinseed
pun
punch
punctual
punctuate
puncture
pundit
punditry
pungent
punic
punish
punitive
punk
punky
punster
punt
puny
pup
pupal
pupate
pupil
puppet
puppeteer
puppy
puppyish
purcell
purchasable
purchase
purdue
pure
purgation
purgative
purgatory
purge
purify
purina
purine
puritan
puritanic
purl
purloin
purple
purport
purpose
purposeful
purposive
purr
purse
purslane
pursuant
pursue
pursuer
pursuit
purvey
purveyor
purview
pus
pusan
pusey
push
pushbutton
pushout
pushpin
pussy
pussycat
put
putative
putnam
putt
putty
puzzle
pvc
pygmalion
pygmy
pyhrric
pyknotic
pyle
pyongyang
pyracanth
pyramid
pyramidal
pyre
pyrex
pyridine
pyrimidine
pyrite
pyroelectric
pyrolyse
pyrolysis
pyrometer
pyrophosphate
pyrotechnic
pyroxene
pyroxenite
pyrrhic
pyrrhic
pythagoras
pythagorean
python
q
qatar
qed
qua
quack
quackery
quad
quadrangle
quadrangular
quadrant
quadratic
quadrature
quadrennial
quadric
quadriceps
quadrilateral
quadrille
quadrillion
quadripartite
quadrivium
quadruple
quadrupole
quaff
quagmire
quahog
quail
quaint
quake
quakeress
qualified
qualify
qualitative
quality
qualm
quandary
quanta
quantico
quantify
quantile
quantitative
quantity
quantum
quarantine
quark
quarrel
quarrelsome
quarry
quarryman
quarrymen
quart
quarterback
quartermaster
quartet
quartic
quartile
quartz
quartzite
quasar
quash
quasi
quasicontinuous
quasiorder
quasiparticle
quasiperiodic
quasistationary
quaternary
quatrain
quaver
quay
queasy
quebec
queen
queer
quell
quench
querulous
query
quest
question
questionnaire
quetzal
queue
quezon
quibble
quick
quicken
quickie
quicklime
quicksand
quicksilver
quickstep
quid
quiescent
quiet
quietus
quill
quillwort
quilt
quince
quinine
quinn
quint
quintessence
quintessential
quintet
quintic
quintillion
quintus
quip
quipping
quirinal
quirk
quirky
quirt
quit
quite
quito
quitting
quiver
quixote
quixotic
quiz
quizzes
quizzical
quo
quod
quonset
quorum
quota
quotation
quote
quotient
r
r&d
rabat
rabat
rabbet
rabbi
rabbit
rabble
rabid
rabies
rabin
raccoon
race
racetrack
raceway
rachel
rachmaninoff
racial
rack
racket
racketeer
rackety
racy
radar
radcliffe
radial
radian
radiant
radiate
radical
radices
radii
radio
radioactive
radioastronomy
radiocarbon
radiochemical
radiochemistry
radiogram
radiography
radiology
radiometer
radiophysics
radiosonde
radiotelegraph
radiotelephone
radiotherapy
radish
radium
radius
radix
radon
rae
rafael
rafferty
raffia
raffish
raffle
raft
rag
rage
ragging
ragout
ragweed
raid
rail
railbird
railhead
raillery
railroad
railway
rain
rainbow
raincoat
raindrop
rainfall
rainstorm
rainy
raise
raisin
raj
rajah
rake
rakish
raleigh
rally
ralph
ralston
ram
ramada
raman
ramble
ramify
ramo
ramp
rampage
rampant
rampart
ramrod
ramsey
ran
ranch
rancho
rancid
rancorous
rand
randall
randolph
random
randy
rang
range
rangeland
rangoon
rangy
ranier
rank
rankin
rankine
rankle
ransack
ransom
rant
raoul
rap
rapacious
rape
raphael
rapid
rapier
rapport
rapprochement
rapt
rapture
rare
rarefy
raritan
rasa
rascal
rash
rasmussen
rasp
raspberry
raster
rastus
rat
rata
rate
ratepayer
rater
rather
ratify
ratio
ratiocinate
rationale
rattail
rattle
rattlesnake
ratty
raucous
raul
ravage
rave
ravel
raven
ravenous
ravine
ravish
raw
rawboned
rawhide
rawlinson
ray
rayleigh
raymond
raytheon
raze
razor
razorback
razzle
rca
rd
rd
re
reach
reactant
reactionary
read
readout
ready
reagan
real
realisable
realm
realtor
realty
ream
reap
rear
reason
reave
reb
rebecca
rebel
rebelled
rebelling
rebellion
rebellious
rebuke
rebut
rebuttal
rebutted
rebutting
recalcitrant
recappable
receipt
receive
recent
receptacle
reception
receptive
receptor
recess
recession
recessive
recherche
recife
recipe
recipient
reciprocal
reciprocate
reciprocity
recital
recitative
reck
reckon
reclamation
recline
recluse
recombinant
recompense
reconcile
recondite
reconnaissance
recovery
recriminate
recriminatory
recruit
rectangle
rectangular
rectifier
rectify
rectilinear
rectitude
rector
rectory
recumbent
recuperate
recur
recurred
recurrent
recurring
recursion
recusant
recuse
red
redact
redactor
redbird
redbud
redcoat
redden
reddish
redemption
redemptive
redhead
redmond
redneck
redound
redpoll
redshank
redstart
redstone
redtop
reduce
reducible
redundant
redwood
reed
reedbuck
reedy
reef
reek
reel
reese
reeve
reeves
refection
refectory
refer
referable
referee
refereeing
referenda
referendum
referent
referential
referral
referred
referring
refinery
reflect
reflectance
reflector
reflexive
reformatory
refract
refractometer
refractory
refrain
refrigerate
refuge
refugee
refusal
refutation
refute
regal
regale
regalia
regard
regatta
regent
regime
regimen
regiment
regimentation
regina
reginald
region
regional
regis
registrable
registrant
registrar
registration
registry
regress
regression
regressive
regret
regretful
regrettable
regretted
regretting
regular
regulate
regulatory
regulus
regurgitate
rehabilitate
rehearsal
rehearse
reich
reid
reign
reilly
reimbursable
reimburse
rein
reindeer
reinforce
reinhold
reinstate
reject
rejecter
rejoice
rejoinder
rejuvenate
relate
relaxation
relayed
releasable
relevant
reliant
relic
relict
relief
relieve
religion
religiosity
religious
relinquish
reliquary
relish
reluctant
remainder
reman
remand
remark
rembrandt
remediable
remedial
remedy
remember
remembrance
remington
reminisce
reminiscent
remiss
remission
remit
remittance
remitted
remitting
remnant
remonstrate
remorse
remorseful
remote
removal
remunerate
remus
rena
renaissance
renal
renault
rend
render
rendezvous
rendition
rene
renegotiable
renewal
renoir
renounce
renovate
renown
rensselaer
rent
rental
renunciate
rep
repairman
repairmen
reparation
repartee
repeal
repeat
repeater
repel
repelled
repellent
repelling
repent
repentant
repertoire
repertory
repetition
repetitious
repetitive
replaceable
replenish
replete
replica
replicate
report
reportorial
repository
reprehensible
representative
repression
repressive
reprieve
reprimand
reprisal
reprise
reproach
reptile
reptilian
republic
republican
repudiate
repugnant
repulsion
repulsive
reputation
repute
request
require
requisite
requisition
requited
reredos
rerouted
rerouting
rescind
rescue
resemblant
resemble
resent
resentful
reserpine
reservation
reserve
reservoir
reside
resident
residential
residual
residuary
residue
residuum
resign
resignation
resilient
resin
resiny
resist
resistant
resistible
resistive
resistor
resolute
resolution
resolve
resonant
resonate
resorcinol
resort
resourceful
respect
respecter
respectful
respiration
respirator
respiratory
respire
respite
resplendent
respond
respondent
response
responsible
responsive
rest
restaurant
restaurateur
restful
restitution
restive
restoration
restorative
restrain
restraint
restrict
restroom
result
resultant
resume
resuming
resumption
resurgent
resurrect
resuscitate
ret
retail
retain
retaliate
retaliatory
retard
retardant
retardation
retch
retention
retentive
reticent
reticulate
reticulum
retina
retinal
retinue
retire
retiree
retort
retract
retribution
retrieval
retrieve
retroactive
retrofit
retrofitted
retrofitting
retrograde
retrogress
retrogression
retrogressive
retrorocket
retrospect
retrovision
return
reub
reuben
reuters
rev
reveal
revel
revelation
revelatory
revelry
revenge
revenue
rever
reverberate
revere
reverend
reverent
reverie
reversal
reverse
reversible
reversion
revert
revertive
revery
revet
revile
revisable
revisal
revise
revision
revisionary
revival
revive
revocable
revoke
revolt
revolution
revolutionary
revolve
revulsion
revved
revving
reward
rex
reykjavik
reynolds
rhapsodic
rhapsody
rhea
rhenish
rhenium
rheology
rheostat
rhesus
rhetoric
rhetorician
rheum
rheumatic
rheumatism
rhine
rhinestone
rhino
rhinoceros
rho
rhoda
rhode
rhodes
rhodesia
rhodium
rhododendron
rhodolite
rhodonite
rhombi
rhombic
rhombohedral
rhombus
rhubarb
rhyme
rhythm
rhythmic
ri
rib
ribald
ribbon
riboflavin
ribonucleic
ribose
ribosome
rica
rice
rich
richard
richards
richardson
richfield
richmond
richter
rick
rickets
rickettsia
rickety
rickshaw
rico
ricochet
rid
riddance
ridden
riddle
ride
ridge
ridgepole
ridgway
ridicule
ridiculous
riemann
riemannian
riffle
rifle
rifleman
riflemen
rift
rig
riga
rigel
rigging
riggs
right
righteous
rightful
rightmost
rightward
rigid
rigorous
riley
rill
rilly
rim
rime
rimy
rinehart
ring
ringlet
ringmaster
ringside
rink
rinse
rio
riordan
riot
riotous
rip
riparian
ripe
ripen
ripley
ripoff
ripple
rise
risen
risible
risk
risky
ritchie
rite
ritter
ritual
ritz
rival
rivalry
riven
river
riverbank
riverfront
riverine
riverside
rivet
riviera
rivulet
riyadh
rna
roach
road
roadbed
roadblock
roadhouse
roadside
roadster
roadway
roam
roar
roast
rob
robbery
robbin
robbins
robe
robert
roberta
roberto
roberts
robertson
robin
robinson
robot
robotic
robotics
robust
rocco
rochester
rock
rockabye
rockaway
rockbound
rockefeller
rocket
rockford
rockies
rockland
rockwell
rocky
rococo
rod
rode
rodent
rodeo
rodgers
rodney
rodriguez
roe
roebuck
roentgen
roger
rogers
rogue
roil
roister
roland
role
roll
rollback
rollick
rollins
roman
romance
romania
romano
romantic
rome
romeo
romp
romulus
ron
ronald
rondo
ronnie
rood
roof
rooftop
rooftree
rook
rookie
rooky
room
roomful
roommate
roomy
roosevelt
rooseveltian
roost
root
rope
rosa
rosalie
rosary
rose
rosebud
rosebush
roseland
rosemary
rosen
rosenberg
rosenblum
rosenthal
rosenzweig
rosetta
rosette
ross
roster
rostrum
rosy
rot
rotarian
rotary
rotate
rotc
rote
rotenone
roth
rothschild
rotogravure
rotor
rototill
rotten
rotund
rotunda
rouge
rough
roughcast
roughen
roughish
roughneck
roughshod
roulette
round
roundabout
roundhead
roundhouse
roundoff
roundtable
roundup
roundworm
rouse
rousseau
roustabout
rout
route
routine
rove
row
rowboat
rowdy
rowe
rowena
rowland
rowley
roxbury
roy
royal
royalty
royce
rpm
rsvp
ruanda
rub
rubbery
rubbish
rubble
rubdown
rube
ruben
rubicund
rubidium
rubin
rubric
ruby
ruckus
rudder
ruddy
rude
rudiment
rudimentary
rudolf
rudolph
rudy
rudyard
rue
rueful
ruff
ruffian
ruffle
rufous
rufus
rug
ruin
ruination
ruinous
rule
rum
rumania
rumble
rumen
rumford
ruminant
ruminate
rummage
rummy
rump
rumple
rumpus
run
runabout
runaway
rundown
rune
rung
runge
runic
runneth
runnymede
runoff
runt
runty
runway
runyon
rupee
rupture
rural
ruse
rush
rushmore
rusk
russ
russell
russet
russia
russo
russula
rust
rustic
rustle
rustproof
rusty
rut
rutabaga
rutgers
ruth
ruthenium
rutherford
ruthless
rutile
rutland
rutledge
rutty
rwanda
ryan
rydberg
ryder
rye
s
sa
sabbath
sabbatical
sabina
sabine
sable
sabotage
sabra
sac
saccade
saccharine
sachem
sachs
sack
sacral
sacrament
sacramento
sacred
sacrifice
sacrificial
sacrilege
sacrilegious
sacrosanct
sad
sadden
saddle
saddlebag
sadie
sadism
sadist
sadler
safari
safe
safeguard
safekeeping
safety
saffron
sag
saga
sagacious
sagacity
sage
sagebrush
sagging
saginaw
sagittal
sagittarius
sago
saguaro
sahara
said
saigon
sail
sailboat
sailfish
sailor
saint
sainthood
sake
sal
salaam
salacious
salad
salamander
salami
salaried
salary
sale
salem
salerno
salesgirl
salesian
saleslady
salesman
salesmen
salesperson
salient
salina
saline
salisbury
salish
saliva
salivary
salivate
salk
salle
sallow
sally
salmon
salmonberry
salmonella
salon
saloon
saloonkeep
saloonkeeper
salsify
salt
saltbush
saltwater
salty
salubrious
salutary
salutation
salute
salvador
salvage
salvageable
salvation
salvatore
salve
salvo
sam
samarium
samba
same
sammy
samoa
samovar
sample
sampson
samson
samuel
samuelson
san
sana
sanatoria
sanatorium
sanborn
sanchez
sancho
sanctify
sanctimonious
sanction
sanctity
sanctuary
sand
sandal
sandalwood
sandbag
sandblast
sandburg
sanderling
sanders
sanderson
sandhill
sandia
sandman
sandpaper
sandpile
sandpiper
sandra
sandstone
sandusky
sandwich
sandy
sane
sanford
sang
sangaree
sanguinary
sanguine
sanguineous
sanhedrin
sanicle
sanitarium
sanitary
sanitate
sank
sans
sanskrit
santa
santayana
santiago
santo
sao
sap
sapiens
sapient
sapling
saponify
sapphire
sappy
sapsucker
sara
saracen
sarah
saran
sarasota
saratoga
sarcasm
sarcastic
sarcoma
sarcophagus
sardine
sardonic
sargent
sari
sarsaparilla
sarsparilla
sash
sashay
saskatchewan
saskatoon
sassafras
sat
satan
satan
satanic
satellite
satiable
satiate
satiety
satin
satire
satiric
satisfaction
satisfactory
satisfy
saturable
saturate
saturater
saturday
saturn
saturnalia
saturnine
satyr
sauce
saucepan
saucy
saud
saudi
sauerkraut
saul
sault
saunders
sausage
saute
sauterne
savage
savagery
savannah
savant
save
saviour
savonarola
savoy
savoyard
savvy
saw
sawbelly
sawdust
sawfish
sawfly
sawmill
sawtimber
sawtooth
sawyer
sax
saxifrage
saxon
saxony
saxophone
say
sc
scab
scabbard
scabious
scabrous
scaffold
scala
scalar
scald
scale
scallop
scalp
scam
scamp
scan
scandal
scandalous
scandinavia
scandium
scant
scanty
scapegoat
scapula
scapular
scar
scarborough
scarce
scare
scarecrow
scarf
scarface
scarify
scarlatti
scarlet
scarsdale
scarves
scary
scat
scathe
scatterbrain
scattergun
scaup
scavenge
scenario
scene
scenery
scenic
scent
sceptic
schaefer
schafer
schantz
schedule
schelling
schema
schemata
schematic
scheme
schenectady
scherzo
schiller
schism
schist
schizoid
schizomycetes
schizophrenia
schizophrenic
schlesinger
schlieren
schlitz
schloss
schmidt
schmitt
schnabel
schnapps
schneider
schoenberg
schofield
scholar
scholastic
school
schoolbook
schoolboy
schoolgirl
schoolgirlish
schoolhouse
schoolmarm
schoolmaster
schoolmate
schoolroom
schoolteacher
schoolwork
schooner
schottky
schroeder
schroedinger
schubert
schultz
schulz
schumacher
schumann
schuster
schuyler
schuylkill
schwab
schwartz
schweitzer
sci
sciatica
science
scientific
scientist
scimitar
scintillate
scion
scissor
sclerosis
sclerotic
scm
scoff
scold
scoop
scoot
scope
scopic
scops
scorch
score
scoreboard
scorecard
scoria
scorn
scornful
scorpio
scorpion
scot
scotch
scotia
scotland
scotsman
scotsmen
scott
scottish
scottsdale
scotty
scoundrel
scour
scourge
scout
scowl
scrabble
scraggly
scram
scramble
scranton
scrap
scrapbook
scrape
scratch
scratchy
scrawl
scrawny
scream
screech
screechy
screed
screen
screenplay
screw
screwball
screwbean
screwdriver
screwworm
scribble
scribe
scribners
scrim
scrimmage
scripps
script
scription
scriptural
scripture
scriven
scroll
scrooge
scrotum
scrounge
scrub
scrumptious
scruple
scrupulosity
scrupulous
scrutable
scrutiny
scuba
scud
scuff
scuffle
scull
sculpin
sculpt
sculptor
sculptural
sculpture
scum
scurrilous
scurry
scurvy
scuttle
scutum
scylla
scythe
scythia
sd
se
sea
seaboard
seacoast
seafare
seafood
seagram
seagull
seahorse
seal
sealant
seam
seaman
seamen
seamstress
seamy
sean
seance
seaport
seaquake
sear
search
searchlight
sears
seashore
seaside
season
seasonal
seat
seater
seattle
seaward
seaweed
sebastian
sec
secant
secede
secession
seclude
seclusion
second
secondary
secondhand
secrecy
secret
secretarial
secretariat
secretary
secrete
secretion
secretive
sect
sectarian
section
sector
sectoral
secular
secure
sedan
sedate
sedentary
seder
sedge
sediment
sedimentary
sedimentation
sedition
seditious
seduce
seduction
seductive
sedulous
see
seeable
seed
seedbed
seedling
seedy
seeing
seek
seem
seen
seep
seepage
seersucker
seethe
seethed
seething
segment
segmentation
segovia
segregant
segregate
segundo
seidel
seismic
seismograph
seismography
seismology
seize
seizure
seldom
select
selectman
selectmen
selector
selectric
selena
selenate
selenite
selenium
self
selfadjoint
selfish
selfridge
selkirk
sell
seller
sellout
selma
seltzer
selves
selwyn
semantic
semaphore
semblance
semester
semi
seminal
seminar
seminarian
seminary
seminole
semiramis
semite
semitic
semper
sen
senate
senatorial
send
seneca
senegal
senile
senior
senor
senora
senorita
sensate
sense
sensible
sensitive
sensor
sensorimotor
sensory
sensual
sensuous
sent
sentence
sentential
sentient
sentiment
sentinel
sentry
seoul
sepal
separable
separate
sepia
sepoy
sept
septa
septate
september
septennial
septic
septillion
septuagenarian
septum
sepuchral
sepulchral
seq
sequel
sequent
sequential
sequester
sequestration
sequin
sequitur
sequoia
sera
seraglio
serape
seraphim
serbia
serenade
serendipitous
serendipity
serene
serf
serfdom
serge
sergeant
sergei
serial
seriate
seriatim
series
serif
serine
serious
sermon
serology
serpens
serpent
serpentine
serum
servant
serve
service
serviceable
serviceberry
serviceman
servicemen
serviette
servile
servitor
servitude
servo
servomechanism
sesame
session
set
setback
seth
seton
setscrew
settle
setup
seven
sevenfold
seventeen
seventeenth
seventh
seventieth
seventy
sever
several
severalfold
severalty
severe
severn
seville
sew
sewage
seward
sewerage
sewn
sex
sextans
sextet
sextillion
sexton
sextuple
sextuplet
sexual
sexy
seymour
sforzando
shabby
shack
shackle
shad
shadbush
shade
shadflower
shadow
shadowy
shady
shafer
shaffer
shaft
shag
shagbark
shagging
shaggy
shah
shake
shakeable
shakedown
shaken
shakespeare
shakespearean
shakespearian
shako
shaky
shale
shall
shallot
shallow
shalom
sham
shamble
shame
shameface
shamefaced
shameful
shampoo
shamrock
shanghai
shank
shannon
shantung
shanty
shape
shapiro
shard
share
sharecrop
shareholder
shareown
shari
shark
sharon
sharp
sharpe
sharpen
sharpshoot
shasta
shatter
shatterproof
shattuck
shave
shaven
shaw
shawl
shawnee
shay
she
shea
sheaf
shear
shearer
sheath
sheathe
sheave
shed
shedir
sheehan
sheen
sheep
sheepskin
sheer
sheet
sheffield
sheik
sheila
shelby
sheldon
shelf
shell
shelley
shelter
shelton
shelve
shenandoah
shenanigan
shepard
shepherd
sheppard
sheraton
sherbet
sheridan
sheriff
sherlock
sherman
sherrill
sherry
sherwin
sherwood
shibboleth
shied
shield
shields
shift
shifty
shill
shiloh
shim
shimmy
shin
shinbone
shine
shingle
shinto
shiny
ship
shipboard
shipbuild
shipbuilding
shiplap
shipley
shipman
shipmate
shipmen
shipshape
shipwreck
shipyard
shire
shirk
shirley
shirt
shirtmake
shish
shitepoke
shiv
shiver
shivery
shmuel
shoal
shock
shockley
shod
shoddy
shoe
shoehorn
shoelace
shoemake
shoestring
shoji
shone
shoo
shoofly
shook
shoot
shop
shopkeep
shopworn
shore
shoreline
short
shortage
shortcoming
shortcut
shorten
shortfall
shorthand
shortish
shortsighted
shortstop
shot
shotbush
shotgun
should
shoulder
shout
shove
shovel
show
showboat
showcase
showdown
showman
showmen
shown
showpiece
showplace
showroom
showy
shrank
shrapnel
shred
shreveport
shrew
shrewd
shrewish
shriek
shrift
shrike
shrill
shrilly
shrimp
shrine
shrink
shrinkage
shrive
shrivel
shroud
shrove
shrub
shrubbery
shrug
shrugging
shrunk
shrunken
shu
shuck
shudder
shuddery
shuffle
shuffleboard
shulman
shun
shunt
shut
shutdown
shutoff
shutout
shuttle
shuttlecock
shy
shylock
sial
siam
siamese
sian
sib
siberia
sibilant
sibley
sibling
sibyl
sic
sicilian
sicily
sick
sicken
sickish
sickle
sicklewort
sickroom
side
sidearm
sideband
sideboard
sidecar
sidelight
sideline
sidelong
sideman
sidemen
sidereal
siderite
sidesaddle
sideshow
sidestep
sidestepping
sidetrack
sidewalk
sidewall
sideway
sidewinder
sidewise
sidle
sidney
siege
siegel
siegfried
sieglinda
siegmund
siemens
siena
sienna
sierra
siesta
sieve
sift
sigh
sight
sightsee
sightseeing
sightseer
sigma
sigmund
sign
signal
signature
signboard
signet
significant
signify
signor
signora
signpost
sikorsky
silage
silane
silas
silent
silhouette
silica
silicate
siliceous
silicic
silicide
silicon
silicone
silk
silken
silkworm
silky
sill
silly
silo
silt
siltation
siltstone
silty
silver
silverman
silversmith
silverware
silvery
sima
similar
simile
similitude
simmer
simmons
simon
simons
simonson
simper
simple
simplectic
simpleminded
simpleton
simplex
simplicial
simplicity
simplify
simplistic
simply
simpson
sims
simulate
simulcast
simultaneity
simultaneous
sin
sinai
since
sincere
sinclair
sine
sinew
sinewy
sinful
sing
singable
singapore
singe
single
singlehanded
singlet
singleton
singsong
singular
sinh
sinister
sinistral
sink
sinkhole
sinter
sinuous
sinus
sinusoid
sinusoidal
sioux
sip
sir
sire
siren
sirius
sis
sisal
siskin
sister
sistine
sisyphean
sisyphus
sit
site
situ
situate
situs
siva
six
sixfold
sixgun
sixteen
sixteenth
sixth
sixtieth
sixty
size
sizzle
skat
skate
skater
skeet
skeletal
skeleton
skeptic
sketch
sketchbook
sketchpad
sketchy
skew
ski
skid
skiddy
skied
skiff
skill
skillet
skillful
skim
skimp
skimpy
skin
skindive
skinny
skip
skipjack
skippy
skirmish
skirt
skit
skittle
skopje
skulk
skull
skullcap
skullduggery
skunk
sky
skye
skyhook
skyjack
skylark
skylight
skyline
skyrocket
skyscrape
skyward
skywave
skyway
slab
slack
slacken
sladang
slag
slain
slake
slam
slander
slanderous
slang
slant
slap
slapstick
slash
slat
slate
slater
slaughter
slaughterhouse
slav
slave
slavery
slavic
slavish
slavonic
slay
sled
sledge
sledgehammer
sleek
sleep
sleepwalk
sleepy
sleet
sleety
sleeve
sleigh
sleight
slender
slept
sleuth
slew
slice
slick
slid
slide
slight
slim
slime
slimy
sling
slingshot
slip
slippage
slippery
slit
slither
sliver
slivery
sloan
sloane
slob
slocum
sloe
slog
slogan
sloganeer
slogging
sloop
slop
slope
sloppy
slosh
slot
sloth
slothful
slouch
slough
slovakia
sloven
slovenia
slow
slowdown
sludge
slug
slugging
sluggish
sluice
slum
slumber
slump
slung
slur
slurp
slurry
slut
sly
smack
small
smaller
smalley
smallish
smallpox
smalltime
smart
smash
smatter
smattering
smear
smell
smelt
smile
smirk
smith
smithereens
smithfield
smithson
smithsonian
smithy
smitten
smog
smoke
smokehouse
smokescreen
smokestack
smoky
smolder
smooch
smooth
smoothbore
smother
smucker
smudge
smudgy
smug
smuggle
smut
smutty
smyrna
smythe
snack
snafu
snag
snagging
snail
snake
snakebird
snakelike
snakeroot
snap
snapback
snapdragon
snappish
snappy
snapshot
snare
snark
snarl
snatch
snazzy
sneak
sneaky
sneer
sneeze
snell
snick
snider
sniff
sniffle
sniffly
snifter
snigger
snip
snipe
snippet
snippy
snivel
snob
snobbery
snobbish
snook
snoop
snoopy
snore
snorkel
snort
snotty
snout
snow
snowball
snowfall
snowflake
snowmobile
snowshoe
snowstorm
snowy
snub
snuff
snuffer
snuffle
snuffly
snug
snuggle
snuggly
snyaptic
snyder
so
soak
soap
soapstone
soapsud
soapy
soar
sob
sober
sobriety
sobriquet
soc
soccer
sociable
social
societal
societe
society
socioeconomic
sociology
sociometry
sock
socket
sockeye
socrates
socratic
sod
soda
sodden
sodium
sofa
soffit
sofia
soft
softball
soften
software
softwood
soggy
soignee
soil
soiree
sojourn
sol
solace
solar
sold
solder
soldier
soldiery
sole
solecism
solemn
solemnity
solenoid
solicit
solicitation
solicitor
solicitous
solicitude
solid
solidarity
solidify
solidus
soliloquy
solipsism
solitaire
solitary
soliton
solitude
solo
solomon
solon
solstice
soluble
solute
solution
solvate
solve
solvent
soma
somal
somali
somatic
somber
sombre
some
somebody
someday
somehow
someone
someplace
somers
somersault
somerset
somerville
something
sometime
somewhat
somewhere
sommelier
sommerfeld
somnolent
son
sonant
sonar
sonata
song
songbag
songbook
songful
sonic
sonnet
sonny
sonogram
sonoma
sonora
sonority
sonorous
sony
soon
soot
sooth
soothe
soothsay
soothsayer
sop
sophia
sophia
sophie
sophism
sophisticate
sophistry
sophoclean
sophocles
sophomore
sophomoric
soprano
sora
sorb
sorcery
sordid
sore
sorensen
sorenson
sorghum
sorority
sorption
sorrel
sorrow
sorrowful
sorry
sort
sortie
sou
souffle
sough
sought
soul
soulful
sound
soundproof
soup
sour
sourberry
source
sourdough
sourwood
sousa
soutane
south
southampton
southbound
southeast
southeastern
southern
southernmost
southey
southland
southpaw
southward
southwest
southwestern
souvenir
sovereign
sovereignty
soviet
sovkhoz
sow
sowbelly
sown
soy
soya
soybean
spa
space
spacecraft
spacesuit
spacetime
spacious
spade
spaghetti
spain
spalding
span
spandrel
spangle
spaniard
spaniel
spanish
spar
spare
sparge
spark
sparkle
sparkman
sparky
sparling
sparrow
sparse
sparta
spartan
spasm
spastic
spat
spate
spatial
spatlum
spatterdock
spatula
spaulding
spavin
spawn
spay
spayed
speak
speakeasy
spear
spearhead
spearmint
spec
special
specie
species
specific
specify
specimen
specious
speck
speckle
spectacle
spectacular
spectator
spector
spectra
spectral
spectrogram
spectrograph
spectrography
spectrometer
spectrophotometer
spectroscope
spectroscopic
spectroscopy
spectrum
specular
speculate
sped
speech
speed
speedboat
speedometer
speedup
speedwell
speedy
spell
spellbound
spencer
spencerian
spend
spent
sperm
spermatophyte
sperry
spew
sphagnum
sphalerite
sphere
spheric
spheroid
spheroidal
spherule
sphinx
spica
spice
spicebush
spicy
spider
spiderwort
spidery
spiegel
spigot
spike
spikenard
spiky
spill
spilt
spin
spinach
spinal
spindle
spine
spinnaker
spinneret
spinodal
spinoff
spinster
spiny
spiral
spire
spirit
spiritual
spiro
spit
spite
spiteful
spitfire
spittle
spitz
splash
splashy
splat
splay
splayed
spleen
spleenwort
splendid
splenetic
splice
spline
splint
splintery
split
splotch
splotchy
splurge
splutter
spoil
spoilage
spokane
spoke
spoken
spokesman
spokesmen
spokesperson
sponge
spongy
sponsor
spontaneity
spontaneous
spoof
spook
spooky
spool
spoon
spoonful
sporadic
spore
sport
sportsman
sportsmen
sportswear
sportswrite
sportswriter
sportswriting
sporty
spot
spotlight
spotty
spouse
spout
sprague
sprain
sprang
sprawl
spray
spread
spree
sprig
sprightly
spring
springboard
springe
springfield
springtail
springtime
springy
sprinkle
sprint
sprite
sprocket
sproul
sprout
spruce
sprue
sprung
spud
spume
spumoni
spun
spunk
spur
spurge
spurious
spurn
spurt
sputnik
sputter
spy
spyglass
squabble
squad
squadron
squalid
squall
squamous
squander
square
squash
squashberry
squashy
squat
squatted
squatter
squatting
squaw
squawbush
squawk
squawroot
squeak
squeaky
squeal
squeamish
squeegee
squeeze
squelch
squibb
squid
squill
squint
squire
squirehood
squirm
squirmy
squirrel
squirt
squishy
sri
sse
sst
ssw
st
st
stab
stabile
stable
stableman
stablemen
staccato
stack
stacy
stadia
stadium
staff
stafford
stag
stage
stagecoach
stagestruck
stagnant
stagnate
stagy
stahl
staid
stain
stair
staircase
stairway
stairwell
stake
stalactite
stale
stalemate
staley
stalin
stalk
stall
stallion
stalwart
stamen
stamford
stamina
staminate
stammer
stamp
stampede
stan
stance
stanch
stanchion
stand
standard
standby
standeth
standish
standoff
standpoint
standstill
stanford
stanhope
stank
stanley
stannic
stannous
stanton
stanza
staph
staphylococcus
staple
stapleton
star
starboard
starch
starchy
stardom
stare
starfish
stargaze
stark
starkey
starlet
starlight
starling
starr
start
startle
startup
starvation
starve
stash
stasis
state
staten
stater
stateroom
statesman
statesmanlike
statesmen
statewide
static
stationarity
stationary
stationery
stationmaster
statistician
statler
stator
statuary
statue
statuette
stature
status
statute
statutory
stauffer
staunch
staunton
stave
stay
stayed
stead
steadfast
steady
steak
steal
stealth
stealthy
steam
steamboat
steamy
stearate
stearic
stearns
steed
steel
steele
steelmake
steely
steen
steep
steepen
steeple
steeplebush
steeplechase
steer
steeve
stefan
stegosaurus
stein
steinberg
steiner
stella
stella
stellar
stem
stench
stencil
stenographer
stenography
stenotype
step
stepchild
stephanie
stephanotis
stephen
stephens
stephenson
stepmother
steppe
steprelation
stepson
stepwise
steradian
stereo
stereography
stereoscopy
sterile
sterling
stern
sternal
sternberg
sterno
sternum
steroid
stethoscope
stetson
steuben
steve
stevedore
steven
stevens
stevenson
stew
steward
stewardess
stewart
stick
stickle
stickleback
stickpin
sticktight
sticky
stiff
stiffen
stifle
stigma
stigmata
stile
stiletto
still
stillbirth
stillwater
stilt
stimulant
stimulate
stimulatory
stimuli
stimulus
sting
stingy
stink
stinkpot
stinky
stint
stipend
stipple
stipulate
stir
stirling
stirrup
stitch
stochastic
stock
stockade
stockbroker
stockholder
stockholm
stockpile
stockroom
stockton
stocky
stodgy
stoic
stoichiometry
stoke
stokes
stole
stolen
stolid
stomach
stomp
stone
stonecrop
stonehenge
stonewall
stoneware
stonewort
stony
stood
stooge
stool
stoop
stop
stopband
stopcock
stopgap
stopover
stoppage
stopwatch
storage
store
storehouse
storekeep
storeroom
storey
stork
storm
stormbound
stormy
story
storyboard
storyteller
stout
stove
stow
stowage
stowaway
strabismic
strabismus
straddle
strafe
straggle
straight
straightaway
straighten
straightforward
straightway
strain
strait
strand
strange
strangle
strangulate
strap
strata
stratagem
strategic
strategist
strategy
stratford
stratify
stratosphere
stratospheric
stratton
stratum
strauss
straw
strawberry
strawflower
stray
streak
stream
streamline
streamside
street
streetcar
strength
strengthen
strenuous
streptococcus
streptomycin
stress
stressful
stretch
strewn
striate
stricken
strickland
strict
stricter
stricture
stride
strident
strife
strike
strikebreak
string
stringent
stringy
strip
stripe
striptease
stripy
strive
striven
strobe
stroboscopic
strode
stroke
stroll
strom
stromberg
strong
stronghold
strongroom
strontium
strop
strophe
strove
struck
structural
structure
struggle
strum
strung
strut
strychnine
stu
stuart
stub
stubble
stubborn
stubby
stucco
stuck
stud
studebaker
student
studio
studious
study
stuff
stuffy
stultify
stumble
stump
stumpage
stumpy
stun
stung
stunk
stunt
stupefaction
stupefy
stupendous
stupid
stupor
sturbridge
sturdy
sturgeon
sturm
stutter
stuttgart
stuyvesant
stygian
style
styli
stylish
stylites
stylus
stymie
styrene
styrofoam
styx
suave
sub
subject
subjectivity
subjunctive
sublimate
subliminal
submersible
submit
submittal
submitted
submitting
subpoena
subrogation
subservient
subsidiary
subsidy
subsist
subsistent
substantial
substantiate
substantive
substituent
substitute
substitution
substitutionary
substrate
subsume
subsumed
subsuming
subterfuge
subterranean
subtle
subtlety
subtly
subtracter
subtrahend
suburb
suburbia
subversive
subvert
succeed
success
successful
succession
successive
successor
succinct
succubus
succumb
such
suck
suckling
sucrose
suction
sud
sudan
sudanese
sudden
suds
sue
suey
suez
suffer
suffice
sufficient
suffix
suffocate
suffolk
suffrage
suffragette
suffuse
sugar
suggest
suggestible
suggestion
suggestive
suicidal
suicide
suit
suitcase
suite
suitor
sulfa
sulfanilamide
sulfate
sulfide
sulfite
sulfonamide
sulfur
sulfuric
sulfurous
sulk
sulky
sullen
sullivan
sully
sulphur
sultan
sultanate
sultry
sum
sumac
sumatra
sumeria
sumerian
summand
summarily
summary
summate
summation
summers
summertime
summit
summitry
summon
sumner
sumptuous
sumter
sun
sunbeam
sunbonnet
sunburn
sunburnt
sunday
sunder
sundew
sundial
sundown
sundry
sunfish
sunflower
sung
sunglasses
sunk
sunken
sunlight
sunlit
sunny
sunnyvale
sunrise
sunscreen
sunset
sunshade
sunshine
sunshiny
sunspot
suntan
suntanned
suntanning
suny
sup
super
superannuate
superb
superbly
supercilious
superficial
superfluity
superfluous
superintendent
superior
superlative
superlunary
supernatant
supernovae
superposable
supersede
superstition
superstitious
supervene
supervisory
supine
supplant
supple
supplementary
supplicate
supply
support
supposable
suppose
supposition
suppress
suppressible
suppression
suppressor
supra
supranational
supremacy
supreme
supremum
surcease
surcharge
sure
surety
surf
surface
surfactant
surfeit
surge
surgeon
surgery
surgical
surjection
surjective
surmise
surmount
surname
surpass
surplus
surprise
surreal
surrender
surreptitious
surrey
surrogate
surround
surtax
surtout
surveillant
survey
surveyor
survival
survive
survivor
sus
susan
susanne
susceptance
susceptible
sushi
susie
suspect
suspend
suspense
suspension
suspensor
suspicion
suspicious
sussex
sustain
sustenance
sutherland
sutton
suture
suzanne
suzerain
suzerainty
suzuki
svelte
sw
swab
swabby
swag
swage
swahili
swain
swallow
swallowtail
swam
swami
swamp
swampy
swan
swank
swanky
swanlike
swanson
swap
swarm
swart
swarthmore
swarthout
swarthy
swastika
swat
swatch
swath
swathe
sway
swaziland
swear
sweat
sweatband
sweater
sweatshirt
sweaty
swede
sweden
swedish
sweeney
sweep
sweepstake
sweet
sweeten
sweetheart
sweetish
swell
swelt
swelter
swenson
swept
swerve
swift
swig
swigging
swim
swimsuit
swindle
swine
swing
swingable
swingy
swipe
swirl
swirly
swish
swishy
swiss
switch
switchblade
switchboard
switchgear
switchman
switzer
switzerland
swivel
swizzle
swollen
swoop
sword
swordfish
swordplay
swordtail
swore
sworn
swum
swung
sybarite
sybil
sycamore
sycophant
sycophantic
sydney
syenite
sykes
syllabi
syllabic
syllabify
syllable
syllabus
syllogism
syllogistic
sylow
sylvan
sylvania
sylvester
sylvia
symbiosis
symbiotic
symbol
symbolic
symmetry
sympathetic
sympathy
symphonic
symphony
symplectic
symposia
symposium
symptom
symptomatic
synagogue
synapse
synapses
synaptic
synchronism
synchronous
synchrony
synchrotron
syncopate
syndic
syndicate
syndrome
synergism
synergistic
synergy
synge
synod
synonym
synonymous
synonymy
synopses
synopsis
synoptic
syntactic
syntax
syntheses
synthesis
synthetic
syracuse
syria
syringa
syringe
syrinx
syrup
syrupy
system
systematic
systemic
systemization
systemwide
syzygy
szilard
t
ta
tab
tabernacle
table
tableau
tableaux
tablecloth
tableland
tablespoon
tablespoonful
tablet
tabloid
taboo
tabu
tabula
tabular
tabulate
tachinid
tachistoscope
tachometer
tacit
tacitus
tack
tackle
tacky
tacoma
tact
tactful
tactic
tactician
tactile
tactual
tad
tadpole
taffeta
taffy
taft
taft
tag
tagging
tahiti
tahoe
tail
tailgate
tailor
tailspin
tailwind
taint
taipei
taiwan
take
taken
takeoff
takeover
taketh
talc
talcum
tale
talent
talisman
talismanic
talk
talkative
talkie
talky
tall
tallahassee
tallow
tally
tallyho
talmud
talon
talus
tam
tamale
tamarack
tamarind
tambourine
tame
tammany
tamp
tampa
tampon
tan
tanager
tanaka
tananarive
tandem
tang
tangent
tangential
tangerine
tangible
tangle
tango
tangy
tanh
tank
tannin
tansy
tantalum
tantalus
tantamount
tantrum
tanya
tanzania
tao
taoist
taos
tap
tapa
tape
taper
tapestry
tapeworm
tapir
tapis
tappa
tappet
tar
tara
tarantara
tarantula
tarbell
tardy
target
tariff
tarnish
tarpaper
tarpaulin
tarpon
tarry
tarrytown
tart
tartar
tartary
tarzan
task
taskmaster
tasmania
tass
tassel
taste
tasteful
tasting
tasty
tat
tate
tater
tattle
tattler
tattletale
tattoo
tatty
tau
taught
taunt
taurus
taut
tautology
tavern
taverna
tawdry
tawny
tax
taxation
taxi
taxicab
taxied
taxiway
taxonomic
taxonomy
taxpayer
taxpaying
taylor
tea
teacart
teach
teacup
teahouse
teakettle
teakwood
teal
team
teammate
teamster
teamwork
teapot
tear
teardrop
tearful
tease
teasel
teaspoon
teaspoonful
teat
tech
technetium
technic
technician
technion
technique
technocrat
technocratic
technology
tectonic
tecum
ted
ted
teddy
tedious
tedium
tee
teeing
teem
teen
teenage
teensy
teet
teeter
teeth
teethe
teethed
teething
teetotal
teflon
tegucigalpa
teheran
tehran
tektite
tektronix
tel
telecommunicate
teleconference
teledyne
telefunken
telegram
telegraph
telegraphy
telekinesis
telemeter
teleology
teleost
telepathic
telepathy
telephone
telephonic
telephony
telephotography
teleprinter
teleprocessing
teleprompter
telescope
telescopic
telethon
teletype
teletypesetting
teletypewrite
televise
television
telex
tell
teller
telltale
tellurium
temerity
temper
tempera
temperance
temperate
temperature
tempest
tempestuous
template
temple
templeton
tempo
temporal
temporary
tempt
temptation
temptress
ten
tenable
tenacious
tenacity
tenant
tend
tendency
tenderfoot
tenderloin
tendon
tenebrous
tenement
tenet
tenfold
tenneco
tennessee
tenney
tennis
tennyson
tenon
tenor
tense
tensile
tension
tensional
tensor
tenspot
tent
tentacle
tentative
tenterhooks
tenth
tenuous
tenure
tepee
tepid
teratogenic
teratology
terbium
tercel
teresa
term
terminable
terminal
terminate
termini
terminology
terminus
termite
tern
ternary
terpsichore
terpsichorean
terra
terrace
terrain
terramycin
terrapin
terre
terrestrial
terrible
terrier
terrific
terrify
territorial
territory
terror
terry
terse
tertiary
tess
tessellate
test
testament
testamentary
testate
testbed
testes
testicle
testicular
testify
testimonial
testimony
testy
tetanus
tete
tether
tetrachloride
tetrafluoride
tetrafluouride
tetragonal
tetrahedra
tetrahedral
tetrahedron
tetravalent
teutonic
texaco
texan
texas
text
textbook
textile
textron
textual
textural
texture
thai
thailand
thalia
thallium
thallophyte
than
thank
thankful
thanksgiving
that
thatch
thaw
thayer
the
thea
theatric
thebes
thee
theft
their
theism
theist
thelma
them
thematic
theme
themselves
then
thence
thenceforth
theocracy
theodore
theodosian
theologian
theology
theorem
theoretic
theoretician
theorist
theory
therapeutic
therapist
therapy
there
thereabouts
thereafter
thereat
thereby
therefor
therefore
therefrom
therein
thereof
thereon
theresa
thereto
theretofore
thereunder
thereupon
therewith
thermal
thermionic
thermistor
thermo
thermofax
thermostat
thesaurus
these
theses
theseus
thesis
thespian
theta
thetis
they
thiamin
thick
thicken
thicket
thickish
thief
thieves
thieving
thigh
thimble
thimbu
thin
thine
thing
think
thinnish
thiocyanate
thiouracil
third
thirst
thirsty
thirteen
thirteenth
thirtieth
thirty
this
thistle
thistledown
thither
thomas
thomistic
thompson
thomson
thong
thor
thoreau
thoriate
thorium
thorn
thornton
thorny
thorough
thoroughbred
thoroughfare
thoroughgoing
thorpe
thorstein
those
thou
though
thought
thoughtful
thousand
thousandfold
thousandth
thrall
thrash
thread
threadbare
threat
threaten
three
threefold
threesome
threonine
thresh
threshold
threw
thrice
thrift
thrifty
thrill
thrips
thrive
throat
throaty
throb
throes
thrombosis
throne
throng
throttle
through
throughout
throughput
throw
throwaway
throwback
thrown
thrum
thrush
thrust
thruway
thuban
thud
thug
thuggee
thule
thulium
thumb
thumbnail
thump
thunder
thunderbird
thunderbolt
thunderclap
thunderflower
thunderous
thundershower
thunderstorm
thurman
thursday
thus
thwack
thwart
thy
thyme
thymine
thymus
thyratron
thyroglobulin
thyroid
thyroidal
thyronine
thyrotoxic
thyroxine
ti
tiber
tibet
tibet
tibetan
tibia
tic
tick
ticket
tickle
ticklish
tid
tidal
tidbit
tide
tideland
tidewater
tidy
tie
tied
tientsin
tier
tiffany
tift
tiger
tight
tighten
tigress
tigris
til
tilde
tile
till
tilt
tilth
tim
timber
timberland
timbre
time
timeout
timepiece
timeshare
timetable
timeworn
timex
timid
timon
timothy
tin
tina
tincture
tinder
tine
tinfoil
tinge
tingle
tinker
tinkle
tinsel
tint
tintype
tiny
tioga
tip
tipoff
tipperary
tipple
tippy
tipsy
tiptoe
tirade
tirana
tire
tiresome
tissue
tit
titan
titanate
titanic
titanium
tithe
titian
titillate
title
titmouse
titrate
titular
titus
tn
tnt
to
toad
toady
toast
toastmaster
tobacco
tobago
toby
toccata
today
todd
toddle
toe
toefl
toenail
toffee
tofu
tog
together
togging
toggle
togo
togs
toil
toilet
toiletry
toilsome
tokamak
token
tokyo
told
toledo
tolerable
tolerant
tolerate
toll
tollgate
tollhouse
tolstoy
toluene
tom
tomato
tomatoes
tomb
tombstone
tome
tomlinson
tommie
tommy
tomograph
tomography
tomorrow
tompkins
ton
tonal
tone
tong
tongue
toni
tonic
tonight
tonk
tonnage
tonsil
tonsillitis
tony
too
toodle
took
tool
toolkit
toolmake
toolsmith
toot
tooth
toothbrush
toothpaste
toothpick
tootle
top
topaz
topcoat
topeka
topgallant
topic
topmost
topnotch
topocentric
topography
topologize
topology
topple
topsoil
topsy
tor
torah
torah
torch
tore
tori
torn
tornado
toroid
toroidal
toronto
torpedo
torpid
torpor
torque
torr
torrance
torrent
torrid
torsion
torso
tort
tortoise
tortoiseshell
tortuous
torture
torus
tory
toshiba
toss
tot
total
totalitarian
tote
totem
totemic
touch
touchdown
touchstone
touchy
tough
tour
tournament
tousle
tout
tow
toward
towboat
towel
tower
towhead
towhee
town
townhouse
townsend
townsman
townsmen
toxic
toxicology
toxin
toy
toyota
trace
traceable
tracery
trachea
track
trackage
tract
tractor
tracy
trade
trademark
tradeoff
tradesman
tradesmen
tradition
traffic
trafficked
trafficking
trag
tragedian
tragedy
tragic
tragicomic
trail
trailblaze
trailhead
trailside
train
trainee
trainman
trainmen
traipse
trait
traitor
traitorous
trajectory
tram
trammel
tramp
trample
tramway
trance
tranquil
tranquillity
transact
transalpine
transatlantic
transceiver
transcend
transcendent
transcendental
transconductance
transcontinental
transcribe
transcript
transcription
transducer
transduction
transect
transept
transfer
transferable
transferee
transference
transferor
transferral
transferred
transferring
transfinite
transfix
transform
transformation
transfusable
transfuse
transfusion
transgress
transgression
transgressor
transient
transistor
transit
transite
transition
transitive
transitory
translate
transliterate
translucent
transmissible
transmission
transmit
transmittable
transmittal
transmittance
transmitted
transmitter
transmitting
transmogrify
transmutation
transmute
transoceanic
transom
transpacific
transparent
transpiration
transpire
transplant
transplantation
transpond
transport
transportation
transposable
transpose
transposition
transship
transshipped
transshipping
transversal
transverse
transvestite
transylvania
trap
trapezium
trapezoid
trapezoidal
trash
trashy
trastevere
trauma
traumatic
travail
travel
travelogue
traversable
traversal
traverse
travertine
travesty
travis
trawl
tray
treacherous
treachery
tread
treadle
treadmill
treason
treasonous
treasure
treasury
treat
treatise
treaty
treble
tree
treetop
trefoil
trek
trellis
tremble
tremendous
tremor
tremulous
trench
trenchant
trencherman
trenchermen
trend
trendy
trenton
trepidation
trespass
tress
trestle
trevelyan
triable
triac
triad
trial
triangle
triangular
triangulate
triangulum
trianon
triassic
triatomic
tribal
tribe
tribesman
tribesmen
tribulate
tribunal
tribune
tributary
tribute
triceratops
trichinella
trichloroacetic
trichloroethane
trichrome
trick
trickery
trickle
trickster
tricky
trident
tridiagonal
tried
triennial
trifle
trifluoride
trifluouride
trig
trigonal
trigonometry
trigram
trihedral
trill
trillion
trillionth
trilobite
trilogy
trim
trimer
trimester
trinidad
trinitarian
trinity
trinket
trio
triode
trioxide
trip
tripartite
tripe
triphenylphosphine
triple
triplet
triplett
triplex
triplicate
tripod
tripoli
triptych
trisodium
tristan
tristate
trisyllable
trite
tritium
triton
triumph
triumphal
triumphant
triune
trivalent
trivia
trivial
trivium
trod
trodden
troglodyte
troika
trojan
troll
trolley
trollop
trombone
trompe
troop
trophic
trophy
tropic
tropopause
troposphere
tropospheric
trot
troubador
trouble
troubleshoot
troublesome
trough
trounce
troupe
trouser
trout
troutman
troy
truancy
truant
truce
truck
truculent
trudge
trudy
true
truism
truly
truman
trumbull
trump
trumpery
trumpet
truncate
trundle
trunk
truss
trust
trustee
trustful
trustworthy
truth
truthful
trw
try
trypsin
trytophan
tsar
tsarina
tsunami
ttl
tty
tub
tuba
tube
tuberculin
tuberculosis
tubular
tubule
tuck
tucker
tucson
tudor
tuesday
tuff
tuft
tug
tugging
tuition
tulane
tularemia
tulip
tulle
tulsa
tum
tumble
tumbrel
tumult
tumultuous
tun
tuna
tundra
tune
tuneful
tung
tungstate
tungsten
tunic
tunis
tunisia
tunnel
tupelo
tuple
turban
turbid
turbidity
turbinate
turbine
turbofan
turbojet
turbulent
turf
turgid
turin
turing
turk
turkey
turkish
turmoil
turn
turnabout
turnaround
turnery
turnip
turnkey
turnoff
turnout
turnover
turnpike
turnstone
turntable
turpentine
turpitude
turquoise
turret
turtle
turtleback
turtleneck
turvy
tuscaloosa
tuscan
tuscany
tuscarora
tusk
tuskegee
tussle
tutelage
tutor
tutorial
tuttle
tutu
tuxedo
tv
tva
twa
twaddle
twain
tweak
tweed
tweedy
tweeze
twelfth
twelve
twentieth
twenty
twice
twiddle
twig
twigging
twilight
twill
twin
twine
twinge
twinkle
twirl
twirly
twist
twisty
twit
twitch
twitchy
two
twofold
twombly
twosome
twx
tx
tyburn
tycoon
tying
tyler
tyndall
type
typeface
typescript
typeset
typesetter
typesetting
typewrite
typewritten
typhoid
typhon
typhoon
typhus
typic
typify
typo
typographer
typography
typology
tyrannic
tyrannicide
tyrannosaurus
tyranny
tyrant
tyrosine
tyson
u
u.s
u.s.a
ubiquitous
ubiquity
ucla
uganda
ugh
ugly
uhf
uk
ukraine
ukrainian
ulan
ulcer
ulcerate
ullman
ulster
ulterior
ultimate
ultimatum
ultra
ulysses
umber
umbilical
umbilici
umbilicus
umbra
umbrage
umbrella
umlaut
umpire
un
unanimity
unanimous
unary
unbeknownst
unbidden
unchristian
uncle
uncouth
unction
under
underclassman
underclassmen
underling
undulate
unesco
uniaxial
unicorn
unidimensional
unidirectional
uniform
unify
unilateral
unimodal
unimodular
uninominal
union
uniplex
unipolar
uniprocessor
unique
uniroyal
unisex
unison
unit
unital
unitarian
unitary
unite
unity
univac
univalent
univariate
universal
universe
unix
unkempt
unruly
until
unwieldy
up
upbeat
upbraid
upbring
upcome
update
updraft
upend
upgrade
upheaval
upheld
uphill
uphold
upholster
upholstery
upkeep
upland
uplift
upon
upper
upperclassman
upperclassmen
uppercut
uppermost
upraise
upright
uprise
upriver
uproar
uproarious
uproot
upset
upsetting
upshot
upside
upsilon
upslope
upstair
upstand
upstart
upstate
upstater
upstream
upsurge
upswing
uptake
upton
uptown
uptrend
upturn
upward
upwind
uracil
urania
uranium
uranus
uranyl
urban
urbana
urbane
urbanite
urchin
urea
uremia
urethane
urethra
urge
urgency
urgent
urging
uri
urinal
urinary
urine
uris
urn
ursa
ursula
ursuline
uruguay
us
usa
usable
usaf
usage
usc
usda
use
useful
usgs
usher
usia
usn
usps
ussr
usual
usurer
usurious
usurp
usurpation
usury
ut
utah
utensil
uterine
uterus
utica
utile
utilitarian
utility
utmost
utopia
utopian
utrecht
utter
utterance
uttermost
v
va
vacant
vacate
vacationland
vaccinate
vaccine
vacillate
vacua
vacuo
vacuolate
vacuole
vacuous
vacuum
vade
vaduz
vagabond
vagary
vagina
vaginal
vagrant
vague
vail
vain
vainglorious
vale
valediction
valedictorian
valedictory
valent
valentine
valerie
valery
valet
valeur
valhalla
valiant
valid
validate
valine
valkyrie
valletta
valley
valois
valparaiso
valuate
value
valve
vamp
vampire
van
vanadium
vance
vancouver
vandal
vandenberg
vanderbilt
vanderpoel
vane
vanguard
vanilla
vanish
vanity
vanquish
vantage
vapid
vaporous
variable
variac
varian
variant
variate
variegate
variety
various
varistor
varitype
varnish
varsity
vary
vascular
vase
vasectomy
vasquez
vassal
vassar
vast
vat
vatican
vaudeville
vaudois
vaughan
vaughn
vault
vaunt
veal
vector
vectorial
veda
vee
veer
veery
vega
vegetable
vegetarian
vegetate
vehement
vehicle
vehicular
veil
vein
velar
velasquez
veldt
vella
vellum
velocity
velours
velvet
velvety
venal
vend
vendetta
vendible
vendor
veneer
venerable
venerate
venereal
venetian
veneto
venezuela
vengeance
vengeful
venial
venice
venison
venom
venomous
venous
vent
ventilate
ventricle
venture
venturesome
venturi
venus
venusian
vera
veracious
veracity
veranda
verandah
verb
verbal
verbatim
verbena
verbiage
verbose
verbosity
verdant
verde
verdi
verdict
verge
veridic
verify
verisimilitude
veritable
verity
verlag
vermeil
vermiculite
vermilion
vermin
vermont
vermouth
verna
vernacular
vernal
verne
vernier
vernon
verona
veronica
versa
versailles
versatec
versatile
verse
version
versus
vertebra
vertebrae
vertebral
vertebrate
vertex
vertical
vertices
vertigo
verve
very
vesicular
vesper
vessel
vest
vestal
vestibule
vestige
vestigial
vestry
vet
vetch
veteran
veterinarian
veterinary
veto
vex
vexation
vexatious
vhf
vi
via
viaduct
vial
vibrant
vibrate
vibrato
viburnum
vicar
vicarious
vice
viceroy
vichy
vicinal
vicinity
vicious
vicissitude
vicksburg
vicky
victim
victor
victoria
victorian
victorious
victory
victrola
victual
vida
vide
video
videotape
vie
vienna
viennese
vientiane
viet
vietnam
vietnamese
view
viewpoint
vigil
vigilant
vigilante
vigilantism
vignette
vigorous
vii
viii
viking
vile
vilify
villa
village
villain
villainous
villein
vincent
vindicate
vindictive
vine
vinegar
vineyard
vinson
vintage
vintner
vinyl
viola
violate
violent
violet
violin
virgil
virgin
virginal
virginia
virginian
virgo
virgule
virile
virtual
virtue
virtuosi
virtuosity
virtuoso
virtuous
virulent
virus
vis
visa
visage
viscera
visceral
viscoelastic
viscometer
viscosity
viscount
viscous
vise
vishnu
visible
visigoth
vision
visionary
visit
visitation
visitor
visor
vista
visual
vita
vitae
vital
vitamin
vitiate
vito
vitreous
vitrify
vitriol
vitriolic
vitro
viva
vivace
vivacious
vivacity
vivaldi
vivian
vivid
vivify
vivo
vixen
viz
vladimir
vladivostok
vocable
vocabularian
vocabulary
vocal
vocalic
vocate
vociferous
vogel
vogue
voice
voiceband
void
volatile
volcanic
volcanism
volcano
volition
volkswagen
volley
volleyball
volstead
volt
volta
voltage
voltaic
voltaire
volterra
voltmeter
voluble
volume
volumetric
voluminous
voluntarism
voluntary
volunteer
voluptuous
volvo
vomit
von
voodoo
voracious
voracity
vortex
vortices
vorticity
voss
votary
vote
votive
vouch
vouchsafe
vought
vow
vowel
voyage
vreeland
vt
vulcan
vulgar
vulnerable
vulpine
vulture
vying
w
wa
waals
wabash
wac
wack
wacke
wacky
waco
wad
waddle
wade
wadi
wadsworth
wafer
waffle
wag
wage
wagging
waggle
wagner
wagoneer
wah
wahl
wail
wainscot
wainwright
waist
waistcoat
waistline
wait
waite
waitress
waive
wake
wakefield
wakeful
waken
wakerobin
wakeup
walcott
walden
waldo
waldorf
waldron
wale
walgreen
walk
walkie
walkout
walkover
walkway
wall
wallaby
wallace
wallboard
waller
wallet
wallis
wallop
wallow
wallpaper
walls
wally
walnut
walpole
walrus
walsh
walt
walter
walters
waltham
walton
waltz
waltzing
wan
wand
wander
wane
wang
wangle
want
wanton
wapato
wapiti
wappinger
war
warble
ward
warden
wardrobe
wardroom
ware
warehouse
warehouseman
warfare
warhead
waring
warlike
warm
warmhearted
warmish
warmonger
warmth
warmup
warn
warp
warplane
warrant
warranty
warren
warrior
warsaw
wart
wartime
warty
warwick
wary
was
wash
washbasin
washboard
washbowl
washburn
washington
washout
washy
wasp
waspish
wasserman
wast
wastage
waste
wastebasket
wasteful
wasteland
wastewater
wastrel
watanabe
watch
watchband
watchdog
watchful
watchmake
watchman
watchmen
watchword
water
waterbury
watercourse
waterfall
waterfront
watergate
waterhouse
waterline
waterloo
waterman
watermelon
waterproof
waters
watershed
waterside
watertown
waterway
watery
watkins
watson
watt
wattage
wattle
watts
wave
waveform
wavefront
waveguide
wavelength
wavelet
wavenumber
wavy
wax
waxen
waxwork
waxy
way
waybill
waylaid
waylay
wayne
wayside
wayward
we
weak
weaken
weal
wealth
wealthy
wean
weapon
weaponry
wear
wearied
wearisome
weary
weasel
weather
weatherbeaten
weatherproof
weatherstrip
weatherstripping
weave
web
webb
weber
webster
weco
wed
wedge
wedlock
wednesday
wee
weed
weedy
week
weekday
weekend
weeks
weep
wehr
wei
weierstrass
weigh
weight
weighty
weinberg
weinstein
weir
weird
weiss
welch
welcome
weld
weldon
welfare
well
wellbeing
weller
welles
wellesley
wellington
wells
welsh
welt
wendell
wendy
went
wept
were
werner
wert
werther
wesley
wesleyan
west
westbound
westchester
westerly
western
westernmost
westfield
westinghouse
westminster
weston
westward
wet
wetland
weyerhauser
whack
whale
whalen
wham
wharf
wharton
wharves
what
whatever
whatley
whatnot
whatsoever
wheat
wheatstone
whee
wheedle
wheel
wheelbase
wheelchair
wheelhouse
wheeze
wheezy
whelan
whelk
wheller
whelm
whelp
when
whence
whenever
where
whereabout
whereas
whereby
wherefore
wherein
whereof
whereon
wheresoever
whereupon
wherever
wherewith
wherewithal
whet
whether
which
whichever
whiff
whig
while
whim
whimper
whimsey
whimsic
whine
whinny
whip
whiplash
whippany
whippet
whipple
whipsaw
whir
whirl
whirligig
whirlpool
whirlwind
whish
whisk
whisper
whistle
whistleable
whit
whitaker
whitcomb
white
whiteface
whitehall
whitehead
whitehorse
whiten
whitetail
whitewash
whither
whitlock
whitman
whitney
whittaker
whittier
whittle
whiz
whizzing
who
whoa
whoever
whole
wholehearted
wholesale
wholesome
wholly
whom
whomever
whomsoever
whoop
whoosh
whop
whore
whose
whosoever
whup
why
wi
wichita
wick
wicket
wide
widen
widespread
widgeon
widget
widow
widowhood
width
widthwise
wield
wiener
wier
wife
wig
wigging
wiggins
wiggle
wiggly
wightman
wigmake
wigwam
wilbur
wilcox
wild
wildcat
wildcatter
wilderness
wildfire
wildlife
wile
wiley
wilfred
wilful
wilhelm
wilhelmina
wilkes
wilkie
wilkins
wilkinson
will
willa
willard
willful
william
williams
williamsburg
williamson
willie
willis
willoughby
willow
willowy
wills
wilma
wilmington
wilshire
wilson
wilsonian
wilt
wily
win
wince
winch
winchester
wind
windbag
windbreak
windfall
windmill
window
windowpane
windowsill
windshield
windsor
windstorm
windsurf
windup
windward
windy
wine
winemake
winemaster
winery
wineskin
winfield
wing
wingback
wingman
wingmen
wingspan
wingtip
winifred
wink
winkle
winnetka
winnie
winnipeg
winnipesaukee
winnow
wino
winslow
winsome
winston
winter
winters
wintertime
winthrop
wintry
winy
wipe
wire
wireman
wiremen
wiretap
wiretapper
wiretapping
wiry
wisconsin
wisdom
wise
wiseacre
wisecrack
wisenheimer
wish
wishbone
wishful
wishy
wisp
wispy
wistful
wit
witch
witchcraft
with
withal
withdraw
withdrawal
withdrawn
withdrew
withe
wither
withheld
withhold
within
without
withstand
withstood
withy
witness
witt
witty
wive
wizard
wobble
woe
woebegone
woeful
wok
woke
wolcott
wold
wolf
wolfe
wolff
wolfgang
wolfish
wolve
wolves
woman
womanhood
womb
wombat
women
won
wonder
wonderful
wonderland
wondrous
wong
wont
woo
wood
woodard
woodbury
woodcarver
woodcock
woodcut
wooden
woodgrain
woodhen
woodland
woodlawn
woodlot
woodpeck
woodrow
woodrow
woodruff
woods
woodshed
woodside
woodward
woodward
woodwind
woodwork
woody
woodyard
wool
woolgather
woolworth
wooster
wop
worcester
word
wordsworth
wordy
wore
work
workaday
workbench
workbook
workday
workforce
workhorse
workload
workman
workmanlike
workmen
workout
workpiece
workplace
worksheet
workshop
workspace
workstation
worktable
world
worldwide
worm
wormy
worn
worrisome
worry
worse
worsen
worship
worshipful
worst
worth
worthington
worthwhile
worthy
wotan
would
wound
wove
woven
wow
wrack
wraith
wrangle
wrap
wrapup
wrath
wrathful
wreak
wreath
wreathe
wreck
wreckage
wrench
wrest
wrestle
wretch
wriggle
wright
wrigley
wring
wrinkle
wrist
wristband
wristwatch
writ
write
writeup
writhe
written
wrong
wrongdo
wrongdoer
wrongdoing
wrongful
wronskian
wrote
wrought
wry
wu
wuhan
wv
wy
wyandotte
wyatt
wyeth
wylie
wyman
wyner
wynn
wyoming
x
xavier
xenon
xenophobia
xerography
xerox
xerox
xerxes
xi
xylem
xylene
xylophone
y
yacht
yachtsman
yachtsmen
yah
yak
yakima
yale
yalta
yam
yamaha
yang
yank
yankee
yankton
yaounde
yap
yapping
yaqui
yard
yardage
yardstick
yarmouth
yarmulke
yarn
yarrow
yates
yaw
yawl
yawn
ye
yea
yeager
yeah
year
yearbook
yearn
yeast
yeasty
yeats
yell
yellow
yellowish
yellowknife
yellowstone
yelp
yemen
yen
yeoman
yeomanry
yerkes
yeshiva
yesterday
yesteryear
yet
yiddish
yield
yin
yip
yipping
ymca
yodel
yoder
yoga
yoghurt
yogi
yogurt
yoke
yokel
yokohama
yokuts
yolk
yon
yond
yonkers
yore
york
yorktown
yosemite
yost
you
young
youngish
youngster
youngstown
your
yourself
yourselves
youth
youthful
yow
ypsilanti
ytterbium
yttrium
yucatan
yucca
yuck
yugoslav
yugoslavia
yuh
yuki
yukon
yule
yves
yvette
ywca
z
zachary
zag
zagging
zagreb
zaire
zambia
zan
zanzibar
zap
zazen
zeal
zealand
zealot
zealous
zebra
zeiss
zellerbach
zen
zenith
zero
zeroes
zeroth
zest
zesty
zeta
zeus
ziegler
zig
zigging
zigzag
zigzagging
zilch
zimmerman
zinc
zing
zion
zionism
zip
zippy
zircon
zirconium
zloty
zodiac
zodiacal
zoe
zomba
zombie
zone
zoo
zoology
zoom
zorn
zoroaster
zoroastrian
zounds
zucchini
zurich
zygote
================================================================================
When a  persn types a documnt, he or she
often makes mistakes and mispells one or
more of teh sords.
================================================================================
//extract a word from fin
ifstream& getWord(ifstream& fin, string& w)
{
	char c;

	w = "";	// clear the string of characters

	while (fin.get(c) && !isalpha(c))
		;	// do nothing. just ignore c

	// return on end-of-file
	if (fin.eof())
		return fin;

	// record first letter of the word
	w += tolower(c);

	// collect letters and digits
	while (fin.get(c) && (isalpha(c) || isdigit(c)))
		w += tolower(c);

	return fin;
}
================================================================================
Run:

Enter the document name: spelltst.txt
Misspelled words:

persn
types
documnt
makes
mistakes
mispells
teh
sords
================================================================================
Lab-08:
#ifndef MINI_PRIORITY_QUEUE_CLASS
#define MINI_PRIORITY_QUEUE_CLASS

#include <vector>

#include "d_heap.h"
#include "d_except.h"

using namespace std;

// maintain a priority queue containing elements of data type
// T using a comparison function object of type Compare
template <typename T, typename Compare = greater<T> >
class miniPQ
{
	public:
		miniPQ();
			// create empty priority queue

		int size() const;
			// return the number of elements in the priority queue
		bool empty() const;
			// is the priority queue empty?

		void push(const T& item);
			// insert item into the priority queue
			// Postcondition: the heap size increases by 1
		void pop();
			// remove the element of highest priority.
			// Precondition: the priority queue is not empty.
			// if condition fails, the function throws the
			// underflowError exception.
			// Postcondition: the heap decreases by 1

		T& top();
			// return the element of highest priority
			// Precondition: the priority queue is not empty.
			// if the condition fails, the function throws the
			// underflowError exception
		const T& top() const;
			// constant version

	private:
		vector<T> pqList;
			// pqList holds the priority queue elements

		Compare comp;
			// function object used for comparisons
};


// constructor. create empty priority queue
template <typename T, typename Compare>
miniPQ<T,Compare>::miniPQ()
{}


// return the size of the priority queue
template <typename T, typename Compare>
int miniPQ<T,Compare>::size() const
{
   return pqList.size();
}

// return true if the priority queue is empty and false
// otherwise
template <typename T, typename Compare>
bool miniPQ<T,Compare>::empty() const
{
   return pqList.empty();
}

// insert a new item in the priority queue
template <typename T, typename Compare>
void miniPQ<T,Compare>::push(const T& item)
{
	// insert the item at the end of the vector
	// call pushHeap() to restore the heap condition.
	pqList.push_back(item);
	pushHeap(pqList,pqList.size(), comp);
}

// remove the element of highest priority,
template <typename T, typename Compare>
void miniPQ<T,Compare>::pop()
{
	// check for an empty priority queue
	if (pqList.empty())
		throw underflowError("miniPQ pop(): empty list");

	// call popHash() to put element at back of the vector
	popHeap(pqList, pqList.size(), comp);

	// delele element from back of pqList
	pqList.pop_back();
}

template <typename T, typename Compare>
T& miniPQ<T,Compare>::top()
{
   // check for an empty heap
   if (pqList.empty())
		throw underflowError("miniPQ top(): empty list");

	// return the root of the heap
	return pqList[0];
}

template <typename T, typename Compare>
const T& miniPQ<T,Compare>::top() const
{
   // check for an empty heap
   if (pqList.empty())
		throw underflowError("miniPQ top(): empty list");

	// return the root of the heap
	return pqList[0];
}

#endif	// MINI_PRIORITY_QUEUE_CLASS
================================================================================
#ifndef HEAP_FUNCTIONS
#define HEAP_FUNCTIONS

#include <vector>
#include <functional>

using namespace std;

// the vector elements in the range [0, last-1) are a heap.
// insert the element v[last-1] into the heap so that the
// range [0, last) is a heap. use the function object comp
// to perform comparisons
template <typename T, typename Compare>
void pushHeap(vector<T>& v, int last, Compare comp);

// filter the vector element v[first] down the heap with index
// range [first, last)
template <typename T, typename Compare>
void adjustHeap(vector<T>& v, int first, int last, Compare comp);

// the vector elements in the range [0, last) are a heap.
// swap the first and last elements of the heap and then
// make the elements in the index range [0, last-1) a heap.
// use the function object comp to perform comparisons
template <typename T, typename Compare>
void popHeap(vector<T>& v, int last, Compare comp);

// arrange the vector elements into a heap. use the function
// object comp to perform comparisons
template <typename T, typename Compare>
void makeHeap(vector<T>& v, Compare comp);

// implementations

template <typename T, typename Compare>
void pushHeap(vector<T>& v, int last, Compare comp)
{
	// assume the new item is at location v[last-1] and that
	// the elements v[0] to v[last-2] are in heap order
	int currentPos, parentPos;
	T target;

	// currentPos is an index that traverses path of parents.
	// target is value hlist[i] and is repositioned in path
	currentPos = last-1;
	parentPos = (currentPos-1)/2;
	target = v[last-1];

	// traverse path of parents up to the root
	while (currentPos != 0)
	{
		// compare target and parent value
		if (comp(target,v[parentPos]))
		{
			// move data from parent position to current
			// position. update current position to parent
			// position. compute next parent
			v[currentPos] = v[parentPos];
			currentPos = parentPos;
			parentPos = (currentPos-1)/2;
		}
		else
			// if !comp(target, parentvalue), heap condition is ok. break
			break;
	}
	// the correct location has been discovered. assign target
	v[currentPos] = target;
}


template <typename T, typename Compare>
void adjustHeap(vector<T>& v, int first, int last, Compare comp)
{
	int currentPos, childPos;
	T target;

	// start at first and filter target down the heap
	currentPos = first;
	target = v[first];

	// compute the left child index and begin a scan down
	// path of children, stopping at end of list (last)
	// or when we find a place for target
	childPos = 2 * currentPos + 1;
	while (childPos <= last-1)
	{
		// index of right child is childPos+1. compare the
		// two children. change childPos if
		// comp(v[childPos+1], v[childPos]) is true
		if ((childPos+1 <= last-1) &&
            comp(v[childPos+1], v[childPos]))
			childPos = childPos + 1;

		// compare selected child to target
		if (comp(v[childPos],target))
		{
			// comp(selected child, target) is true.
			// move selected child to the parent;
			// position of selected child is now vacated
			v[currentPos] = v[childPos];

			// update indices to continue the scan
			currentPos = childPos;
			childPos = 2 * currentPos + 1;
		}
		else
			// target belongs at currentPos
			break;
	}
	v[currentPos] = target;
}

template <typename T, typename Compare>
void popHeap(vector<T>& v, int last, Compare comp)
{
	T temp;

	// exchange the first and last element in the heap
	temp = v[0];
	v[0] = v[last-1];
	v[last-1] = temp;

	// filter down the root over the range [0, last-1)
	adjustHeap(v, 0, last-1, comp);
}

template <typename T, typename Compare>
void makeHeap(vector<T>& v, Compare comp)
{
	int heapPos, lastPos;

	// compute the size of teh heap and the index
	// of the last parent
	lastPos = v.size();
	heapPos = (lastPos - 2)/2;

	// filter down every parent in order from last parent
	// down to root
	while (heapPos >= 0)
	{
		adjustHeap(v,heapPos, lastPos, comp);
		heapPos--;
	}
}

#endif	// HEAP_FUNCTIONS
================================================================================
#ifndef PROCESSREQUESTRECORD_CLASS
#define PROCESSREQUESTRECORD_CLASS

#include <iostream>
#include <string>

using namespace std;

class procReqRec
{
	public:
		// default constructor
		procReqRec()
		{}

		// constructor
		procReqRec(const string& nm, int p);

		// access functions
		int getPriority();
		string getName();

		// update functions
		void setPriority(int p);
		void setName(const string& nm);

		// for maintenance of a minimum priority queue
		friend bool operator< (const procReqRec& left,
			const procReqRec& right);

		// output a process request record in the format
		//   name: priority
		friend ostream& operator<< (ostream& ostr,
	const procReqRec& obj);

	private:
		string name;	// process name
		int priority;	// process priority
};

#endif	// PROCESSREQUESTRECORD_CLASS
================================================================================
Process G: 0
Process J: 1
Process F: 1
Process B: 3
Process C: 17
Process E: 21
Process H: 23
Process D: 24
Process I: 26
Process A: 35
================================================================================
Lab-09:
#ifndef GRAPH_CLASS
#define GRAPH_CLASS

#include <iostream>
#include <fstream>

#include <set>				// set class
#include <map>				// ist classmap class
#include <vector>			// vector class
#include <list>			// list class
#include <stack>			// stack class
#include <queue>			// queue class
#include <functional>	// less<T>

#include "d_except.h"	// exception classes
#include "d_pqueue.h"	// miniPQ class

// largest positive integer on the machine
const int INF = (int)(((unsigned int)~0) >> 1);

using namespace std;

class neighbor
{
	public:
		// index of the destination vertex in the vector vInfo of vertex
		// properties
		int dest;
		// weight of this edge
		int weight;

		// constructor
		neighbor(int d=0, int c=0): dest(d), weight(c)
		{}

		// operators for the neighbor class that compare the
		// destination vertices
		friend bool operator< (const neighbor& lhs, const neighbor& rhs)
		{
			return lhs.dest < rhs.dest;
		}

		friend bool operator== (const neighbor& lhs, const neighbor& rhs)
		{
			return lhs.dest == rhs.dest;
		}
};

// maintains vertex properties, including its set of
// neighbors
template <typename T>
class vertexInfo
{
	public:
		// used by graph algorithms
		enum vertexColor { WHITE, GRAY, BLACK };

		// iterator pointing at a pair<T,int> object in the vertex map
		typename map<T,int>::iterator vtxMapLoc;

		// set of adjacent (neighbor) objects for the current vertex
		set<neighbor> edges;

		/// maintains the in-degree of the vertex
		int inDegree;

		// indicates whether the object currently represents a vertex
		bool occupied;

		// indicate if a vertex is marked in an algorithm that traverses
		// the vertices of a graph
		vertexColor color;

		// available to algorithms for storing relevant data values
		int dataValue;

		// available to graph algorithms; holds parent which is
		// a vertex that has an edge terminating in the current vertex
		int parent;

		// default constructor
		vertexInfo(): inDegree(0), occupied(true)
		{}

		// constructor with iterator pointing to the vertex in the map
		vertexInfo(typename map<T,int>::iterator iter):
				vtxMapLoc(iter), inDegree(0), occupied(true)
		{}
};

// priority queue data used by minimumPath() and minSpanningTree() algorithms
class minInfo
{
	public:
		int endV;
		int pathWeight;

		friend bool operator< (minInfo lhs, minInfo rhs)
		{ return lhs.pathWeight < rhs.pathWeight; }
};

template <typename T>
class graph
{
   public:
      class const_iterator: public map< T, int >::const_iterator
      {
         public:
            const_iterator()
            {}

				// converts a map iterator to a graph iterator
            const_iterator(typename map<T,int>::const_iterator i)
            {
					*((typename map< T, int >::const_iterator *)this) = i;
				}

				// return the vertex pointed to by the iterator
            const T& operator* () const
            {
               typename map<T,int>::const_iterator p = *this;

               return (*p).first;
            }
      };

		typedef const_iterator iterator;

		graph();
			// constructor. initialize numVertices and numEdges to 0

		graph(const graph<T>& g);
			// copy constructor

		graph<T>& operator= (const graph<T>& rhs);
			// overloaded assignment operator

		int numberOfVertices() const;
			// return the number of vertices in the graph

		int numberOfEdges() const;
			// return the number of edges in the graph

      bool empty() const;
			// is the graph empty?

		int getWeight(const T& v1, const T& v2) const;
			// return the weight of the edge (v1, v2). if the edge.
			// does not exist, return -1
			// Precondition: v1 and v2 are vertices in the graph. if not
			// the function throws the graphError exception

		void setWeight(const T& v1, const T& v2, int w);
			// update the weight of edge (v1, v2).
			// Precondition: v1 and v2 are vertices in the graph. if not,
			// the function throws the graphError exception
			// Postcondition: the weight of vertex (v1,v2) is w

		int inDegree(const T& v) const;
			// return the number of edges entering  v.
			// Precondition: v is a vertex in the graph. if not,
			// the function throws the graphError exception

		int outDegree(const T& v) const;
			// return the number of edges leaving  v.
			// Precondition: v is a vertex in the graph. if not,
			// the function throws the graphError exception

      set<T> getNeighbors(const T& v) const;
			// return a set containing the neighbors of v.
			// Precondition: v is a vertex in the graph. if not,
			// the function throws the graphError exception

		void insertEdge(const T& v1, const T& v2, int w);
			// add the edge (v1,v2) with specified weight to the graph.
			// Precondition: v1 and v2 are vertices in the graph. if not,
			// the function throws the graphError exception
			// Postcondition: The number of edges increases by 1

		void insertVertex(const T& v);
			// insert v into the graph.
			// Precondition: v is a vertex in the graph. if not,
			// the function throws the graphError exception.
			// Postcondition: the number of vertices increases by 1

		void eraseEdge(const T& v1, const T& v2);
			// erase edge (v1,v2) from the graph
			// Precondition: v1 and v2 are vertices in the graph. if not,
			// the function throws the graphError exception.
			// Postcondition: The number of edges decreases by 1

      void eraseVertex(const T& v);
			// erase v from the graph
			// Precondition: v is a vertex in the graph. if not,
			// the function throws the graphError exception.
			// Postconditions: The number of vertices decreases by 1,
			// and the operation removes all edges to or from v

		void clear();
			// remove all the vertices and edges from the graph

		iterator begin();
		iterator end();
		const_iterator begin() const;
		const_iterator end() const;
			// iterator functions returns corresponding map iterator

// "d_galgs.h" implements the graph algorithms using inline code.
// this is necessary for the Borland C++ 5.5 compiler
#include "d_galgs.h"

/*
		LISTING OF THE PROTOTYPES FOR THE GRAPH ALGORITHMS

		friend istream& operator>> (istream& istr, graph<T>& g);
			// input a graph

		friend ostream& operator<< (ostream& ostr, const graph<T>& g);
			// output a graph

		friend set<T> bfs(graph<T>& g, const T& sVertex);
			// perform the breadth-first traversal from sVertex and
			// return the set of visited vertices

		friend int shortestPath(graph<T>& g, const T& sVertex,
										const T& eVertex, list<T>& path);
			// use the breadth-first traversal algorithm to determine the
			// minimum number of edges in any path from sVertex to eVertex
			// or -1 if no path exists. if a path exists, the list path
			// is the sequence of vertices

		friend int minimumPath(graph<T>& g, const T& sVertex, const T& eVertex,
									  list<T>& path);
			// find the path with minimum total weight from sVertex to eVertex
			// and return the minimum weight

		friend int minSpanTree(graph<T>& g, graph<T>& MST);
			// find the minimum spanning tree for the strongly connected digraph g

		friend bool acyclic(graph<T>& g);
			// determine if the graph is acyclic

		friend void dfsVisit(graph<T>& g, const T& sVertex, list<T>& dfsList,
									bool checkForCycle);
			// depth-first visit assuming a WHITE starting vertex. dfsList
			// contains the visited vertices in reverse order of finishing time.
			// when checkForCycle is true, the function throws an exception if
			// it detects a cycle

		friend void dfs(graph<T>& g, list<T>& dfsList);
			// depth-first search. dfsList contains all the graph vertices in the
			// reverse order of their finishing times

		friend void topologicalSort(graph<T>& g, list<T>& tlist);
			// find a topological sort of an acyclic graph

		friend graph<T> transpose(graph<T>& g);
			// return the transpose of the graph

		friend void strongComponents(graph<T>& g, vector<set<T> >& component);
			// find the strong components of the graph
*/

	private:
      typedef map<T,int> vertexMap;

		vertexMap vtxMap;
			// store vertex in a map with its name as the key and the index
			// of the corresponding vertexInfo object in the vInfo
			// vector as the value

		vector<vertexInfo<T> > vInfo;
			// list of vertexInfo objects corresponding to the vertices

		int numVertices;
		int numEdges;
			// current size (vertices and edges) of the graph

		stack<int> availStack;
			// availability stack for storing unused indices in vInfo

		int getvInfoIndex(const T& v) const;
     		// uses vtxMap to obtain the index of v in vInfo
};

// uses vtxMap to obtain the index of v in vInfo
template <typename T>
int graph<T>::getvInfoIndex(const T& v) const
{
	// iter used in map lookup
	typename vertexMap::const_iterator iter;
	// index that is returned
	int pos;

	// find the map entry with key v
	iter = vtxMap.find(v);

	// make sure v is in the map
	if (iter == vtxMap.end())
		pos = -1;
	else
		// the index into vInfo is the value of the map entry
		pos = (*iter).second;

	return pos;
}

// constructor. initialize numVertices and numEdges to 0
template <typename T>
graph<T>::graph(): numVertices(0), numEdges(0)
{}

// copy constructor
template <typename T>
graph<T>::graph(const graph<T>& g)
{
	*this = g;	// copy g to current object
}

// overloaded assignment operator
template <typename T>
graph<T>& graph<T>::operator= (const graph<T>& rhs)
{
	typename vertexMap::iterator mi;

	// can't copy a graph to itself
	if (this == &rhs)
		return *this;

	// copy rhs to current object
	vtxMap = rhs.vtxMap;
	vInfo = rhs.vInfo;
	numVertices = rhs.numVertices;
	numEdges = rhs.numEdges;
	availStack = rhs.availStack;

	// update each vtxMapLoc value of objects in vInfo so it points
	// to a key-value pair in the copy of rhs.vtxMap and not rhs.vtxMap
	for (mi=vtxMap.begin();mi != vtxMap.end();mi++)
			vInfo[(*mi).second].vtxMapLoc = mi;

	return *this;
}

// ATTRIBUTE TESTING FUNCTIONS

template <typename T>
int graph<T>::numberOfVertices() const
{
	return numVertices;
}

template <typename T>
int graph<T>::numberOfEdges() const
{
	return numEdges;
}

template <typename T>
bool graph<T>::empty() const
{
	return numVertices == 0;
}

// ACCESS MEMBER FUNCTIONS

// return the weight of the edge (v1, v2). if the edge
// does not exist, return -1
template <typename T>
int graph<T>::getWeight(const T& v1, const T& v2) const
{
	// find the vInfo indices for the two vertices
	int pos1=getvInfoIndex(v1), pos2=getvInfoIndex(v2);

	// check for an error
	if (pos1 == -1 || pos2 == -1)
		// if v1 or v2 not in list of vertices, throw an exception
		throw graphError("graph getWeight(): vertex not in the graph");

	// construct an alias for the edge list in vInfo[pos1]
	const set<neighbor>& edgeSet = vInfo[pos1].edges;
	set<neighbor>::const_iterator setIter;

	// search for pos2 in the edge list and return its weight
	// if found; otherwise, return -1 to indicate that the
	// edge does not exist
	if ((setIter = edgeSet.find(neighbor(pos2))) != edgeSet.end())
		return (*setIter).weight;
	else
		return -1;
}

template <typename T>
void graph<T>::setWeight(const T& v1, const T& v2, int w)
{
	// find the vInfo indices for the two vertices
	int pos1=getvInfoIndex(v1), pos2=getvInfoIndex(v2);

	// check for an error
	if (pos1 == -1 || pos2 == -1)
		// if v1 or v2 not in list of vertices, throw an exception
		throw graphError("graph setWeight(): vertex not in the graph");

	// construct an alias for the edge list in vInfo[pos1]
	set<neighbor>& edgeSet = vInfo[pos1].edges;
	set<neighbor>::iterator setIter;

	// search for pos2 in the edge list and update its weight.
	// if the edge does not exist, throw an exception
	if ((setIter = edgeSet.find(neighbor(pos2))) != edgeSet.end())
		(*setIter).weight = w;
	else
		throw graphError("graph setWeight(): edge not in the graph");
}

// return the number of edges entering  v
template <typename T>
int graph<T>::inDegree(const T& v) const
{
	// find the vInfo index for v
	int pos=getvInfoIndex(v);

	if (pos != -1)
		// in-degree is stored in vInfo[pos]
		return vInfo[pos].inDegree;
	else
		// throw an exception
		throw graphError("graph inDegree(): vertex not in the graph");
}

// return the number of edges leaving  v
template <typename T>
int graph<T>::outDegree(const T& v) const
{
	// find the vInfo index for v
	int pos=getvInfoIndex(v);

	if (pos != -1)
		// out-degree is number of elements in the edge set
		return vInfo[pos].edges.size();
	else
		// throw an exception
		throw graphError("graph outDegree(): vertex not in the graph");
}

// return the list of all adjacent vertices
template <typename T>
set<T> graph<T>::getNeighbors(const T& v) const
{
	// set returned
	set<T> adjVertices;

	// obtain the position of v from the map
	int pos = getvInfoIndex(v);

	// if v not in list of vertices, throw an exception
	if (pos == -1)
		throw
			graphError("graph getNeighbors(): vertex not in the graph");

	// construct an alias for the set of edges in vertex pos
	const set<neighbor>& edgeSet = vInfo[pos].edges;
	// use setIter to traverse the edge set
	set<neighbor>::const_iterator setIter;

	// index of vertexInfo object corresponding to an adjacent vertex
	int aPos;

	for (setIter=edgeSet.begin(); setIter != edgeSet.end(); setIter++)
	{	// "(*setIter).dest" is index into vInfo
		aPos = (*setIter).dest;
		// insert vertex data into a set. vInfo[aPos].vtxMapLoc"
		// is a map iterator. dereference it to access the vertex
		adjVertices.insert ((*vInfo[aPos].vtxMapLoc).first);
	}

   return adjVertices;
}

// GRAPH MODIFICATION MEMBER FUNCTIONS

// add the edge (v1,v2) with specified weight to the graph
template <typename T>
void graph<T>::insertEdge(const T& v1,
								  const T& v2, int w)
{
	// obtain the vInfo indices
	int pos1=getvInfoIndex(v1), pos2=getvInfoIndex(v2);

	// check for an error
	if (pos1 == -1 || pos2 == -1)
		// if v1 or v2 not in list of vertices, throw an exception
		throw graphError("graph insertEdge(): vertex not in the graph");
	else if (pos1 == pos2)
		// we do not allow self-loops
		throw graphError("graph insertEdge(): self-loops are not allowed");


	// attempt to insert edge (pos2,w) into the edge set of vertex pos1
	pair<set<neighbor>::iterator, bool> result =
			vInfo[pos1].edges.insert(neighbor(pos2,w));

	// make sure edge was not already in the set
	if (result.second)
	{
		// increment the number of edges
		numEdges++;
		// the in-degree of v2 is one more
		vInfo[pos2].inDegree++;
	}
}

// insert v into the graph
template <typename T>
void graph<T>::insertVertex(const T& v)
{
	int index;

	// attempt to insert v into the map with index 0.
	// if successful, insert an iterator pointing at it
	// into the vertex list at location index. index is obtained
	// from the availability stack or by creating a new entry
	// at the back of the vector. fix the map entry to refer
	// to index and increment numVertices. if the insertion did
	// not take place, the vertex already exists. generate an
	// exception
	pair<typename vertexMap::iterator, bool> result =
		vtxMap.insert(typename vertexMap::value_type(v,0));
	if (result.second)
	{
		// see if there is an entry in vInfo freed by an earlier
		// call to eraseVertex()
		if (!availStack.empty())
		{
			// yes. get its index
			index = availStack.top();
			availStack.pop();
			// call to constructor builds a empty edge set
			vInfo[index] = vertexInfo<T>(result.first);
		}
		else
		{
			// no. we'll have to increase the size of vInfo
			vInfo.push_back(vertexInfo<T>(result.first));
			index = numVertices;
		}

		(*result.first).second = index;
		numVertices++;
	}
	else
		throw graphError("graph insertVertex(): vertex already in the graph");
}

// erase edge (v1,v2) from the graph
template <typename T>
void graph<T>::eraseEdge(const T& v1, const T& v2)
{
	// obtain the indices of v1 and v2 in vInfo
	int pos1=getvInfoIndex(v1), pos2=getvInfoIndex(v2);

	// check for an error
	if (pos1 == -1 || pos2 == -1)
		// if v1 or v2 not in list of vertices, throw an exception
		throw graphError("graph eraseEdge(): vertex not in the graph");

	// construct an alias to the edge set of vInfo[pos1]
	set<neighbor>& edgeSet = vInfo[pos1].edges;
	set<neighbor>::iterator setIter;

	// search for pos2 in the edge set
	setIter = edgeSet.find(neighbor(pos2));
	// if pos2 is in the set, erase it; otherwise, output an
	// error message
	if (setIter != edgeSet.end())
	{
		edgeSet.erase(setIter);
		// the in-degree of v2 is one less
		vInfo[pos2].inDegree--;
		numEdges--;
	}
	else
		throw graphError("graph eraseEdge(): edge not in the graph");
}

template <typename T>
void graph<T>::eraseVertex(const T& v)
{
	// use to search for and remove v from the map
	typename vertexMap::iterator mIter;
	// pos is index of v in the vertex list
	int pos, j;
	// used in removal of edges to v
	set<neighbor>::iterator sIter;

	// search the map for the key v
	mIter = vtxMap.find(v);
	// if vertex is not present, terminate the erase
	if (mIter == vtxMap.end())
		// if v not in list of vertices, throw an exception
		throw graphError("graph eraseVertex(): vertex not in the graph");

	// obtain the index of v in vInfo
	pos = (*mIter).second;

	// erase vertex from the map and decrement number of vertices
	vtxMap.erase(mIter);
	numVertices--;

	// mark the vertex entry in vInfo as not occupied. the index pos is now
	// available. push it on the availability stack for use later if we
	// insert a vertex
	vInfo[pos].occupied = false;
	availStack.push(pos);

	// cycle through vInfo and remove all edges going to v
	for (j=0; j < vInfo.size(); j++)
		// skip all unoccupied entries, including pos
		if (vInfo[j].occupied)
		{
			// construct an alias for the set vInfo[j].edges
			set<neighbor>& edgeSet = vInfo[j].edges;

			sIter = edgeSet.begin();
			// cycle through the edge set
			while (sIter != edgeSet.end())
				if ((*sIter).dest == pos)
				{
					// found pos. remove it from the set and
					// decrement the edge count
					edgeSet.erase(sIter);
					numEdges--;
					break;
				}
				else
					// took no action. just move forward
					sIter++;
		}

	// decrement numEdges by the number of edges for vertex v
	numEdges -= vInfo[pos].edges.size();

	// the in-degree for all of v's neighbors must be decreased by 1
	set<neighbor>& edgesFromv = vInfo[pos].edges;
	for (sIter=edgesFromv.begin(); sIter != edgesFromv.end(); sIter++)
	{
		j = (*sIter).dest;
		vInfo[j].inDegree--;
	}

	// clear the edge set. construct an alias for vInfo[pos].edges
	// and use erase to clear the set
	set<neighbor>& edgeSet = vInfo[pos].edges;
	edgeSet.erase(edgeSet.begin(), edgeSet.end());
}

// erase the graph
template <typename T>
void graph<T>::clear()
{
	// clear the vertex list, vertex map and the
	// availability stack
	vInfo.erase(vInfo.begin(), vInfo.end());
	vtxMap.erase(vtxMap.begin(), vtxMap.end());
	while(!availStack.empty())
		availStack.pop();

	// set the number of vertices and edges to 0
	numVertices = 0;
	numEdges = 0;
}

// ITERATOR FUNCTIONS

// each graph iterator function returns
// the corresponding map iterator
template <typename T>
typename graph<T>::iterator graph<T>::begin()
{
  return graph<T>::iterator(vtxMap.begin());
}

template <typename T>
typename graph<T>::iterator graph<T>::end()
{
	return graph<T>::iterator(vtxMap.end());
}

template <typename T>
typename graph<T>::const_iterator graph<T>::begin() const
{
	return graph<T>::iterator(vtxMap.begin());
}

template <typename T>
typename graph<T>::const_iterator graph<T>::end() const
{
  return graph<T>::iterator(vtxMap.end());
}

#endif	// GRAPH_CLASS
================================================================================
m //(m is the number of vertices in graph)
vertex_1 vertex_2 ... vertex_m
n //(number of edges)
source_1 destination_1 weight_1 //(weight_1 is the weight of edge from source_1 to destination_1)
source_2 destination_2 weight_2 //(weight_2 is the weight of edge from source_1 to destination_1)
.....
source_n destination_n weight_n //(weight_n is the weight of edge from source_1 to destination_1)
================================================================================
#ifdef __BORLANDC__
// suppress the warning message that functions containing for are not
// expanded inline
#pragma warn -8027
#endif	// __BORLANDC__


// input a graph
friend istream& operator>> (istream& istr, graph<T>& g)
{
	// nVertices is number of vertices to read
	int i, nVertices, nEdges;
	// use for input of vertices (v1) and edges ( {v1, v2} )
	T v1, v2;
	// edge weight
	int weight;

	if (g.numVertices > 0)
		// remove an existing graph
		g.clear();

	// input the number of vertices
	istr >> nVertices;

	// input the vertices and insert each into the graph
	for (i = 0; i < nVertices; i++)
	{
		istr >> v1;
		g.insertVertex(v1);
	}

	// input the number of edges
	istr >> nEdges;

	// input the vertices and weight for each edge, and
	// insert it into the graph
	for (i = 0; i < nEdges; i++)
	{
		istr >> v1;
		istr >> v2;
		istr >> weight;
		g.insertEdge(v1,v2,weight);
	}

	// return the stream
	return istr;
}

// output a graph
friend ostream& operator<< (ostream& ostr, const graph<T>& g)
{
	vertexInfo<T> vtxInfo;
	set<neighbor>::iterator setIter;

	int i;

	for (i = 0; i < g.vInfo.size(); i++)
	{
		vtxInfo = g.vInfo[i];
		if (vtxInfo.occupied)
		{
			ostr << (*(vtxInfo.vtxMapLoc)).first << ": in-degree " << vtxInfo.inDegree
				  << "  out-degree " << (vtxInfo.edges).size() << endl;
			ostr << "    Edges: ";
			set<neighbor>& edgeSet = vtxInfo.edges;
			for (setIter = edgeSet.begin(); setIter != edgeSet.end(); setIter++)
			{
				ostr << (*(g.vInfo[(*setIter).dest].vtxMapLoc)).first << " ("
					  << (*setIter).weight << ")  ";
			}
			ostr << endl;
		}
	}
	return ostr;
}

// perform the breadth-first traversal from sVertex and
// return the set of visited vertices
friend set<T> bfs(graph<T>& g, const T& sVertex)
{
	// BFS uses a queue to store indices of adjacent vertices from vInfo
   queue<int> visitQueue;

	// set of vertices in BFS
	set<T> visitSet;

	// use to store indices in vInfo
	int currVertex, neighborVertex;

	// use to search edge sets for unvisited vertices
	set<neighbor>::iterator adj;
	int i;

	// find the index of the starting vertex
	currVertex = g.getvInfoIndex(sVertex);

	// check for a nonexistent starting vertex
	if (currVertex == -1)
		throw graphError("graph bfs(): vertex not in the graph");

	// initialize all vertices in the graph to unvisited (WHITE)
	for (i=0;i < g.vInfo.size(); i++)
		if (g.vInfo[i].occupied)
			g.vInfo[i].color = vertexInfo<T>::WHITE;

   visitQueue.push(currVertex);   // initialize the queue

   while (!visitQueue.empty())
   {
      // remove a vertex from the queue
      currVertex = visitQueue.front();
		visitQueue.pop();
		// indicate that the vertex has been visited
		g.vInfo[currVertex].color = vertexInfo<T>::BLACK;

		// put the vertex in visitSet
		visitSet.insert((*(g.vInfo[currVertex].vtxMapLoc)).first);

		// create an alias for the edge set of currVertex
		set<neighbor>& edgeSet = g.vInfo[currVertex].edges;
		// sequence through the edge set and look for vertices
		// that have not been visited
		for (adj = edgeSet.begin(); adj != edgeSet.end(); adj++)
		{
			neighborVertex = (*adj).dest;

			if (g.vInfo[neighborVertex].color == vertexInfo<T>::WHITE)
			{
				g.vInfo[neighborVertex].color = vertexInfo<T>::GRAY;
				visitQueue.push(neighborVertex);
			}
		}
   }

	return visitSet;
}

// use the breadth-first traversal algorithm to determine the
// minimum number of edges in any path from sVertex to eVertex
// or -1 if no path exists. if a path exists, the list path
// is the sequence of vertices
friend int shortestPath(graph<T>& g, const T& sVertex,
			               const T& eVertex, list<T>& path)
{
   // queue stores vertices as vInfo indices
   queue<int>  visitQueue;

   // eIter scans the vertices in an adjacency set
   set<neighbor>::iterator eIter;

	// flag set true when scan identifies eVertex as a neighbor
	bool foundShortestPath = false;

	// index in vInfo for the source and destination vertices
	// and the index for current vertex and a neighbor
	int pos_sVertex, pos_eVertex, currPos, neighborPos;

	int returnValue;

	// initialize all vertices to undiscoved (WHITE)
	for (int i = 0;i < g.vInfo.size(); i++)
		if (g.vInfo[i].occupied)
			g.vInfo[i].color = vertexInfo<T>::WHITE;

	// obtain the starting and ending indices
	pos_sVertex = g.getvInfoIndex(sVertex);
	pos_eVertex = g.getvInfoIndex(eVertex);

	if (pos_sVertex == -1 || pos_eVertex == -1)
		throw graphError("graph shortestPath(): vertex not in "
					        "the graph");

 	g.vInfo[pos_sVertex].parent = pos_sVertex;
	g.vInfo[pos_sVertex].dataValue = 0;

	// insert starting vertex into the queue
	visitQueue.push(pos_sVertex);

	while (!visitQueue.empty() && !foundShortestPath)
	{
		// delete a queue entry, and color it BLACK
		currPos = visitQueue.front();
		visitQueue.pop();
		g.vInfo[currPos].color = vertexInfo<T>::BLACK;

		// if we are at eVertex, we have found the shortest
		// path from sVertex to eVertex
		if (currPos == pos_eVertex)
			foundShortestPath = true;
		else
		{
			// create an alias for the adjacency set of currPos
			set<neighbor>& edgeSet = g.vInfo[currPos].edges;

			// for all undiscovered neighbors, update the dataValue,
			// color, and parent fields in the vertexInfo object.
			for (eIter = edgeSet.begin(); eIter != edgeSet.end(); eIter++)
			{
				neighborPos = (*eIter).dest;

				if (g.vInfo[neighborPos].color == vertexInfo<T>::WHITE)
				{
 					g.vInfo[neighborPos].dataValue =
										g.vInfo[currPos].dataValue + 1;
					g.vInfo[neighborPos].parent = currPos;
					g.vInfo[neighborPos].color = vertexInfo<T>::GRAY;
					// add neighbor vertex to the queue
					visitQueue.push(neighborPos);
				}
			}
		}
	}

	// clear path and find the sequence of vertices
	// from sVertex to eVertex
   path.erase(path.begin(), path.end());
   if (foundShortestPath)
	{
		currPos = pos_eVertex;
		while (currPos != pos_sVertex)
		{
			path.push_front((*(g.vInfo[currPos].vtxMapLoc)).first);
			currPos = g.vInfo[currPos].parent;
		}
		path.push_front(sVertex);
		returnValue = g.vInfo[pos_eVertex].dataValue;
   }
   else
      returnValue = -1;

	return returnValue;
}

// find the path with minimum total weight from sVertex to eVertex
// and return the minimum weight
friend int minimumPath(graph<T>& g, const T& sVertex, const T& eVertex,
							  list<T>& path)
{
   // heap (priority queue) that stores minInfo objects
   miniPQ<minInfo,less<minInfo> >  minPathPQ;

   // used when inserting minInfo entries
   // into the priority queue or erasing entries
   minInfo vertexData;
   // adj is edge set of vertex we are visiting. adjiter is used
   // to traverse adj
   set<neighbor> adj;
   set<neighbor>::iterator adjIter;

	bool foundMinPath = false;

	// index in vInfo for the starting and ending vertices
	// position in vInfo of vertex on a path from sVertex
	int pos_sVertex, pos_eVertex, currPos, destPos;

	// computed minimum weight
   int newMinWeight;

	// return value
	int returnValue;

	typename list<T>::iterator pathIter;

	// initialize all vertices to unmarked (WHITE) and dataValue
	// variables to INF
	for (int i = 0;i < g.vInfo.size(); i++)
		if (g.vInfo[i].occupied)
		{
			g.vInfo[i].color = vertexInfo<T>::WHITE;
			g.vInfo[i].dataValue = INF;
		}

	// obtain the starting and ending indices
	pos_sVertex = g.getvInfoIndex(sVertex);
	pos_eVertex = g.getvInfoIndex(eVertex);

	if (pos_sVertex == -1 || pos_eVertex == -1)
		throw graphError("graph minimumPath(): vertex not in the graph");


   // formulate initial priority queue entry
   vertexData.endV = pos_sVertex;

   // path weight from sVertex to sVertex is 0
   vertexData.pathWeight = 0;

	// update dataValue in vInfo and set sVertex as parent
	g.vInfo[pos_sVertex].dataValue = 0;
	g.vInfo[pos_sVertex].parent = pos_sVertex;

	// insert starting vertex into the priority queue
   minPathPQ.push(vertexData);

   // process vertices until we find a minimum path to
   // eVertex or the priority queue is empty
   while (!minPathPQ.empty())
   {
      // delete a priority queue entry and record its
      // vertex and path weight from sVertex.
      vertexData = minPathPQ.top();
		minPathPQ.pop();
		currPos = vertexData.endV;

      // if we are at eVertex, we have found the minimum
      // path from sVertex to eVertex
      if (currPos == pos_eVertex)
		{
			foundMinPath = true;
         break;
		}

		if (g.vInfo[currPos].color != vertexInfo<T>::BLACK)
		{
			// mark the vertex so we don't look at it again
			g.vInfo[currPos].color = vertexInfo<T>::BLACK;

			// find all neighbors of the current vertex pos. for each
			// neighbor that has not been visited, generate a minInfo
			// object and insert it into the priority queue provided the
			// total weight to get to the neighbor is better than the
			// current dataValue in vInfo
			adj = g.vInfo[currPos].edges;
			for(adjIter = adj.begin();adjIter != adj.end();
										adjIter++)
			{
				destPos = (*adjIter).dest;

				if (g.vInfo[destPos].color == vertexInfo<T>::WHITE)
				{
					// compare total weight of adding edge to dataValue
					if ((newMinWeight = (g.vInfo[currPos].dataValue +
						 (*adjIter).weight)) < g.vInfo[destPos].dataValue)
					{
						// add minVertexInfo object for new vertex and update
						// dataValue in vInfo
						vertexData.endV = destPos;
						vertexData.pathWeight = newMinWeight;
						g.vInfo[destPos].dataValue = newMinWeight;
						g.vInfo[destPos].parent = currPos;
						minPathPQ.push(vertexData);
					}	// end "if" that checks weights
				}	// end "if" that checks if neighbor is not marked
			}	// end "for"
		}	// end "if" vertex not already marked
	}	// end "while"

	// clear path and setup return
   path.erase(path.begin(), path.end());
   if (foundMinPath)
	{
		currPos = pos_eVertex;
		while (currPos != pos_sVertex)
		{
			path.push_front((*(g.vInfo[currPos].vtxMapLoc)).first);
			currPos = g.vInfo[currPos].parent;
		}
		path.push_front(sVertex);
		returnValue = g.vInfo[pos_eVertex].dataValue;
   }
   else
      returnValue = -1;

	return returnValue;
}

// find the minimum spanning tree for the strongly connected digraph g
friend int minSpanTree(graph<T>& g, graph<T>& MST)
{
   // priority queue that stores minInfo objects
   miniPQ<minInfo, less<minInfo> >  minTreePQ;

   // used when inserting minInfo entries
   // into the priority queue or erasing entries
   minInfo vertexData;

   // adj is adjacency set of vertex we are visiting. adjIter
	// is an iterator that scans the list
	set<neighbor> adj;
   set<neighbor>::iterator adjIter;

	// size of the minimum spanning tree
	int minSpanTreeSize = 0, i;

	// index of a starting vertex.
	int pos_sVertex = -1, currPos, destPos, parentPos;

	// current minimum total weight for spanning tree
   int minSpanTreeWeight = 0;

	// initialize all vertices unmarked and their dataValue fields
	// to infinity;  select the first vertex as the	starting vertex;
	for (i = 0;i < g.vInfo.size(); i++)
		if (g.vInfo[i].occupied)
		{
			if (pos_sVertex == -1)
				pos_sVertex = i;
			g.vInfo[i].color = vertexInfo<T>::WHITE;
			g.vInfo[i].dataValue = INF;
		}

   // create minInfo object for starting vertex
   vertexData.endV = pos_sVertex;

   // total weight of spanning tree with only the
	// starting vertex is 0
   vertexData.pathWeight = 0;

	// update dataValue in vInfo and set rVertex as parent
	g.vInfo[pos_sVertex].dataValue = 0;
	g.vInfo[pos_sVertex].parent = pos_sVertex;

	// insert starting vertex into the priority queue
   minTreePQ.push(vertexData);

   // add vertices until we span the entire graph
	for (;;)
   {
      // delete a priority queue entry
      vertexData = minTreePQ.top();
      minTreePQ.pop();
		currPos = vertexData.endV;

		// if vertex is not part of the new graph (unvisited)
		// add the weight of the edge to the total tree we3ight
		// and increment the number of vertices in the tree
		if (g.vInfo[currPos].color == vertexInfo<T>::WHITE)
		{
			minSpanTreeWeight += vertexData.pathWeight;
			minSpanTreeSize++;

			// if we spanned all vertices, break
			if (minSpanTreeSize == g.numberOfVertices())
				break;

			// mark the vertex BLACK so we don't look at it again.
			// set dataValue in vInfo vector to current
			// minimum tree weight
			g.vInfo[currPos].color = vertexInfo<T>::BLACK;

			// find all unmarked neighbors of the vertex.
			// adjIter is a set iterator pointing at the edge corresponding to
			// vertices with index currPos and destPos
			adj = g.vInfo[currPos].edges;
			for(adjIter = adj.begin();adjIter != adj.end();	adjIter++)
			{
				destPos = (*adjIter).dest;

				// if neighbor is unmarked, check whether adding the new
				// edge to the tree is better than using the current edge
				if (g.vInfo[destPos].color == vertexInfo<T>::WHITE)
				{
					if ((*adjIter).weight < g.vInfo[destPos].dataValue)
					{
						// if new edge is a better connection, create minInfo object
						// for new vertex. update dataValue and parent variables
						// in vertexInfo
						vertexData.endV = destPos;
						vertexData.pathWeight = (*adjIter).weight;
						g.vInfo[destPos].dataValue = (*adjIter).weight;
						g.vInfo[destPos].parent = currPos;
						minTreePQ.push(vertexData);
					}
				}
			}
		}
	}

	// vertices for edges in MST
	T vA, vB;

	// clear tree and then add all of the vertices
   MST.clear();

	for(i = 0; i < g.vInfo.size(); i++)
		if (g.vInfo[i].occupied)
			MST.insertVertex((*(g.vInfo[i]).vtxMapLoc).first);

	// add the edges to the minimum spanning tree
	for (i = pos_sVertex+1; i < g.vInfo.size(); i++)
		if (g.vInfo[i].occupied)
		{
			parentPos = g.vInfo[i].parent;
			vA = (*(g.vInfo[parentPos]).vtxMapLoc).first;
			vB = (*(g.vInfo[i]).vtxMapLoc).first;
			MST.insertEdge(vA,vB, g.getWeight(vA,vB));
		}

   return minSpanTreeWeight;
}

// determine if the graph is acyclic
friend bool acyclic(graph<T>& g)
{
	int i;
	// use for calls to dfsVisit()
	list<T> dfsList;

	// initialize all vertices to WHITE
	for (i=0;i < g.vInfo.size(); i++)
		if (g.vInfo[i].occupied)
			g.vInfo[i].color = vertexInfo<T>::WHITE;

	// scan vInfo, calling dfsVisit() for each WHITE vertex.
	// catch a graphError exception in a call to dfsVisit()
	try
	{
		for (i=0;i < g.vInfo.size(); i++)
			if (g.vInfo[i].occupied && g.vInfo[i].color ==
												vertexInfo<T>::WHITE)
					dfsVisit(g,(*(g.vInfo[i].vtxMapLoc)).first,
									 dfsList, true);
	}

	catch (const graphError&)
	{
		return false;
	}

	return true;
}

// this algorithm is a private friend of the graph class
private:

// depth-first visit assuming a WHITE starting vertex. dfsList
// contains the visited vertices in reverse order of finishing time.
// when checkForCycle is true, the function throws an exception if
// it detects a cycle
friend void dfsVisit(graph<T>& g, const T& sVertex, list<T>& dfsList,
							bool checkForCycle)
{
	// indices for vertex positions in vInfo
	int pos_sVertex, pos_neighbor;

	// iterator to scan the adjacency set of a vertex
	set<neighbor>::iterator adj;

	// alias to simplify access to the vector vInfo
	vector<vertexInfo<T> >& vlist = g.vInfo;

	// fetch the index for sVertex in vInfo; throw an exception
	// if the starting vertex is not in the graph
	pos_sVertex = g.getvInfoIndex(sVertex);

	if (pos_sVertex == -1)
		throw graphError("graph dfsVisit(): vertex not in the graph");

	// color vertex GRAY to note its discovery
	vlist[pos_sVertex].color = vertexInfo<T>::GRAY;

	// create an alias for the adjacency set of sVertex
	set<neighbor>& edgeSet = vlist[pos_sVertex].edges;

	// sequence through the adjacency set and look for vertices
	// that are not yet discovered (colored WHITE). recursively call
	// dfsVisit() for each such vertex. if a vertex in the adjacency
	// set is GRAY, the vertex was discovered during a previous
	// call and there is a cycle that begins and ends at the
	// vertex; if checkForCycle is true, throw an exception
	for (adj = edgeSet.begin(); adj != edgeSet.end(); adj++)
	{
		pos_neighbor = (*adj).dest;
		if (vlist[pos_neighbor].color == vertexInfo<T>::WHITE)
			dfsVisit(g,(*(g.vInfo[pos_neighbor].vtxMapLoc)).first,
							 dfsList, checkForCycle);
		else if (vlist[pos_neighbor].color == vertexInfo<T>::GRAY
					&& checkForCycle)
			throw graphError("graph dfsVisit(): graph has a cycle");
	}

	// finished with vertex sVertex. make it BLACK and add it to
	// the front of dfsList
	vlist[pos_sVertex].color = vertexInfo<T>::BLACK;
	dfsList.push_front((*(g.vInfo[pos_sVertex].vtxMapLoc)).first);
}

// return to the public section for the remaining algorithms
public:

// depth-first search. dfsList contains all the graph vertices in the
// reverse order of their finishing times
friend void dfs(graph<T>& g, list<T>& dfsList)
{
	int i;

	// clear dfsList
	dfsList.erase(dfsList.begin(), dfsList.end());

	// initialize all vertices to WHITE
	for (i=0;i < g.vInfo.size(); i++)
		if (g.vInfo[i].occupied)
			g.vInfo[i].color = vertexInfo<T>::WHITE;

	// scan vInfo, calling () dfsVisit() for each WHITE vertex.
	for (i=0;i < g.vInfo.size(); i++)
		if (g.vInfo[i].occupied && g.vInfo[i].color ==
											vertexInfo<T>::WHITE)
			dfsVisit(g,(*(g.vInfo[i].vtxMapLoc)).first, dfsList, false);
}

// find a topological sort of an acyclic graph
friend void topologicalSort(graph<T>& g, list<T>& tlist)
{
	int i;

	// clear the list that will contain the sort
	tlist.erase(tlist.begin(), tlist.end());

	for (i=0;i < g.vInfo.size(); i++)
		if (g.vInfo[i].occupied)
			g.vInfo[i].color = vertexInfo<T>::WHITE;

	// cycle through the vertices, calling dfsVisit() for each
	// WHITE vertex. check for a cycle
	try
	{
		for (i=0;i < g.vInfo.size(); i++)
			if (g.vInfo[i].occupied && g.vInfo[i].color == vertexInfo<T>::WHITE)
				dfsVisit(g, (*(g.vInfo[i].vtxMapLoc)).first, tlist, true);
	}

	catch(graphError&)
	{
		throw graphError("graph topologicalSort(): graph has a cycle");
	}
}

// return the transpose of the graph
friend graph<T> transpose(graph<T>& g)
{
	int i, n = g.vInfo.size();
	set<neighbor>::iterator setIter;
	// initialize gt as a copy of g
	graph<T> gt = g;

	// clear the adjacency set of each vertex in gt and set the in-degree
	// of each vertex to 0
	for (i=0;i < n;i++)
	{
		gt.vInfo[i].edges.erase(gt.vInfo[i].edges.begin(),
										gt.vInfo[i].edges.end());
		gt.vInfo[i].inDegree = 0;
	}

	// assign the edges of gt as the reverse of those in g
	for (i=0; i < n; i++)
		if (g.vInfo[i].occupied)
		{
			set<neighbor>& s = g.vInfo[i].edges;

			// edge from index i to index dest in vInfo for g must be an edge
			// from dest to i with the same weight in gt. increment the in-degree
			// at index i
			for (setIter = s.begin(); setIter != s.end(); setIter++)
			{
				gt.vInfo[(*setIter).dest].edges.insert(neighbor(i,(*setIter).weight));
				gt.vInfo[i].inDegree++;
			}
		}

	return gt;
}

// find the strong components of the graph
friend void strongComponents(graph<T>& g, vector<set<T> >& component)
{
	// list of vertices visited by dfs() for graph g
	list<T> dfsGList;

	// list of vertices visited by dfsVisit() for g transpose
	list<T> dfsGTList;

	// used to scan dfsGList and dfsGTList objects
	typename list<T>::iterator gIter, gtIter;

	// transpose of the graph
	graph<T> gt;

	// set for an individual strong component
	set<T> scSet;

	int i;

	// clear the return vector
	component.resize(0);

	// execute depth-first tranversal of g
	dfs(g, dfsGList);

	// compute gt
	gt = transpose(g);

	// initialize all vertices in gt to WHITE (unvisited)
	for (i=0;i < gt.vInfo.size(); i++)
		if (gt.vInfo[i].occupied)
			gt.vInfo[i].color = vertexInfo<T>::WHITE;

	// call dfsVisit() for gt from vertices in dfsGList
	gIter = dfsGList.begin();
	while(gIter != dfsGList.end())
	{
		// call dfsVisit() only if vertex has not been visited
		if (gt.vInfo[gt.getvInfoIndex(*gIter)].color ==
						 vertexInfo<T>::WHITE)
		{
			// clear dfsGTList and scSet
			dfsGTList.erase(dfsGTList.begin(), dfsGTList.end());
			scSet.erase(scSet.begin(), scSet.end());

			// do dfsVisit() in gt for starting vertex *gIter
			dfsVisit(gt, *gIter, dfsGTList, false);

			// copy vertices from the list to set scSet
			for (gtIter = dfsGTList.begin(); gtIter != dfsGTList.end();
								gtIter++)
				scSet.insert(*gtIter);

			// add strong component set to the vector
			component.push_back(scSet);
		}
		gIter++;
	}
}
================================================================================
#ifndef UTILITY_FUNCTIONS
#define UTILITY_FUNCTIONS

#include <iostream>
#include <vector>
#include <string>
#include <list>
#include <map>

#include "d_stree.h"		// for the stree class

using namespace std;

#ifdef _MSC_VER
// temporary fix for Microsoft VC++ 6.0 bug
istream& getline(istream& is, string& sbuff, char term_char = '\n');
#endif // _MSC_VER

// template function to output an n element array of type T
template <typename T>
void writeArray(const T arr[], int n);

// output the elements of v
template <typename T>
void writeVector(const vector<T>& v);

// display the list. follow the output of each list element
// by separator. default value of separator = "  "
template <typename T>
void writeList(const list<T>& alist, const string& separator = "  ");

// display the search tree. follow the output of each list element
// by separator. default value of separator = "  "
template <typename T>
void writeSTree(const stree<T>& t, const string& separator);

// display the elements of a container in the iterator
// range [first, last). output separator between items.
// default value of separator = "  "
template <typename Iterator>
void writeContainer(Iterator first, Iterator last, const string& separator = "  ");

// display the key-value pairs in the map. follow the output of
// each pair by separator. default value of separator = "  "
template <typename Key, typename T>
void writeMap(const map<Key,T>& m, const string& separator);

// return an iterator pointing to the maximum container
// value in the iterator range [first, last)
template <typename Iterator>
Iterator maxElement(Iterator first, Iterator last);

// class used to implement one-argument I/O manipulators
template<typename T>
class omanip1
{
   public:
      // constructor. initialize the private data members
      omanip1(ostream& (*f)(ostream & ostr, const T& x), const T& w):
         func(f), parm(w)
      {}

		// evaluate f.func with argument f.parm.
		// this function returns an ostream&
		friend ostream& operator<< (ostream& ostr, const omanip1<T>& f)
		{
			return(*f.func)(ostr, f.parm);
		}
   private:
      // pointer to the function that does the work
      ostream& (*func)(ostream& ostr, const T& x);
      // the two manipulator parameters stored in the class
      T parm;
};

// class used to implement two-argument I/O manipulators
template<typename T>
class omanip2
{
   public:
      // constructor. initialize the private data members
      omanip2(ostream& (*f)(ostream & ostr, const T& x, const T& y),
              const T& w, const T& p ) : func(f), parm1(w), parm2(p)
      {}

		// evaluate f.func with parameters f.parm1 and f.parm2.
		// this function returns an ostream&
		friend ostream& operator<< (ostream& ostr, const omanip2<T>& f)
		{
			return(*f.func)(ostr, f.parm1, f.parm2);
		}
   private:
      // pointer to the function that does the work
      ostream& (*func)(ostream& ostr, const T& x, const T& y);
      // the two manipulator parameters stored in the class
      T parm1;
      T parm2;
};

// change ostr to fixed mode precision with p decimal places.
// output the next stream data item in a field of w positions
ostream& sr(ostream &ostr, const int& w, const int& p);

// manipulator that sets field width and precision for fixed
// mode output
omanip2<int> setreal(int w, int p);

#ifdef _MSC_VER
istream& getline(istream& is,string& sbuff, char term_char)
{
	char tc, eof = char_traits<char>::eof();
	string::size_type numchars = 0;
	sbuff.erase();


	while(true)
	{
		tc = is.get();
		if(tc == eof) // eof - set failbit and quit
		{
			is.setstate(ios::failbit);
			break;
		}
		else if(tc == term_char) // termination char extracted
			break;

		sbuff.append(1,tc);
		numchars++;

		if(numchars == sbuff.max_size()) // max chars extracted
				break;
	}

	return is;
}
#endif // _MSC_VER

template <typename T>
void writeArray(const T arr[], int n)
{
	int i;

	for(i=0;i < n;i++)
		cout << arr[i] << "  ";
	cout << endl;
}

template <typename T>
void writeVector(const vector<T>& v)
{
	// capture the size of the vector in n
	int i, n = v.size();

	for(i = 0; i < n; i++)
		cout << v[i] << "  ";
	cout << endl;
}

template <typename T>
void writeList(const list<T>& alist, const string& separator)
{
	typename list<T>::const_iterator  iter;

	for (iter = alist.begin(); iter != alist.end(); iter++)
		cout << *iter << separator;
	cout << endl;
}

template <typename T>
void writeSTree(const stree<T>& t, const string& separator = "  ")
{
	typename stree<T>::const_iterator iter = t.begin();

	while (iter != t.end())
	{
		cout << *iter << separator;
		iter++;
	}
}

template <typename Iterator>
void writeContainer(Iterator first, Iterator last,
						  const string& separator)
{
	// declare iterator of type Iterator and initialize it
	// to have value first
	Iterator iter = first;

	while (iter != last)
	{
		cout << *iter << separator;
		iter++;
	}
}

template <typename Key, typename T>
void writeMap(const map<Key,T>& m, const string& separator = "  ")
{
	typename map<Key, T>::const_iterator iter = m.begin();

	while(iter != m.end())
	{
		cout << (*iter).first << "  " << (*iter).second << separator;
		iter++;
	}
}

template <typename Iterator>
Iterator maxElement(Iterator first, Iterator last)
{
	// initially, assume first points to largest element
	Iterator iter = first, maxIter = first;

	// move past first element
	iter++;

	// scan range, comparing values *iter and *maxIter
	// until reach the end of the range. change maxIter
	// whenever *maxIter < *iter
	while (iter != last)
	{
		// if iter points to a new maximum element, it becomes
		// maxIter
		if (*maxIter < *iter)
			maxIter = iter;
		iter++;
	}

	// return pointer to the largest element
	return maxIter;
}

ostream& sr(ostream& ostr, const int& w, const int& p)
{
   ostr.setf(ios::fixed, ios::floatfield);
   ostr.precision(p);
   ostr.width(w);

   return ostr;
}

// manipulator with field width and precision arguments
// using sr
omanip2<int> setreal(int w, int p)
{
   return omanip2<int> (sr,w,p);
}

#endif	// UTILITY_FUNCTIONS
================================================================================
